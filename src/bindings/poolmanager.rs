/**

Generated by the following Solidity interface...
```solidity
interface PoolManager {
    type BalanceDelta is int256;
    type Currency is address;
    type PoolId is bytes32;
    struct ModifyLiquidityParams {
        int24 tickLower;
        int24 tickUpper;
        int256 liquidityDelta;
        bytes32 salt;
    }
    struct PoolKey {
        Currency currency0;
        Currency currency1;
        uint24 fee;
        int24 tickSpacing;
        address hooks;
    }
    struct SwapParams {
        bool zeroForOne;
        int256 amountSpecified;
        uint160 sqrtPriceLimitX96;
    }

    error AlreadyUnlocked();
    error CurrenciesOutOfOrderOrEqual(address currency0, address currency1);
    error CurrencyNotSettled();
    error DelegateCallNotAllowed();
    error InvalidCaller();
    error ManagerLocked();
    error MustClearExactPositiveDelta();
    error NonZeroNativeValue();
    error PoolNotInitialized();
    error ProtocolFeeCannotBeFetched();
    error ProtocolFeeTooLarge(uint24 fee);
    error SwapAmountCannotBeZero();
    error TickSpacingTooLarge(int24 tickSpacing);
    error TickSpacingTooSmall(int24 tickSpacing);
    error UnauthorizedDynamicLPFeeUpdate();

    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);
    event Initialize(PoolId indexed id, Currency indexed currency0, Currency indexed currency1, uint24 fee, int24 tickSpacing, address hooks, uint160 sqrtPriceX96, int24 tick);
    event ModifyLiquidity(PoolId indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta);
    event OperatorSet(address indexed owner, address indexed operator, bool approved);
    event OwnershipTransferred(address indexed user, address indexed newOwner);
    event ProtocolFeeControllerUpdated(address indexed protocolFeeController);
    event ProtocolFeeUpdated(PoolId indexed id, uint24 protocolFee);
    event Swap(PoolId indexed id, address indexed sender, int128 amount0, int128 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick, uint24 fee);
    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);

    constructor(uint256 controllerGasLimit);

    function allowance(address owner, address spender, uint256 id) external view returns (uint256 amount);
    function approve(address spender, uint256 id, uint256 amount) external returns (bool);
    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);
    function burn(address from, uint256 id, uint256 amount) external;
    function clear(Currency currency, uint256 amount) external;
    function collectProtocolFees(address recipient, Currency currency, uint256 amount) external returns (uint256 amountCollected);
    function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes memory hookData) external returns (BalanceDelta delta);
    function extsload(bytes32 slot) external view returns (bytes32);
    function extsload(bytes32 startSlot, uint256 nSlots) external view returns (bytes32[] memory);
    function extsload(bytes32[] memory slots) external view returns (bytes32[] memory);
    function exttload(bytes32[] memory slots) external view returns (bytes32[] memory);
    function exttload(bytes32 slot) external view returns (bytes32);
    function initialize(PoolKey memory key, uint160 sqrtPriceX96, bytes memory hookData) external returns (int24 tick);
    function isOperator(address owner, address operator) external view returns (bool isOperator);
    function mint(address to, uint256 id, uint256 amount) external;
    function modifyLiquidity(PoolKey memory key, ModifyLiquidityParams memory params, bytes memory hookData) external returns (BalanceDelta callerDelta, BalanceDelta feesAccrued);
    function owner() external view returns (address);
    function protocolFeeController() external view returns (address);
    function protocolFeesAccrued(Currency currency) external view returns (uint256 amount);
    function setOperator(address operator, bool approved) external returns (bool);
    function setProtocolFee(PoolKey memory key, uint24 newProtocolFee) external;
    function setProtocolFeeController(address controller) external;
    function settle() external payable returns (uint256 paid);
    function settleFor(address recipient) external payable returns (uint256 paid);
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function swap(PoolKey memory key, SwapParams memory params, bytes memory hookData) external returns (BalanceDelta swapDelta);
    function sync(Currency currency) external;
    function take(Currency currency, address to, uint256 amount) external;
    function transfer(address receiver, uint256 id, uint256 amount) external returns (bool);
    function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external returns (bool);
    function transferOwnership(address newOwner) external;
    function unlock(bytes memory data) external returns (bytes memory result);
    function updateDynamicLPFee(PoolKey memory key, uint24 newDynamicLPFee) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "controllerGasLimit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "burn",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "clear",
    "inputs": [
      {
        "name": "currency",
        "type": "address",
        "internalType": "Currency"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "collectProtocolFees",
    "inputs": [
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "currency",
        "type": "address",
        "internalType": "Currency"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "amountCollected",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "donate",
    "inputs": [
      {
        "name": "key",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "amount0",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "hookData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "delta",
        "type": "int256",
        "internalType": "BalanceDelta"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "extsload",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "extsload",
    "inputs": [
      {
        "name": "startSlot",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "nSlots",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "extsload",
    "inputs": [
      {
        "name": "slots",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "exttload",
    "inputs": [
      {
        "name": "slots",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "exttload",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "key",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "sqrtPriceX96",
        "type": "uint160",
        "internalType": "uint160"
      },
      {
        "name": "hookData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "tick",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isOperator",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isOperator",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "modifyLiquidity",
    "inputs": [
      {
        "name": "key",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct IPoolManager.ModifyLiquidityParams",
        "components": [
          {
            "name": "tickLower",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "tickUpper",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "liquidityDelta",
            "type": "int256",
            "internalType": "int256"
          },
          {
            "name": "salt",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "hookData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "callerDelta",
        "type": "int256",
        "internalType": "BalanceDelta"
      },
      {
        "name": "feesAccrued",
        "type": "int256",
        "internalType": "BalanceDelta"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "protocolFeeController",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IProtocolFeeController"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "protocolFeesAccrued",
    "inputs": [
      {
        "name": "currency",
        "type": "address",
        "internalType": "Currency"
      }
    ],
    "outputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setOperator",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setProtocolFee",
    "inputs": [
      {
        "name": "key",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "newProtocolFee",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setProtocolFeeController",
    "inputs": [
      {
        "name": "controller",
        "type": "address",
        "internalType": "contract IProtocolFeeController"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "settle",
    "inputs": [],
    "outputs": [
      {
        "name": "paid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "settleFor",
    "inputs": [
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "paid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "swap",
    "inputs": [
      {
        "name": "key",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct IPoolManager.SwapParams",
        "components": [
          {
            "name": "zeroForOne",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "amountSpecified",
            "type": "int256",
            "internalType": "int256"
          },
          {
            "name": "sqrtPriceLimitX96",
            "type": "uint160",
            "internalType": "uint160"
          }
        ]
      },
      {
        "name": "hookData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "swapDelta",
        "type": "int256",
        "internalType": "BalanceDelta"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "sync",
    "inputs": [
      {
        "name": "currency",
        "type": "address",
        "internalType": "Currency"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "take",
    "inputs": [
      {
        "name": "currency",
        "type": "address",
        "internalType": "Currency"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "unlock",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "result",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDynamicLPFee",
    "inputs": [
      {
        "name": "key",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "newDynamicLPFee",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialize",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "indexed": true,
        "internalType": "PoolId"
      },
      {
        "name": "currency0",
        "type": "address",
        "indexed": true,
        "internalType": "Currency"
      },
      {
        "name": "currency1",
        "type": "address",
        "indexed": true,
        "internalType": "Currency"
      },
      {
        "name": "fee",
        "type": "uint24",
        "indexed": false,
        "internalType": "uint24"
      },
      {
        "name": "tickSpacing",
        "type": "int24",
        "indexed": false,
        "internalType": "int24"
      },
      {
        "name": "hooks",
        "type": "address",
        "indexed": false,
        "internalType": "contract IHooks"
      },
      {
        "name": "sqrtPriceX96",
        "type": "uint160",
        "indexed": false,
        "internalType": "uint160"
      },
      {
        "name": "tick",
        "type": "int24",
        "indexed": false,
        "internalType": "int24"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ModifyLiquidity",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "indexed": true,
        "internalType": "PoolId"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "tickLower",
        "type": "int24",
        "indexed": false,
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "indexed": false,
        "internalType": "int24"
      },
      {
        "name": "liquidityDelta",
        "type": "int256",
        "indexed": false,
        "internalType": "int256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OperatorSet",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProtocolFeeControllerUpdated",
    "inputs": [
      {
        "name": "protocolFeeController",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProtocolFeeUpdated",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "indexed": true,
        "internalType": "PoolId"
      },
      {
        "name": "protocolFee",
        "type": "uint24",
        "indexed": false,
        "internalType": "uint24"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Swap",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "indexed": true,
        "internalType": "PoolId"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount0",
        "type": "int128",
        "indexed": false,
        "internalType": "int128"
      },
      {
        "name": "amount1",
        "type": "int128",
        "indexed": false,
        "internalType": "int128"
      },
      {
        "name": "sqrtPriceX96",
        "type": "uint160",
        "indexed": false,
        "internalType": "uint160"
      },
      {
        "name": "liquidity",
        "type": "uint128",
        "indexed": false,
        "internalType": "uint128"
      },
      {
        "name": "tick",
        "type": "int24",
        "indexed": false,
        "internalType": "int24"
      },
      {
        "name": "fee",
        "type": "uint24",
        "indexed": false,
        "internalType": "uint24"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "caller",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyUnlocked",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CurrenciesOutOfOrderOrEqual",
    "inputs": [
      {
        "name": "currency0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "currency1",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "CurrencyNotSettled",
    "inputs": []
  },
  {
    "type": "error",
    "name": "DelegateCallNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCaller",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ManagerLocked",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MustClearExactPositiveDelta",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NonZeroNativeValue",
    "inputs": []
  },
  {
    "type": "error",
    "name": "PoolNotInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ProtocolFeeCannotBeFetched",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ProtocolFeeTooLarge",
    "inputs": [
      {
        "name": "fee",
        "type": "uint24",
        "internalType": "uint24"
      }
    ]
  },
  {
    "type": "error",
    "name": "SwapAmountCannotBeZero",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TickSpacingTooLarge",
    "inputs": [
      {
        "name": "tickSpacing",
        "type": "int24",
        "internalType": "int24"
      }
    ]
  },
  {
    "type": "error",
    "name": "TickSpacingTooSmall",
    "inputs": [
      {
        "name": "tickSpacing",
        "type": "int24",
        "internalType": "int24"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnauthorizedDynamicLPFeeUpdate",
    "inputs": []
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod PoolManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c0604052348015600e575f80fd5b50604051614ff5380380614ff5833981016040819052602b916077565b5f80546001600160a01b031916339081178255604051839282917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350608052503060a052608d565b5f602082840312156086575f80fd5b5051919050565b60805160a051614f406100b55f395f6117a501525f81816121ce015261220c0152614f405ff3fe6080604052600436106101e5575f3560e01c80635a6bcfda11610108578063a58411941161009d578063f135baaa1161006d578063f135baaa14610602578063f2fde38b14610621578063f3cd914c14610640578063f5298aca1461065f578063fe99049a1461067e575f80fd5b8063a58411941461056c578063b6363cf21461058b578063dbd035ff146105c4578063f02de3b2146105e3575f80fd5b80638161b874116100d85780638161b874146104cd5780638da5cb5b146104ec57806397e8cd4e146105225780639bf6645f1461054d575f80fd5b80635a6bcfda14610429578063695c5bf51461045d5780637e87ce7d1461048f57806380f0b44c146104ae575f80fd5b80632d7713891161017e57806348c894911161014e57806348c894911461038357806352759651146103af578063558a7297146103ce578063598af9e7146103ed575f80fd5b80632d7713891461030657806335fd631a146103255780633dd45adb14610351578063426a849314610364575f80fd5b806311da60b4116101b957806311da60b4146102a1578063156e29f6146102a95780631e2eaeaf146102c8578063234266d7146102e7575f80fd5b8062fdd58e146101e957806301ffc9a714610232578063095bcdb6146102615780630b0d9c0914610280575b5f80fd5b3480156101f4575f80fd5b5061021f610203366004614361565b600460209081525f928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561023d575f80fd5b5061025161024c36600461438b565b61069d565b6040519015158152602001610229565b34801561026c575f80fd5b5061025161027b3660046143b2565b6106d3565b34801561028b575f80fd5b5061029f61029a3660046143e4565b61077a565b005b61021f6107cb565b3480156102b4575f80fd5b5061029f6102c33660046143b2565b6107fd565b3480156102d3575f80fd5b5061021f6102e2366004614422565b610848565b3480156102f2575f80fd5b5061021f6103013660046145a1565b610852565b348015610311575f80fd5b5061029f610320366004614605565b610902565b348015610330575f80fd5b5061034461033f366004614620565b610998565b6040516102299190614640565b61021f61035f366004614605565b6109d5565b34801561036f575f80fd5b5061025161037e3660046143b2565b610a07565b34801561038e575f80fd5b506103a261039d366004614682565b610a6b565b60405161022991906146c0565b3480156103ba575f80fd5b5061029f6103c93660046146f5565b610b2e565b3480156103d9575f80fd5b506102516103e8366004614736565b610b9d565b3480156103f8575f80fd5b5061021f6104073660046143e4565b600560209081525f938452604080852082529284528284209052825290205481565b348015610434575f80fd5b50610448610443366004614760565b610c0c565b60408051928352602083019190915201610229565b348015610468575f80fd5b5061047c610477366004614802565b610d9f565b60405160029190910b8152602001610229565b34801561049a575f80fd5b5061029f6104a93660046146f5565b610f8e565b3480156104b9575f80fd5b5061029f6104c8366004614361565b611040565b3480156104d8575f80fd5b5061021f6104e73660046143e4565b6110b3565b3480156104f7575f80fd5b505f5461050a906001600160a01b031681565b6040516001600160a01b039091168152602001610229565b34801561052d575f80fd5b5061021f61053c366004614605565b60016020525f908152604090205481565b348015610558575f80fd5b50610344610567366004614849565b611142565b348015610577575f80fd5b5061029f610586366004614605565b61117b565b348015610596575f80fd5b506102516105a53660046148b8565b600360209081525f928352604080842090915290825290205460ff1681565b3480156105cf575f80fd5b506103446105de366004614849565b6111b7565b3480156105ee575f80fd5b5060025461050a906001600160a01b031681565b34801561060d575f80fd5b5061021f61061c366004614422565b6111ee565b34801561062c575f80fd5b5061029f61063b366004614605565b6111f8565b34801561064b575f80fd5b5061021f61065a3660046148ef565b61128a565b34801561066a575f80fd5b5061029f6106793660046143b2565b6113d0565b348015610689575f80fd5b5061025161069836600461498d565b611415565b5f6301ffc9a760e01b6001600160e01b0319831614806106cd5750630f632fb360e01b6001600160e01b03198316145b92915050565b335f9081526004602090815260408083208584529091528120805483919083906106fe9084906149e4565b90915550506001600160a01b0384165f908152600460209081526040808320868452909152812080548492906107359084906149f7565b909155505060408051338082526020820185905285926001600160a01b038816925f80516020614eab83398151915291015b60405180910390a45060015b9392505050565b5f80516020614ecb8339815191525c61079d5761079d6354e3ca0d60e01b611574565b6107b2836107aa8361157c565b5f033361159c565b6107c66001600160a01b03841683836115ef565b505050565b5f5f80516020614ecb8339815191525c6107ef576107ef6354e3ca0d60e01b611574565b6107f833611685565b905090565b5f80516020614ecb8339815191525c610820576108206354e3ca0d60e01b611574565b8161082e816107aa8461157c565b610842846001600160a01b03831684611728565b50505050565b5f81545f5260205ff35b5f5f80516020614ecb8339815191525c610876576108766354e3ca0d60e01b611574565b61087e61179a565b5f61089d61088d8860a0902090565b5f90815260066020526040902090565b90506108a8816117dc565b60808701516108c4906001600160a01b03168888888888611800565b6108cf81878761187d565b91506108dc878333611930565b60808701516108f8906001600160a01b03168888888888611958565b5095945050505050565b5f546001600160a01b0316331461094f5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517fb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc905f90a250565b6060604051808360051b6020835284602084015260408301925080830190505b855483526020830192506001860195508083106109b85781810382f35b5f5f80516020614ecb8339815191525c6109f9576109f96354e3ca0d60e01b611574565b6106cd82611685565b919050565b335f8181526005602090815260408083206001600160a01b03881680855290835281842087855290925280832085905551919285927fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a7906107679087815260200190565b60605f80516020614ecb8339815191525c15610a9157610a916328486b6360e11b611574565b610a996119ca565b6040516348eeb9a360e11b815233906391dd734690610abe9086908690600401614a32565b5f604051808303815f875af1158015610ad9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b009190810190614a45565b90505f80516020614eeb8339815191525c15610b2657610b26635212cba160e01b611574565b6106cd6119dd565b604082015162ffffff1662800000141580610b5f575081608001516001600160a01b0316336001600160a01b031614155b15610b7457610b746330d2164160e01b611574565b610b828162ffffff166119ef565b60a082205f8181526006602052604090206107c69083611a15565b335f8181526003602090815260408083206001600160a01b038716808552908352818420805460ff191687151590811790915591519182529293917fceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267910160405180910390a350600192915050565b5f805f80516020614ecb8339815191525c610c3157610c316354e3ca0d60e01b611574565b610c3961179a565b60a086205f818152600660205260409020610c53816117dc565b6080880151610c6e906001600160a01b031689898989611a30565b5f610cd56040518060c00160405280336001600160a01b031681526020018a5f015160020b81526020018a6020015160020b8152602001610cb28b60400151611b32565b600f0b81526060808d015160020b60208301528b01516040909101528390611b4e565b94509050610ce38185611ec8565b9450336001600160a01b0316837f541c041c2cce48e614b3de043c9280f06b6164c0a1741649e2de3c3d375f79748a5f01518b602001518c60400151604051610d4793929190600293840b81529190920b6020820152604081019190915260600190565b60405180910390a360808901515f90610d6d906001600160a01b03168b8b898c8c611efb565b90965090508015610d8757610d878a828c60800151611930565b610d928a8733611930565b5050505094509492505050565b5f610da861179a565b6060850151617fff60029190910b1315610dd3576060850151610dd3906316e0049f60e31b9061201a565b600160020b856060015160020b1215610dfd576060850151610dfd90631d3d20b160e31b9061201a565b845160208601516001600160a01b03908116911610610e2f5784516020860151610e2f916306e6c98360e41b91612029565b610e53856040015186608001516001600160a01b031661204b90919063ffffffff16565b610e6e576080850151610e6e90630732d7b560e51b9061210c565b5f610e81866040015162ffffff16612121565b6080870151909150610e9f906001600160a01b031687878787612146565b60a086205f610ead886121b7565b5f848152600660205260409020909250610eca91508883866122e9565b6080890151909450610ee9906001600160a01b03168989878a8a612348565b87602001516001600160a01b0316885f01516001600160a01b0316837fdd466e674ea557f56295e2d0218a125ea4b4f0f6f3307b95f85e6110838d64388b604001518c606001518d608001518d8b604051610f7b95949392919062ffffff959095168552600293840b60208601526001600160a01b03928316604086015291166060840152900b608082015260a00190565b60405180910390a4505050949350505050565b6002546001600160a01b03163314610fb057610fb06348f5c3ed60e01b611574565b6103e9610fff821610623e900062fff00083161016610fdf57610fdf63a7abe2f760e01b62ffffff831661210c565b60a0822061100182610ffb835f90815260066020526040902090565b906123bb565b60405162ffffff8316815281907fe9c42593e71f84403b84352cd168d693e2c9fcd1fdbcc3feb21d92b43e6696f99060200160405180910390a2505050565b5f80516020614ecb8339815191525c611063576110636354e3ca0d60e01b611574565b335f9081526001600160a01b038316602052604081205c906110848361157c565b90508181600f0b146110a0576110a063bda73abf60e01b611574565b610842846110ad83614ad7565b3361159c565b6002545f906001600160a01b031633146110d7576110d76348f5c3ed60e01b611574565b81156110e357816110fc565b6001600160a01b0383165f908152600160205260409020545b6001600160a01b0384165f908152600160205260408120805492935083929091906111289084906149e4565b9091555061077390506001600160a01b03841685836115ef565b606060405180602082528360208301526040820191508360051b8201855b80355c845260209384019301818410611160575b5081810382f35b6111836123d0565b6001600160a01b0381166111945750565b5f6111a7826001600160a01b0316612404565b90506111b38282612480565b5050565b606060405180602082528360208301526040820191508360051b8201855b80355484526020938401930181841015611174576111d5565b5f815c5f5260205ff35b5f546001600160a01b031633146112405760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610946565b5f80546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b5f5f80516020614ecb8339815191525c6112ae576112ae6354e3ca0d60e01b611574565b6112b661179a565b83602001515f036112d1576112d163be8b850760e01b611574565b60a085205f8181526006602052604090206112eb816117dc565b60808701515f908190819061130c906001600160a01b03168b8b8b8b6124c0565b80935081955082945050505061137b84866040518060a001604052808e6060015160020b81526020018d5f0151151581526020018681526020018d604001516001600160a01b031681526020018562ffffff168152508c5f0151611374578d602001516125dc565b8d516125dc565b60808b01519096505f925061139f91506001600160a01b03168a8a888b8b886126ca565b909550905080156113b9576113b989828b60800151611930565b6113c4898633611930565b50505050949350505050565b5f80516020614ecb8339815191525c6113f3576113f36354e3ca0d60e01b611574565b81611401816110ad8461157c565b610842846001600160a01b038316846127ed565b5f336001600160a01b0386161480159061145257506001600160a01b0385165f90815260036020908152604080832033845290915290205460ff16155b156114c2576001600160a01b0385165f90815260056020908152604080832033845282528083208684529091529020545f1981146114c05761149483826149e4565b6001600160a01b0387165f90815260056020908152604080832033845282528083208884529091529020555b505b6001600160a01b0385165f908152600460209081526040808320868452909152812080548492906114f49084906149e4565b90915550506001600160a01b0384165f9081526004602090815260408083208684529091528120805484929061152b9084906149f7565b9091555050604080513381526020810184905284916001600160a01b0380881692908916915f80516020614eab833981519152910160405180910390a45060015b949350505050565b805f5260045ffd5b5f6001607f1b8210611598576115986393dafdf160e01b611574565b5090565b81600f0b5f036115ab57505050565b5f806115c16001600160a01b03861684866128ab565b91509150805f036115d9576115d46128e4565b6115e8565b815f036115e8576115e861290c565b5050505050565b5f6001600160a01b038416611623575f805f8085875af190508061161e5761161e638549db5960e01b84612934565b610842565b60405163a9059cbb60e01b81526001600160a01b038416600482015282602482015260205f6044835f895af13d15601f3d1160015f511416171691505f81525f60208201525f6040820152508061084257610842632c4b17e760e21b85612934565b5f5f80516020614e8b8339815191525c6001600160a01b0381166116ab5734915061170f565b34156116c1576116c16319d245cf60e01b611574565b7f1e0745a7db1623981f0b2a5d4232364c00787266eb75ad546f190e6cebe9bd955c5f6116f66001600160a01b038416612404565b905061170282826149e4565b935061170c612967565b50505b6117228161171c8461157c565b8561159c565b50919050565b6001600160a01b0383165f9081526004602090815260408083208584529091528120805483929061175a9084906149f7565b9091555050604080513381526020810183905283916001600160a01b038616915f915f80516020614eab83398151915291015b60405180910390a4505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117da576117da6306c4a1c760e11b611574565b565b80546001600160a01b03165f036117fd576117fd63486aa30760e01b611574565b50565b85336001600160a01b038216146118745760208716156118745761187233878787878760405160240161183896959493929190614b3e565b60408051601f198184030181529190526020810180516001600160e01b0316635b54587d60e11b1790526001600160a01b03891690612979565b505b50505050505050565b60038301545f906001600160801b03168082036118a4576118a463a74f97ab60e01b611574565b6118d26118b08561157c565b5f036118bb8561157c565b5f0360809190911b6001600160801b039091161790565b915083156118fe576118f284600160801b836001600160801b0316612a0a565b60018601805490910190555b82156119285761191c83600160801b836001600160801b0316612a0a565b60028601805490910190555b509392505050565b8251611946906119408460801d90565b8361159c565b6107c6836020015161194084600f0b90565b85336001600160a01b038216146118745760108716156118745761187233878787878760405160240161199096959493929190614b3e565b60408051601f198184030181529190526020810180516001600160e01b031663e1b4af6960e01b1790526001600160a01b03891690612979565b60015f80516020614ecb8339815191525d565b5f5f80516020614ecb8339815191525d565b620f424062ffffff821611156117fd576117fd631400211360e01b62ffffff831661210c565b611a1e826117dc565b8154611a2a9082612aa6565b90915550565b84336001600160a01b03821614611b2a575f8460400151138015611a575750610800861615155b15611ab857611ab23386868686604051602401611a78959493929190614b88565b60408051601f198184030181529190526020810180516001600160e01b031663259982e560e01b1790526001600160a01b03881690612979565b50611b2a565b5f846040015113158015611acf5750610200861615155b15611b2a576118743386868686604051602401611af0959493929190614b88565b60408051601f198184030181529190526020810180516001600160e01b031663021d0ee760e41b1790526001600160a01b03881690612979565b505050505050565b80600f81900b8114610a0257610a026393dafdf160e01b611574565b6060810151602082015160408301515f9283929091611b6d8282612ac1565b604080516080810182525f80825260208201819052918101829052606081019190915283600f0b5f14611cb257611ba68884865f612b21565b6001600160801b0316602083015215158152611bc58883866001612b21565b6001600160801b03166060830152151560408201525f600f85900b12611c77575f611c15886080015160020b620d89e7198190058102620d89e8829005820203056001016001600160801b030490565b9050806001600160801b031682602001516001600160801b03161115611c4657611c4663b8e3c38560e01b8561201a565b806001600160801b031682606001516001600160801b03161115611c7557611c7563b8e3c38560e01b8461201a565b505b805115611c93576080870151611c939060058a01908590612bdb565b806040015115611cb2576080870151611cb29060058a01908490612bdb565b5f80611cbf8a8686612c2d565b8a5160a08c015160408051602681019290925260068083018a9052600383018b9052928252603a600c8301205f838301819052602080850182905293819052908152928f01909152812092945090925080611d1c838a8787612ce1565b91509150611d48611d2c8361157c565b611d358361157c565b6001600160801b031660809190911b1790565b995050505050505f84600f0b1215611db157805115611d8457600283810b5f90815260048a016020526040812081815560018101829055909101555b806040015115611db157600282810b5f90815260048a016020526040812081815560018101829055909101555b5082600f0b5f14611ebe5786545f80611dcd8360a01c60020b90565b6001600160a01b038416915091508460020b8260020b1215611e1c57611e15611e0f611e0a611dfb88612d9a565b611e0488612d9a565b8a613052565b611b32565b60801b90565b9750611eba565b8360020b8260020b1215611e9557611e53611e3d611e0a83611e0488612d9a565b611d35611e0a611e4c89612d9a565b858b61308a565b60038b0154909850611e6e906001600160801b0316876130b6565b60038b0180546001600160801b0319166001600160801b0392909216919091179055611eba565b611eb75f611d35611e0a611ea889612d9a565b611eb189612d9a565b8b61308a565b97505b5050505b5050509250929050565b5f608082811d9084901d01600f83810b9085900b01611ef2611ee983611b32565b611d3583611b32565b95945050505050565b5f806001600160a01b0388163303611f1757508390505f61200f565b8491505f86604001511315611fa357610400881615611f9e57611f8f338888888888604051602401611f4e96959493929190614be8565b60408051601f198184030181529190526020810180516001600160e01b0316625a2a8160e81b17905260028a1615155b6001600160a01b038b1691906130dd565b9050611f9b828261311e565b91505b61200f565b61010088161561200f57612000338888888888604051602401611fcb96959493929190614be8565b60408051601f198184030181529190526020810180516001600160e01b03166346d95b2960e11b17905260018a161515611f7e565b905061200c828261311e565b91505b965096945050505050565b815f528060020b60045260245ffd5b825f526001600160a01b0382166004526001600160a01b03811660245260445ffd5b5f6080831615801561205f57506008831615155b1561206b57505f6106cd565b6040831615801561207e57506004831615155b1561208a57505f6106cd565b610400831615801561209e57506002831615155b156120aa57505f6106cd565b61010083161580156120be57506001831615155b156120ca57505f6106cd565b6001600160a01b038316156120fb57613fff83161515806120f657506280000062ffffff831614610773565b610773565b5062ffffff16628000001415919050565b815f526001600160a01b03811660045260245ffd5b5f6280000062ffffff83160361213857505f919050565b6115988262ffffff166119ef565b84336001600160a01b03821614611b2a57612000861615611b2a57611874338686868660405160240161217d959493929190614c4f565b60408051601f198184030181529190526020810180516001600160e01b03166301a206c160e51b1790526001600160a01b03881690612979565b6002545f9081906001600160a01b0316156122e4577f00000000000000000000000000000000000000000000000000000000000000005a101561220457612204630f724b8160e11b611574565b6002546040517f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b0316905f90612246908790602401614c90565b60408051601f198184030181529190526020810180516001600160e01b031663553bfc3760e01b17815281519192505f918291829190828789f13d602014169550851561229d576040513d5f823e805191505f8152505b8580156122ae57508062ffffff1681145b80156122cb57506103e9610fff821610623e900062fff000831610165b6122d6575f806122da565b6001815b9096509450505050505b915091565b83545f906001600160a01b03161561230b5761230b637983c05160e01b611574565b6123148461313f565b905061233d82612337856123316001600160a01b0389168661342a565b90613445565b90612aa6565b909455509192915050565b85336001600160a01b03821614611874576110008716156118745761187233878787878760405160240161238196959493929190614c9e565b60408051601f198184030181529190526020810180516001600160e01b031663a910f80f60e01b1790526001600160a01b03891690612979565b6123c4826117dc565b8154611a2a9082613445565b6123f05f80516020614e8b8339815191525c6001600160a01b0316613460565b6117da576117da63996caf6560e01b611574565b5f6001600160a01b03821661241a575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561245c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106cd9190614ce7565b6001600160a01b0382165f80516020614e8b8339815191525d807f1e0745a7db1623981f0b2a5d4232364c00787266eb75ad546f190e6cebe9bd955d5050565b60208301515f806001600160a01b03881633036124df575f91506125d1565b60808816156125d1575f61253589338a8a8a8a604051602401612506959493929190614cfe565b60408051601f198184030181529190526020810180516001600160e01b03166315d7892d60e21b179052612979565b9050805160601461255057612550631e048e1d60e01b611574565b604088015162ffffff16628000000361256b57606081015191505b60088916156125cf57604081015192505f6125868460801d90565b905080600f0b5f146125cd575f85126125a3600f83900b87614d57565b9550806125b2575f86126125b6565b5f86135b156125cb576125cb637d05b8eb60e11b611574565b505b505b505b955095509592505050565b5f808080806125eb8988613471565b93509350935093505f831115612619576001600160a01b0386165f9081526001602052604090208054840190555b33887f40e9cecb9f5f1f1c5b9c97dec2917b7ee92e57ba5563708daca94dd84ad7112f6126468760801d90565b61265088600f0b90565b60408087015160a0880151606089015192516126b5959493908b90600f96870b81529490950b60208501526001600160a01b039290921660408401526001600160801b0316606083015260020b608082015262ffffff9190911660a082015260c00190565b60405180910390a35091979650505050505050565b5f806001600160a01b03891633036126e657508490505f6127e1565b5f6126f18460801d90565b90505f6126fe85600f0b90565b905060408b16156127785761276b611e0a338c8c8c8c8c60405160240161272a96959493929190614d7e565b60408051601f198184030181529190526020810180516001600160e01b031663b47b2fb160e01b17905260048e1615156001600160a01b038f1691906130dd565b6127759082614dde565b90505b5f81600f0b5f14158061278e575082600f0b5f14155b156127d957895160208b01515f13901515146127b9576001600160801b038316608083901b176127ca565b6001600160801b038216608084901b175b90506127d6898261311e565b98505b889450925050505b97509795505050505050565b336001600160a01b038416811480159061282c57506001600160a01b038085165f9081526003602090815260408083209385168352929052205460ff16155b156128a0576001600160a01b038085165f9081526005602090815260408083209385168352928152828220868352905220545f19811461289e5761287083826149e4565b6001600160a01b038087165f9081526005602090815260408083209387168352928152828220888352905220555b505b610842848484613b1e565b6001600160a01b038281165f90815290841660205260408120805c91906128d6600f85900b84614d57565b915081815d50935093915050565b5f80516020614eeb8339815191525c600181039050805f80516020614eeb8339815191525d50565b5f80516020614eeb8339815191525c600181019050805f80516020614eeb8339815191525d50565b3d60405183815282600482015260406024820152816044820152815f606483013e602080601f8401040260640191508181fd5b5f5f80516020614e8b8339815191525d565b60605f805f8451602086015f885af19050806129a0576129a063319d54c360e01b85612934565b6040519150601f19603f3d011682016040523d82523d5f602084013e6020825110806129ee575060208301516001600160e01b0319166129e1836020015190565b6001600160e01b03191614155b15612a0357612a03631e048e1d60e01b611574565b5092915050565b5f838302815f1985870982811083820303915050808411612a29575f80fd5b805f03612a3b57508290049050610773565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60d01b62ffffff60d01b1662ffffff60d01b19919091161790565b8060020b8260020b12612ae057612ae063c4433ed560e01b8383613b87565b620d89e719600283900b1215612b0157612b0163d5e2f7ab60e01b8361201a565b620d89e8600282900b13156111b3576111b363035aeeff60e31b8261201a565b600283900b5f908152600485016020526040812080548291906001600160801b0381169060801d612b5282886130b6565b6001600160801b03808216159084168015919091141596509094505f03612b9c57885460a01c60020b60020b8860020b13612b9c576001808a0154908401556002808a0154908401555b5f86612bb157612bac8883614dde565b612bbb565b612bbb8883614e0b565b90508060801b6001600160801b0386161784555050505094509492505050565b600291820b910b80820715612c085760405163d4d8f3e681528260208201528160408201526044601c8201fd5b80820591508160081d5f528260205260405f20600160ff84161b815418815550505050565b600282810b5f81815260048601602052604080822085850b83529082208754929485949293919260a09290921c900b90811215612c83578160010154836001015403945081600201548360020154039350612cd6565b8560020b8160020b12612caf578260010154826001015403945082600201548260020154039350612cd6565b81600101548360010154896001015403039450816002015483600201548960020154030393505b505050935093915050565b83545f9081906001600160801b0316600f86900b8203612d2057806001600160801b03165f03612d1b57612d1b632bbfae4960e21b611574565b612d46565b612d2a81876130b6565b87546001600160801b0319166001600160801b03919091161787555b612d6487600101548603826001600160801b0316600160801b612a0a565b9250612d8487600201548503826001600160801b0316600160801b612a0a565b6001880195909555505060029094015591929050565b60020b5f60ff82901d80830118620d89e8811115612dc357612dc36345c3193d60e11b8461201a565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b186002821615612dff576ffff97272373d413259a46990580e213a0260801c5b6004821615612e1e576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615612e3d576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615612e5c576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615612e7b576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615612e9a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615612eb9576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615612ed9576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615612ef9576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615612f19576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615612f39576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615612f59576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615612f79576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615612f99576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615612fb9576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615612fda576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615612ffa576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615613019576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615613036576b048a170391f7dc42444e8fa20260801c5b5f841315613042575f19045b63ffffffff0160201c9392505050565b5f8082600f0b126130795761307261306d8585856001613ba4565b613c67565b5f0361156c565b61156c61306d8585855f035f613ba4565b5f8082600f0b126130a55761307261306d8585856001613c80565b61156c61306d8585855f035f613c80565b6001600160801b038216600f82900b01608081901c156106cd576393dafdf15f526004601cfd5b5f806130e98585612979565b9050826130f9575f915050610773565b805160401461311257613112631e048e1d60e01b611574565b60400151949350505050565b5f608082811d9084901d03600f83810b9085900b03611ef2611ee983611b32565b5f73fffd8963efd1fc6a506488495d951d51639616826401000276a21983016001600160a01b0316111561317e5761317e6318521d4960e21b8361210c565b640100000000600160c01b03602083901b166001600160801b03811160071b81811c6001600160401b03811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061321157607f810383901c915061321b565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461341b57886001600160a01b031661340082612d9a565b6001600160a01b03161115613415578161341d565b8061341d565b815b9998505050505050505050565b60a01b62ffffff60a01b1662ffffff60a01b19919091161790565b60b81b62ffffff60b81b1662ffffff60b81b19919091161790565b5f6001600160a01b038216156106cd565b6040805160c0810182525f80825260208201819052918101829052606081018290526080810182905260a08101829052819081908554602086015160038801546001600160801b03165f826134ce57610fff60c485901c166134d8565b610fff60b885901c165b60408a81015187525f60208801526001600160a01b0386169087015260a085901c60020b606087015261ffff1690508261351657896002015461351c565b89600101545b6080868101919091526001600160801b03831660a08701528901515f9062400000166135515760d085901c62ffffff16613563565b6135638a6080015162ffffff16613ccc565b9050811561359157620f424062ffffff821661ffff8416818102838106151593900492909201910103613593565b805b60408b01519097505f13905062ffffff8716620f42401480156135b4575080155b156135c9576135c9634b10312360e11b611574565b89604001515f036135e4575f80985098505050505050613b15565b83156136625760608a01516001600160a01b03868116911610613623576136236001600160a01b0386165b60608c0151637c9c6e8f60e01b9190613cdb565b6401000276a36001600160a01b03168a606001516001600160a01b0316101561365d5760608a015161365d90639e4d7cc760e01b9061210c565b6136d3565b60608a01516001600160a01b0386811691161161368b5761368b6001600160a01b03861661360f565b73fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03168a606001516001600160a01b0316106136d35760608a01516136d390639e4d7cc760e01b9061210c565b6040805160e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525b8651158061373357508a606001516001600160a01b031687604001516001600160a01b0316145b613a1e5760408701516001600160a01b0316815260608701518b5161375d9160058f019188613d04565b1515604083015260020b60208201819052620d89e7191261378357620d89e71960208201525b620d89e860020b816020015160020b126137a157620d89e860208201525b6137ae8160200151612d9a565b6001600160a01b03908116606083810182905260408a0151908e01516137ef939192911680821891811160ff8a1618919091021860a08a01518a518c613ded565b60c085015260a084015260808301526001600160a01b03166040880152816138535761381e8160a00151613c67565b875103875260c0810151608082015161383a9161306d916149f7565b8760200181815161384b9190614e38565b90525061388e565b6138668160c00151826080015101613c67565b875101875260a081015161387990613c67565b8760200181815161388a9190614d57565b9052505b82156138ca575f620f4240848360c0015184608001510102816138b3576138b3614e57565b60c084018051929091049182900390529990990198505b60a08701516001600160801b031615613909576138fd8160c00151600160801b8960a001516001600160801b0316612a0a565b60808801805190910190525b80606001516001600160a01b031687604001516001600160a01b0316036139e3578060400151156139cb575f808661394a578d600101548960800151613955565b88608001518e600201545b915091505f6139a08f85602001518585600292830b5f90815260049094016020526040909320600181018054909203909155908101805490920390915554600160801b9004600f0b90565b905087156139ab575f035b6139b98a60a00151826130b6565b6001600160801b031660a08b01525050505b602081015160ff8616900360020b606088015261370c565b805f01516001600160a01b031687604001516001600160a01b031614613a1957613a10876040015161313f565b60020b60608801525b61370c565b613a568760400151613a3d89606001518961342a90919063ffffffff16565b6001600160a01b0319166001600160a01b039091161790565b8c5560a08701516001600160801b03858116911614613a965760a087015160038d0180546001600160801b0319166001600160801b039092169190911790555b84613aaa57608087015160028d0155613ab5565b608087015160018d01555b81151585151514613ae957613ae2613ad08860200151611b32565b611d35895f01518e6040015103611b32565b9950613b0e565b613b0b613afe885f01518d6040015103611b32565b611d358960200151611b32565b99505b5050505050505b92959194509250565b6001600160a01b0383165f90815260046020908152604080832085845290915281208054839290613b509084906149e4565b9091555050604080513381526020810183905283915f916001600160a01b038716915f80516020614eab833981519152910161178d565b6040518381528260020b60048201528160020b6024820152604481fd5b5f836001600160a01b0316856001600160a01b03161115613bc3579293925b6001600160a01b038516613bdd5762bfc9215f526004601cfd5b600160601b600160e01b03606084901b166001600160a01b038686031683613c3057866001600160a01b0316613c1d8383896001600160a01b0316612a0a565b81613c2a57613c2a614e57565b04613c5c565b613c5c613c478383896001600160a01b0316613f73565b886001600160a01b0316808204910615150190565b979650505050505050565b805f811215610a0257610a026393dafdf160e01b611574565b5f6001600160a01b038481169086160360ff81901d90810118600160601b6001600160801b038516613cb3818484612a0a565b9350845f83858409111684019350505050949350505050565b62bfffff8116610a02816119ef565b6040518381526001600160a01b03831660048201526001600160a01b0382166024820152604481fd5b5f80600284810b9086900b8181078313919005038315613d7f57600281900b60081d600181810b5f90815260208a905260409020545f1960ff85168381019390931b01908116801515955085613d6157888360ff16860302613d74565b88613d6b82613fa3565b840360ff168603025b965050505050613de3565b6001908101600281900b60081d80830b5f90815260208a905260409020545f1960ff841694851b011990811680151595509293919285613dc957888360ff0360ff16860102613ddc565b8883613dd483614033565b0360ff168601025b9650505050505b5094509492505050565b5f80808062ffffff85166001600160a01b03808a16908b1610158288128015613ee6575f613e268a5f0385620f424003620f4240612a0a565b905082613e3f57613e3a8d8d8d6001613c80565b613e4c565b613e4c8c8e8d6001613ba4565b9650868110613e80578b9750620f42408414613e7757613e72878586620f424003613f73565b613e79565b865b9450613ebc565b613e8c8d8c83866140ce565b975082613ea557613ea08d898d6001613c80565b613eb2565b613eb2888e8d6001613ba4565b9650868a5f030394505b82613ed257613ecd8d898d5f613ba4565b613ede565b613ede888e8d5f613c80565b955050613f64565b81613efc57613ef78c8c8c5f613ba4565b613f08565b613f088b8d8c5f613c80565b9450848910613f19578a9650613f2b565b889450613f288c8b878561411c565b96505b81613f4257613f3d8c888c6001613c80565b613f4f565b613f4f878d8c6001613ba4565b9550613f61868485620f424003613f73565b93505b50505095509550955095915050565b5f613f7f848484612a0a565b90508180613f8f57613f8f614e57565b838509156107735760010180610773575f80fd5b5f808211613faf575f80fd5b507f0706060506020504060203020504030106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be831560081b6001600160801b03851160071b1784811c6001600160401b031060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b5f80821161403f575f80fd5b507e1f0d1e100c1d070f090b19131c1706010e11080a1a141802121b150316040581196001019091166101e07f804040554300526644320000502061067405302602000010750620017611707760fc7fb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff840260f81c161b60f71c1690811c63d76453e004601f169190911a1790565b5f6001600160801b038416156001600160a01b0386161517156140f857634f2461b85f526004601cfd5b8161410f5761410a858585600161415f565b611ef2565b611ef2858585600161424a565b5f6001600160801b038416156001600160a01b03861615171561414657634f2461b85f526004601cfd5b816141575761410a8585855f61424a565b611ef28585855f5b5f81156141cf575f6001600160a01b038411156141935761418e84600160601b876001600160801b0316612a0a565b6141aa565b6141aa6001600160801b038616606086901b614e6b565b90506141c76141c2826001600160a01b0389166149f7565b61432c565b91505061156c565b5f6001600160a01b038411156141fc576141f784600160601b876001600160801b0316613f73565b614219565b614219606085901b6001600160801b038716808204910615150190565b9050806001600160a01b0387161161423857634323a5555f526004601cfd5b6001600160a01b03861603905061156c565b5f825f0361425957508361156c565b600160601b600160e01b03606085901b1682156142eb576001600160a01b0386168481029085828161428d5761428d614e57565b04036142bd578181018281106142bb576142b183896001600160a01b031683613f73565b935050505061156c565b505b506141c781856142d66001600160a01b038a1683614e6b565b6142e091906149f7565b808204910615150190565b6001600160a01b0386168481029085820414818311166143125763f5c787f15f526004601cfd5b8082036142b16141c2846001600160a01b038b1684613f73565b806001600160a01b0381168114610a0257610a026393dafdf160e01b611574565b6001600160a01b03811681146117fd575f80fd5b5f8060408385031215614372575f80fd5b823561437d8161434d565b946020939093013593505050565b5f6020828403121561439b575f80fd5b81356001600160e01b031981168114610773575f80fd5b5f805f606084860312156143c4575f80fd5b83356143cf8161434d565b95602085013595506040909401359392505050565b5f805f606084860312156143f6575f80fd5b83356144018161434d565b925060208401356144118161434d565b929592945050506040919091013590565b5f60208284031215614432575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561446f5761446f614439565b60405290565b604051601f8201601f191681016001600160401b038111828210171561449d5761449d614439565b604052919050565b803562ffffff81168114610a02575f80fd5b8035600281900b8114610a02575f80fd5b5f60a082840312156144d8575f80fd5b60405160a081016001600160401b03811182821017156144fa576144fa614439565b604052905080823561450b8161434d565b8152602083013561451b8161434d565b602082015261452c604084016144a5565b604082015261453d606084016144b7565b606082015260808301356145508161434d565b6080919091015292915050565b5f8083601f84011261456d575f80fd5b5081356001600160401b03811115614583575f80fd5b60208301915083602082850101111561459a575f80fd5b9250929050565b5f805f805f61010086880312156145b6575f80fd5b6145c087876144c8565b945060a0860135935060c0860135925060e08601356001600160401b038111156145e8575f80fd5b6145f48882890161455d565b969995985093965092949392505050565b5f60208284031215614615575f80fd5b81356107738161434d565b5f8060408385031215614631575f80fd5b50508035926020909101359150565b602080825282518282018190525f918401906040840190835b81811015614677578351835260209384019390920191600101614659565b509095945050505050565b5f8060208385031215614693575f80fd5b82356001600160401b038111156146a8575f80fd5b6146b48582860161455d565b90969095509350505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f8060c08385031215614706575f80fd5b61471084846144c8565b915061471e60a084016144a5565b90509250929050565b80358015158114610a02575f80fd5b5f8060408385031215614747575f80fd5b82356147528161434d565b915061471e60208401614727565b5f805f80848603610140811215614775575f80fd5b61477f87876144c8565b94506080609f1982011215614792575f80fd5b5061479b61444d565b6147a760a087016144b7565b81526147b560c087016144b7565b602082015260e08601356040820152610100860135606082015292506101208501356001600160401b038111156147ea575f80fd5b6147f68782880161455d565b95989497509550505050565b5f805f8060e08587031215614815575f80fd5b61481f86866144c8565b935060a085013561482f8161434d565b925060c08501356001600160401b038111156147ea575f80fd5b5f806020838503121561485a575f80fd5b82356001600160401b0381111561486f575f80fd5b8301601f8101851361487f575f80fd5b80356001600160401b03811115614894575f80fd5b8560208260051b84010111156148a8575f80fd5b6020919091019590945092505050565b5f80604083850312156148c9575f80fd5b82356148d48161434d565b915060208301356148e48161434d565b809150509250929050565b5f805f80848603610120811215614904575f80fd5b61490e87876144c8565b94506060609f1982011215614921575f80fd5b50604051606081016001600160401b038111828210171561494457614944614439565b60405261495360a08701614727565b815260c0860135602082015260e086013561496d8161434d565b604082015292506101008501356001600160401b038111156147ea575f80fd5b5f805f80608085870312156149a0575f80fd5b84356149ab8161434d565b935060208501356149bb8161434d565b93969395505050506040820135916060013590565b634e487b7160e01b5f52601160045260245ffd5b818103818111156106cd576106cd6149d0565b808201808211156106cd576106cd6149d0565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b602081525f61156c602083018486614a0a565b5f60208284031215614a55575f80fd5b81516001600160401b03811115614a6a575f80fd5b8201601f81018413614a7a575f80fd5b80516001600160401b03811115614a9357614a93614439565b614aa6601f8201601f1916602001614475565b818152856020838501011115614aba575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b5f81600f0b60016001607f1b03198103614af357614af36149d0565b5f0392915050565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff169084015260608083015160020b9084015260809182015116910152565b6001600160a01b0387168152614b576020820187614afb565b8460c08201528360e08201526101206101008201525f614b7c61012083018486614a0a565b98975050505050505050565b6001600160a01b0386168152614ba16020820186614afb565b8351600290810b60c08301526020850151900b60e0820152604084015161010082015260608401516101208201526101606101408201525f613c5c61016083018486614a0a565b6001600160a01b0387168152614c016020820187614afb565b8451600290810b60c08301526020860151900b60e082015260408501516101008201526060850151610120820152836101408201526101806101608201525f614b7c61018083018486614a0a565b6001600160a01b0386168152614c686020820186614afb565b6001600160a01b03841660c082015261010060e082018190525f90613c5c9083018486614a0a565b60a081016106cd8284614afb565b6001600160a01b0387168152614cb76020820187614afb565b60018060a01b03851660c08201528360020b60e08201526101206101008201525f614b7c61012083018486614a0a565b5f60208284031215614cf7575f80fd5b5051919050565b6001600160a01b0386168152614d176020820186614afb565b8351151560c0820152602084015160e082015260408401516001600160a01b03166101008201526101406101208201525f613c5c61014083018486614a0a565b8082018281125f831280158216821582161715614d7657614d766149d0565b505092915050565b6001600160a01b0387168152614d976020820187614afb565b8451151560c0820152602085015160e082015260408501516001600160a01b0316610100820152836101208201526101606101408201525f614b7c61016083018486614a0a565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106cd576106cd6149d0565b600f82810b9082900b0360016001607f1b0319811260016001607f1b03821317156106cd576106cd6149d0565b8181035f831280158383131683831282161715612a0357612a036149d0565b634e487b7160e01b5f52601260045260245ffd5b5f82614e8557634e487b7160e01b5f52601260045260245ffd5b50049056fe27e098c505d44ec3574004bca052aabf76bd35004c182099d8c575fb238593b91b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac728859c090fc4683624cfc3884e9d8de5eca132f2d0ec062aff75d43c0465d5ceeab237d4b3164c6e45b97e7d87b7125a44c5828d005af88f9d751cfd78729c5d99a0ba2646970667358221220b028c1e0e32c7daecf984a373142fe8aab46aae56a8819ec404e0d16141d666b64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4\x80\x15`\x0EW_\x80\xFD[P`@QaO\xF58\x03\x80aO\xF5\x839\x81\x01`@\x81\x90R`+\x91`wV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x90\x81\x17\x82U`@Q\x83\x92\x82\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x82\x90\xA3P`\x80RP0`\xA0R`\x8DV[_` \x82\x84\x03\x12\x15`\x86W_\x80\xFD[PQ\x91\x90PV[`\x80Q`\xA0QaO@a\0\xB5_9_a\x17\xA5\x01R_\x81\x81a!\xCE\x01Ra\"\x0C\x01RaO@_\xF3\xFE`\x80`@R`\x046\x10a\x01\xE5W_5`\xE0\x1C\x80cZk\xCF\xDA\x11a\x01\x08W\x80c\xA5\x84\x11\x94\x11a\0\x9DW\x80c\xF15\xBA\xAA\x11a\0mW\x80c\xF15\xBA\xAA\x14a\x06\x02W\x80c\xF2\xFD\xE3\x8B\x14a\x06!W\x80c\xF3\xCD\x91L\x14a\x06@W\x80c\xF5)\x8A\xCA\x14a\x06_W\x80c\xFE\x99\x04\x9A\x14a\x06~W_\x80\xFD[\x80c\xA5\x84\x11\x94\x14a\x05lW\x80c\xB66<\xF2\x14a\x05\x8BW\x80c\xDB\xD05\xFF\x14a\x05\xC4W\x80c\xF0-\xE3\xB2\x14a\x05\xE3W_\x80\xFD[\x80c\x81a\xB8t\x11a\0\xD8W\x80c\x81a\xB8t\x14a\x04\xCDW\x80c\x8D\xA5\xCB[\x14a\x04\xECW\x80c\x97\xE8\xCDN\x14a\x05\"W\x80c\x9B\xF6d_\x14a\x05MW_\x80\xFD[\x80cZk\xCF\xDA\x14a\x04)W\x80ci\\[\xF5\x14a\x04]W\x80c~\x87\xCE}\x14a\x04\x8FW\x80c\x80\xF0\xB4L\x14a\x04\xAEW_\x80\xFD[\x80c-w\x13\x89\x11a\x01~W\x80cH\xC8\x94\x91\x11a\x01NW\x80cH\xC8\x94\x91\x14a\x03\x83W\x80cRu\x96Q\x14a\x03\xAFW\x80cU\x8Ar\x97\x14a\x03\xCEW\x80cY\x8A\xF9\xE7\x14a\x03\xEDW_\x80\xFD[\x80c-w\x13\x89\x14a\x03\x06W\x80c5\xFDc\x1A\x14a\x03%W\x80c=\xD4Z\xDB\x14a\x03QW\x80cBj\x84\x93\x14a\x03dW_\x80\xFD[\x80c\x11\xDA`\xB4\x11a\x01\xB9W\x80c\x11\xDA`\xB4\x14a\x02\xA1W\x80c\x15n)\xF6\x14a\x02\xA9W\x80c\x1E.\xAE\xAF\x14a\x02\xC8W\x80c#Bf\xD7\x14a\x02\xE7W_\x80\xFD[\x80b\xFD\xD5\x8E\x14a\x01\xE9W\x80c\x01\xFF\xC9\xA7\x14a\x022W\x80c\t[\xCD\xB6\x14a\x02aW\x80c\x0B\r\x9C\t\x14a\x02\x80W[_\x80\xFD[4\x80\x15a\x01\xF4W_\x80\xFD[Pa\x02\x1Fa\x02\x036`\x04aCaV[`\x04` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02=W_\x80\xFD[Pa\x02Qa\x02L6`\x04aC\x8BV[a\x06\x9DV[`@Q\x90\x15\x15\x81R` \x01a\x02)V[4\x80\x15a\x02lW_\x80\xFD[Pa\x02Qa\x02{6`\x04aC\xB2V[a\x06\xD3V[4\x80\x15a\x02\x8BW_\x80\xFD[Pa\x02\x9Fa\x02\x9A6`\x04aC\xE4V[a\x07zV[\0[a\x02\x1Fa\x07\xCBV[4\x80\x15a\x02\xB4W_\x80\xFD[Pa\x02\x9Fa\x02\xC36`\x04aC\xB2V[a\x07\xFDV[4\x80\x15a\x02\xD3W_\x80\xFD[Pa\x02\x1Fa\x02\xE26`\x04aD\"V[a\x08HV[4\x80\x15a\x02\xF2W_\x80\xFD[Pa\x02\x1Fa\x03\x016`\x04aE\xA1V[a\x08RV[4\x80\x15a\x03\x11W_\x80\xFD[Pa\x02\x9Fa\x03 6`\x04aF\x05V[a\t\x02V[4\x80\x15a\x030W_\x80\xFD[Pa\x03Da\x03?6`\x04aF V[a\t\x98V[`@Qa\x02)\x91\x90aF@V[a\x02\x1Fa\x03_6`\x04aF\x05V[a\t\xD5V[4\x80\x15a\x03oW_\x80\xFD[Pa\x02Qa\x03~6`\x04aC\xB2V[a\n\x07V[4\x80\x15a\x03\x8EW_\x80\xFD[Pa\x03\xA2a\x03\x9D6`\x04aF\x82V[a\nkV[`@Qa\x02)\x91\x90aF\xC0V[4\x80\x15a\x03\xBAW_\x80\xFD[Pa\x02\x9Fa\x03\xC96`\x04aF\xF5V[a\x0B.V[4\x80\x15a\x03\xD9W_\x80\xFD[Pa\x02Qa\x03\xE86`\x04aG6V[a\x0B\x9DV[4\x80\x15a\x03\xF8W_\x80\xFD[Pa\x02\x1Fa\x04\x076`\x04aC\xE4V[`\x05` \x90\x81R_\x93\x84R`@\x80\x85 \x82R\x92\x84R\x82\x84 \x90R\x82R\x90 T\x81V[4\x80\x15a\x044W_\x80\xFD[Pa\x04Ha\x04C6`\x04aG`V[a\x0C\x0CV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x02)V[4\x80\x15a\x04hW_\x80\xFD[Pa\x04|a\x04w6`\x04aH\x02V[a\r\x9FV[`@Q`\x02\x91\x90\x91\x0B\x81R` \x01a\x02)V[4\x80\x15a\x04\x9AW_\x80\xFD[Pa\x02\x9Fa\x04\xA96`\x04aF\xF5V[a\x0F\x8EV[4\x80\x15a\x04\xB9W_\x80\xFD[Pa\x02\x9Fa\x04\xC86`\x04aCaV[a\x10@V[4\x80\x15a\x04\xD8W_\x80\xFD[Pa\x02\x1Fa\x04\xE76`\x04aC\xE4V[a\x10\xB3V[4\x80\x15a\x04\xF7W_\x80\xFD[P_Ta\x05\n\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x02)V[4\x80\x15a\x05-W_\x80\xFD[Pa\x02\x1Fa\x05<6`\x04aF\x05V[`\x01` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x05XW_\x80\xFD[Pa\x03Da\x05g6`\x04aHIV[a\x11BV[4\x80\x15a\x05wW_\x80\xFD[Pa\x02\x9Fa\x05\x866`\x04aF\x05V[a\x11{V[4\x80\x15a\x05\x96W_\x80\xFD[Pa\x02Qa\x05\xA56`\x04aH\xB8V[`\x03` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T`\xFF\x16\x81V[4\x80\x15a\x05\xCFW_\x80\xFD[Pa\x03Da\x05\xDE6`\x04aHIV[a\x11\xB7V[4\x80\x15a\x05\xEEW_\x80\xFD[P`\x02Ta\x05\n\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x06\rW_\x80\xFD[Pa\x02\x1Fa\x06\x1C6`\x04aD\"V[a\x11\xEEV[4\x80\x15a\x06,W_\x80\xFD[Pa\x02\x9Fa\x06;6`\x04aF\x05V[a\x11\xF8V[4\x80\x15a\x06KW_\x80\xFD[Pa\x02\x1Fa\x06Z6`\x04aH\xEFV[a\x12\x8AV[4\x80\x15a\x06jW_\x80\xFD[Pa\x02\x9Fa\x06y6`\x04aC\xB2V[a\x13\xD0V[4\x80\x15a\x06\x89W_\x80\xFD[Pa\x02Qa\x06\x986`\x04aI\x8DV[a\x14\x15V[_c\x01\xFF\xC9\xA7`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x14\x80a\x06\xCDWPc\x0Fc/\xB3`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x14[\x92\x91PPV[3_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 \x80T\x83\x91\x90\x83\x90a\x06\xFE\x90\x84\x90aI\xE4V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x81 \x80T\x84\x92\x90a\x075\x90\x84\x90aI\xF7V[\x90\x91UPP`@\x80Q3\x80\x82R` \x82\x01\x85\x90R\x85\x92`\x01`\x01`\xA0\x1B\x03\x88\x16\x92_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01[`@Q\x80\x91\x03\x90\xA4P`\x01[\x93\x92PPPV[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x07\x9DWa\x07\x9DcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x07\xB2\x83a\x07\xAA\x83a\x15|V[_\x033a\x15\x9CV[a\x07\xC6`\x01`\x01`\xA0\x1B\x03\x84\x16\x83\x83a\x15\xEFV[PPPV[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\x07\xEFWa\x07\xEFcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x07\xF83a\x16\x85V[\x90P\x90V[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x08 Wa\x08 cT\xE3\xCA\r`\xE0\x1Ba\x15tV[\x81a\x08.\x81a\x07\xAA\x84a\x15|V[a\x08B\x84`\x01`\x01`\xA0\x1B\x03\x83\x16\x84a\x17(V[PPPPV[_\x81T_R` _\xF3[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\x08vWa\x08vcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x08~a\x17\x9AV[_a\x08\x9Da\x08\x8D\x88`\xA0\x90 \x90V[_\x90\x81R`\x06` R`@\x90 \x90V[\x90Pa\x08\xA8\x81a\x17\xDCV[`\x80\x87\x01Qa\x08\xC4\x90`\x01`\x01`\xA0\x1B\x03\x16\x88\x88\x88\x88\x88a\x18\0V[a\x08\xCF\x81\x87\x87a\x18}V[\x91Pa\x08\xDC\x87\x833a\x190V[`\x80\x87\x01Qa\x08\xF8\x90`\x01`\x01`\xA0\x1B\x03\x16\x88\x88\x88\x88\x88a\x19XV[P\x95\x94PPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\tOW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15S\x90UU\x12\x13\xD4\x92V\x91Q`\xA2\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x7F\xB4\xBD\x8E\xF5=\xF6\x90\xB9\x94=3\x18\x99`\x06\xDB\xB8*%\xF5G\x19\xD8\xC8\x03[Qj*[\x8A\xCC\x90_\x90\xA2PV[```@Q\x80\x83`\x05\x1B` \x83R\x84` \x84\x01R`@\x83\x01\x92P\x80\x83\x01\x90P[\x85T\x83R` \x83\x01\x92P`\x01\x86\x01\x95P\x80\x83\x10a\t\xB8W\x81\x81\x03\x82\xF3[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\t\xF9Wa\t\xF9cT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x06\xCD\x82a\x16\x85V[\x91\x90PV[3_\x81\x81R`\x05` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x88\x16\x80\x85R\x90\x83R\x81\x84 \x87\x85R\x90\x92R\x80\x83 \x85\x90UQ\x91\x92\x85\x92\x7F\xB3\xFDPq\x83X\x87Vz\x06q\x15\x11!\x89M\xDC\xCC(B\xF1\xD1\x0B\xED\xAD\x13\xE0\xD1|\xAC\xE9\xA7\x90a\x07g\x90\x87\x81R` \x01\x90V[``_\x80Q` aN\xCB\x839\x81Q\x91R\\\x15a\n\x91Wa\n\x91c(Hkc`\xE1\x1Ba\x15tV[a\n\x99a\x19\xCAV[`@QcH\xEE\xB9\xA3`\xE1\x1B\x81R3\x90c\x91\xDDsF\x90a\n\xBE\x90\x86\x90\x86\x90`\x04\x01aJ2V[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n\xD9W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0B\0\x91\x90\x81\x01\x90aJEV[\x90P_\x80Q` aN\xEB\x839\x81Q\x91R\\\x15a\x0B&Wa\x0B&cR\x12\xCB\xA1`\xE0\x1Ba\x15tV[a\x06\xCDa\x19\xDDV[`@\x82\x01Qb\xFF\xFF\xFF\x16b\x80\0\0\x14\x15\x80a\x0B_WP\x81`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x0BtWa\x0Btc0\xD2\x16A`\xE0\x1Ba\x15tV[a\x0B\x82\x81b\xFF\xFF\xFF\x16a\x19\xEFV[`\xA0\x82 _\x81\x81R`\x06` R`@\x90 a\x07\xC6\x90\x83a\x1A\x15V[3_\x81\x81R`\x03` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x87\x16\x80\x85R\x90\x83R\x81\x84 \x80T`\xFF\x19\x16\x87\x15\x15\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x92\x93\x91\x7F\xCE\xB5v\xD9\xF1^N \x0F\xDBP\x96\xD6M]\xFDf~\x16\xDE\xF2\x0C\x1E\xEF\xD1BV\xD8\xE3\xFA\xA2g\x91\x01`@Q\x80\x91\x03\x90\xA3P`\x01\x92\x91PPV[_\x80_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x0C1Wa\x0C1cT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x0C9a\x17\x9AV[`\xA0\x86 _\x81\x81R`\x06` R`@\x90 a\x0CS\x81a\x17\xDCV[`\x80\x88\x01Qa\x0Cn\x90`\x01`\x01`\xA0\x1B\x03\x16\x89\x89\x89\x89a\x1A0V[_a\x0C\xD5`@Q\x80`\xC0\x01`@R\x803`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A_\x01Q`\x02\x0B\x81R` \x01\x8A` \x01Q`\x02\x0B\x81R` \x01a\x0C\xB2\x8B`@\x01Qa\x1B2V[`\x0F\x0B\x81R``\x80\x8D\x01Q`\x02\x0B` \x83\x01R\x8B\x01Q`@\x90\x91\x01R\x83\x90a\x1BNV[\x94P\x90Pa\x0C\xE3\x81\x85a\x1E\xC8V[\x94P3`\x01`\x01`\xA0\x1B\x03\x16\x83\x7FT\x1C\x04\x1C,\xCEH\xE6\x14\xB3\xDE\x04<\x92\x80\xF0kad\xC0\xA1t\x16I\xE2\xDE<=7_yt\x8A_\x01Q\x8B` \x01Q\x8C`@\x01Q`@Qa\rG\x93\x92\x91\x90`\x02\x93\x84\x0B\x81R\x91\x90\x92\x0B` \x82\x01R`@\x81\x01\x91\x90\x91R``\x01\x90V[`@Q\x80\x91\x03\x90\xA3`\x80\x89\x01Q_\x90a\rm\x90`\x01`\x01`\xA0\x1B\x03\x16\x8B\x8B\x89\x8C\x8Ca\x1E\xFBV[\x90\x96P\x90P\x80\x15a\r\x87Wa\r\x87\x8A\x82\x8C`\x80\x01Qa\x190V[a\r\x92\x8A\x873a\x190V[PPPP\x94P\x94\x92PPPV[_a\r\xA8a\x17\x9AV[``\x85\x01Qa\x7F\xFF`\x02\x91\x90\x91\x0B\x13\x15a\r\xD3W``\x85\x01Qa\r\xD3\x90c\x16\xE0\x04\x9F`\xE3\x1B\x90a \x1AV[`\x01`\x02\x0B\x85``\x01Q`\x02\x0B\x12\x15a\r\xFDW``\x85\x01Qa\r\xFD\x90c\x1D= \xB1`\xE3\x1B\x90a \x1AV[\x84Q` \x86\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x10a\x0E/W\x84Q` \x86\x01Qa\x0E/\x91c\x06\xE6\xC9\x83`\xE4\x1B\x91a )V[a\x0ES\x85`@\x01Q\x86`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x16a K\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x0EnW`\x80\x85\x01Qa\x0En\x90c\x072\xD7\xB5`\xE5\x1B\x90a!\x0CV[_a\x0E\x81\x86`@\x01Qb\xFF\xFF\xFF\x16a!!V[`\x80\x87\x01Q\x90\x91Pa\x0E\x9F\x90`\x01`\x01`\xA0\x1B\x03\x16\x87\x87\x87\x87a!FV[`\xA0\x86 _a\x0E\xAD\x88a!\xB7V[_\x84\x81R`\x06` R`@\x90 \x90\x92Pa\x0E\xCA\x91P\x88\x83\x86a\"\xE9V[`\x80\x89\x01Q\x90\x94Pa\x0E\xE9\x90`\x01`\x01`\xA0\x1B\x03\x16\x89\x89\x87\x8A\x8Aa#HV[\x87` \x01Q`\x01`\x01`\xA0\x1B\x03\x16\x88_\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x83\x7F\xDDFngN\xA5W\xF5b\x95\xE2\xD0!\x8A\x12^\xA4\xB4\xF0\xF6\xF30{\x95\xF8^a\x10\x83\x8Dd8\x8B`@\x01Q\x8C``\x01Q\x8D`\x80\x01Q\x8D\x8B`@Qa\x0F{\x95\x94\x93\x92\x91\x90b\xFF\xFF\xFF\x95\x90\x95\x16\x85R`\x02\x93\x84\x0B` \x86\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`@\x86\x01R\x91\x16``\x84\x01R\x90\x0B`\x80\x82\x01R`\xA0\x01\x90V[`@Q\x80\x91\x03\x90\xA4PPP\x94\x93PPPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0F\xB0Wa\x0F\xB0cH\xF5\xC3\xED`\xE0\x1Ba\x15tV[a\x03\xE9a\x0F\xFF\x82\x16\x10b>\x90\0b\xFF\xF0\0\x83\x16\x10\x16a\x0F\xDFWa\x0F\xDFc\xA7\xAB\xE2\xF7`\xE0\x1Bb\xFF\xFF\xFF\x83\x16a!\x0CV[`\xA0\x82 a\x10\x01\x82a\x0F\xFB\x83_\x90\x81R`\x06` R`@\x90 \x90V[\x90a#\xBBV[`@Qb\xFF\xFF\xFF\x83\x16\x81R\x81\x90\x7F\xE9\xC4%\x93\xE7\x1F\x84@;\x845,\xD1h\xD6\x93\xE2\xC9\xFC\xD1\xFD\xBC\xC3\xFE\xB2\x1D\x92\xB4>f\x96\xF9\x90` \x01`@Q\x80\x91\x03\x90\xA2PPPV[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x10cWa\x10ccT\xE3\xCA\r`\xE0\x1Ba\x15tV[3_\x90\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16` R`@\x81 \\\x90a\x10\x84\x83a\x15|V[\x90P\x81\x81`\x0F\x0B\x14a\x10\xA0Wa\x10\xA0c\xBD\xA7:\xBF`\xE0\x1Ba\x15tV[a\x08B\x84a\x10\xAD\x83aJ\xD7V[3a\x15\x9CV[`\x02T_\x90`\x01`\x01`\xA0\x1B\x03\x163\x14a\x10\xD7Wa\x10\xD7cH\xF5\xC3\xED`\xE0\x1Ba\x15tV[\x81\x15a\x10\xE3W\x81a\x10\xFCV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x01` R`@\x90 T[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x01` R`@\x81 \x80T\x92\x93P\x83\x92\x90\x91\x90a\x11(\x90\x84\x90aI\xE4V[\x90\x91UPa\x07s\x90P`\x01`\x01`\xA0\x1B\x03\x84\x16\x85\x83a\x15\xEFV[```@Q\x80` \x82R\x83` \x83\x01R`@\x82\x01\x91P\x83`\x05\x1B\x82\x01\x85[\x805\\\x84R` \x93\x84\x01\x93\x01\x81\x84\x10a\x11`W[P\x81\x81\x03\x82\xF3[a\x11\x83a#\xD0V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x11\x94WPV[_a\x11\xA7\x82`\x01`\x01`\xA0\x1B\x03\x16a$\x04V[\x90Pa\x11\xB3\x82\x82a$\x80V[PPV[```@Q\x80` \x82R\x83` \x83\x01R`@\x82\x01\x91P\x83`\x05\x1B\x82\x01\x85[\x805T\x84R` \x93\x84\x01\x93\x01\x81\x84\x10\x15a\x11tWa\x11\xD5V[_\x81\\_R` _\xF3[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x12@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15S\x90UU\x12\x13\xD4\x92V\x91Q`\xA2\x1B`D\x82\x01R`d\x01a\tFV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\x12\xAEWa\x12\xAEcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x12\xB6a\x17\x9AV[\x83` \x01Q_\x03a\x12\xD1Wa\x12\xD1c\xBE\x8B\x85\x07`\xE0\x1Ba\x15tV[`\xA0\x85 _\x81\x81R`\x06` R`@\x90 a\x12\xEB\x81a\x17\xDCV[`\x80\x87\x01Q_\x90\x81\x90\x81\x90a\x13\x0C\x90`\x01`\x01`\xA0\x1B\x03\x16\x8B\x8B\x8B\x8Ba$\xC0V[\x80\x93P\x81\x95P\x82\x94PPPPa\x13{\x84\x86`@Q\x80`\xA0\x01`@R\x80\x8E``\x01Q`\x02\x0B\x81R` \x01\x8D_\x01Q\x15\x15\x81R` \x01\x86\x81R` \x01\x8D`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85b\xFF\xFF\xFF\x16\x81RP\x8C_\x01Qa\x13tW\x8D` \x01Qa%\xDCV[\x8DQa%\xDCV[`\x80\x8B\x01Q\x90\x96P_\x92Pa\x13\x9F\x91P`\x01`\x01`\xA0\x1B\x03\x16\x8A\x8A\x88\x8B\x8B\x88a&\xCAV[\x90\x95P\x90P\x80\x15a\x13\xB9Wa\x13\xB9\x89\x82\x8B`\x80\x01Qa\x190V[a\x13\xC4\x89\x863a\x190V[PPPP\x94\x93PPPPV[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x13\xF3Wa\x13\xF3cT\xE3\xCA\r`\xE0\x1Ba\x15tV[\x81a\x14\x01\x81a\x10\xAD\x84a\x15|V[a\x08B\x84`\x01`\x01`\xA0\x1B\x03\x83\x16\x84a'\xEDV[_3`\x01`\x01`\xA0\x1B\x03\x86\x16\x14\x80\x15\x90a\x14RWP`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90 T`\xFF\x16\x15[\x15a\x14\xC2W`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 3\x84R\x82R\x80\x83 \x86\x84R\x90\x91R\x90 T_\x19\x81\x14a\x14\xC0Wa\x14\x94\x83\x82aI\xE4V[`\x01`\x01`\xA0\x1B\x03\x87\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 3\x84R\x82R\x80\x83 \x88\x84R\x90\x91R\x90 U[P[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x81 \x80T\x84\x92\x90a\x14\xF4\x90\x84\x90aI\xE4V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x81 \x80T\x84\x92\x90a\x15+\x90\x84\x90aI\xF7V[\x90\x91UPP`@\x80Q3\x81R` \x81\x01\x84\x90R\x84\x91`\x01`\x01`\xA0\x1B\x03\x80\x88\x16\x92\x90\x89\x16\x91_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01`@Q\x80\x91\x03\x90\xA4P`\x01[\x94\x93PPPPV[\x80_R`\x04_\xFD[_`\x01`\x7F\x1B\x82\x10a\x15\x98Wa\x15\x98c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[P\x90V[\x81`\x0F\x0B_\x03a\x15\xABWPPPV[_\x80a\x15\xC1`\x01`\x01`\xA0\x1B\x03\x86\x16\x84\x86a(\xABV[\x91P\x91P\x80_\x03a\x15\xD9Wa\x15\xD4a(\xE4V[a\x15\xE8V[\x81_\x03a\x15\xE8Wa\x15\xE8a)\x0CV[PPPPPV[_`\x01`\x01`\xA0\x1B\x03\x84\x16a\x16#W_\x80_\x80\x85\x87Z\xF1\x90P\x80a\x16\x1EWa\x16\x1Ec\x85I\xDBY`\xE0\x1B\x84a)4V[a\x08BV[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16`\x04\x82\x01R\x82`$\x82\x01R` _`D\x83_\x89Z\xF1=\x15`\x1F=\x11`\x01_Q\x14\x16\x17\x16\x91P_\x81R_` \x82\x01R_`@\x82\x01RP\x80a\x08BWa\x08Bc,K\x17\xE7`\xE2\x1B\x85a)4V[__\x80Q` aN\x8B\x839\x81Q\x91R\\`\x01`\x01`\xA0\x1B\x03\x81\x16a\x16\xABW4\x91Pa\x17\x0FV[4\x15a\x16\xC1Wa\x16\xC1c\x19\xD2E\xCF`\xE0\x1Ba\x15tV[\x7F\x1E\x07E\xA7\xDB\x16#\x98\x1F\x0B*]B26L\0xrf\xEBu\xADTo\x19\x0El\xEB\xE9\xBD\x95\\_a\x16\xF6`\x01`\x01`\xA0\x1B\x03\x84\x16a$\x04V[\x90Pa\x17\x02\x82\x82aI\xE4V[\x93Pa\x17\x0Ca)gV[PP[a\x17\"\x81a\x17\x1C\x84a\x15|V[\x85a\x15\x9CV[P\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 \x80T\x83\x92\x90a\x17Z\x90\x84\x90aI\xF7V[\x90\x91UPP`@\x80Q3\x81R` \x81\x01\x83\x90R\x83\x91`\x01`\x01`\xA0\x1B\x03\x86\x16\x91_\x91_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01[`@Q\x80\x91\x03\x90\xA4PPPV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x17\xDAWa\x17\xDAc\x06\xC4\xA1\xC7`\xE1\x1Ba\x15tV[V[\x80T`\x01`\x01`\xA0\x1B\x03\x16_\x03a\x17\xFDWa\x17\xFDcHj\xA3\x07`\xE0\x1Ba\x15tV[PV[\x853`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x18tW` \x87\x16\x15a\x18tWa\x18r3\x87\x87\x87\x87\x87`@Q`$\x01a\x188\x96\x95\x94\x93\x92\x91\x90aK>V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c[TX}`\xE1\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x89\x16\x90a)yV[P[PPPPPPPV[`\x03\x83\x01T_\x90`\x01`\x01`\x80\x1B\x03\x16\x80\x82\x03a\x18\xA4Wa\x18\xA4c\xA7O\x97\xAB`\xE0\x1Ba\x15tV[a\x18\xD2a\x18\xB0\x85a\x15|V[_\x03a\x18\xBB\x85a\x15|V[_\x03`\x80\x91\x90\x91\x1B`\x01`\x01`\x80\x1B\x03\x90\x91\x16\x17\x90V[\x91P\x83\x15a\x18\xFEWa\x18\xF2\x84`\x01`\x80\x1B\x83`\x01`\x01`\x80\x1B\x03\x16a*\nV[`\x01\x86\x01\x80T\x90\x91\x01\x90U[\x82\x15a\x19(Wa\x19\x1C\x83`\x01`\x80\x1B\x83`\x01`\x01`\x80\x1B\x03\x16a*\nV[`\x02\x86\x01\x80T\x90\x91\x01\x90U[P\x93\x92PPPV[\x82Qa\x19F\x90a\x19@\x84`\x80\x1D\x90V[\x83a\x15\x9CV[a\x07\xC6\x83` \x01Qa\x19@\x84`\x0F\x0B\x90V[\x853`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x18tW`\x10\x87\x16\x15a\x18tWa\x18r3\x87\x87\x87\x87\x87`@Q`$\x01a\x19\x90\x96\x95\x94\x93\x92\x91\x90aK>V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xE1\xB4\xAFi`\xE0\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x89\x16\x90a)yV[`\x01_\x80Q` aN\xCB\x839\x81Q\x91R]V[__\x80Q` aN\xCB\x839\x81Q\x91R]V[b\x0FB@b\xFF\xFF\xFF\x82\x16\x11\x15a\x17\xFDWa\x17\xFDc\x14\0!\x13`\xE0\x1Bb\xFF\xFF\xFF\x83\x16a!\x0CV[a\x1A\x1E\x82a\x17\xDCV[\x81Ta\x1A*\x90\x82a*\xA6V[\x90\x91UPV[\x843`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x1B*W_\x84`@\x01Q\x13\x80\x15a\x1AWWPa\x08\0\x86\x16\x15\x15[\x15a\x1A\xB8Wa\x1A\xB23\x86\x86\x86\x86`@Q`$\x01a\x1Ax\x95\x94\x93\x92\x91\x90aK\x88V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c%\x99\x82\xE5`\xE0\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x88\x16\x90a)yV[Pa\x1B*V[_\x84`@\x01Q\x13\x15\x80\x15a\x1A\xCFWPa\x02\0\x86\x16\x15\x15[\x15a\x1B*Wa\x18t3\x86\x86\x86\x86`@Q`$\x01a\x1A\xF0\x95\x94\x93\x92\x91\x90aK\x88V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x02\x1D\x0E\xE7`\xE4\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x88\x16\x90a)yV[PPPPPPV[\x80`\x0F\x81\x90\x0B\x81\x14a\n\x02Wa\n\x02c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[``\x81\x01Q` \x82\x01Q`@\x83\x01Q_\x92\x83\x92\x90\x91a\x1Bm\x82\x82a*\xC1V[`@\x80Q`\x80\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x91\x90\x91R\x83`\x0F\x0B_\x14a\x1C\xB2Wa\x1B\xA6\x88\x84\x86_a+!V[`\x01`\x01`\x80\x1B\x03\x16` \x83\x01R\x15\x15\x81Ra\x1B\xC5\x88\x83\x86`\x01a+!V[`\x01`\x01`\x80\x1B\x03\x16``\x83\x01R\x15\x15`@\x82\x01R_`\x0F\x85\x90\x0B\x12a\x1CwW_a\x1C\x15\x88`\x80\x01Q`\x02\x0Bb\r\x89\xE7\x19\x81\x90\x05\x81\x02b\r\x89\xE8\x82\x90\x05\x82\x02\x03\x05`\x01\x01`\x01`\x01`\x80\x1B\x03\x04\x90V[\x90P\x80`\x01`\x01`\x80\x1B\x03\x16\x82` \x01Q`\x01`\x01`\x80\x1B\x03\x16\x11\x15a\x1CFWa\x1CFc\xB8\xE3\xC3\x85`\xE0\x1B\x85a \x1AV[\x80`\x01`\x01`\x80\x1B\x03\x16\x82``\x01Q`\x01`\x01`\x80\x1B\x03\x16\x11\x15a\x1CuWa\x1Cuc\xB8\xE3\xC3\x85`\xE0\x1B\x84a \x1AV[P[\x80Q\x15a\x1C\x93W`\x80\x87\x01Qa\x1C\x93\x90`\x05\x8A\x01\x90\x85\x90a+\xDBV[\x80`@\x01Q\x15a\x1C\xB2W`\x80\x87\x01Qa\x1C\xB2\x90`\x05\x8A\x01\x90\x84\x90a+\xDBV[_\x80a\x1C\xBF\x8A\x86\x86a,-V[\x8AQ`\xA0\x8C\x01Q`@\x80Q`&\x81\x01\x92\x90\x92R`\x06\x80\x83\x01\x8A\x90R`\x03\x83\x01\x8B\x90R\x92\x82R`:`\x0C\x83\x01 _\x83\x83\x01\x81\x90R` \x80\x85\x01\x82\x90R\x93\x81\x90R\x90\x81R\x92\x8F\x01\x90\x91R\x81 \x92\x94P\x90\x92P\x80a\x1D\x1C\x83\x8A\x87\x87a,\xE1V[\x91P\x91Pa\x1DHa\x1D,\x83a\x15|V[a\x1D5\x83a\x15|V[`\x01`\x01`\x80\x1B\x03\x16`\x80\x91\x90\x91\x1B\x17\x90V[\x99PPPPPP_\x84`\x0F\x0B\x12\x15a\x1D\xB1W\x80Q\x15a\x1D\x84W`\x02\x83\x81\x0B_\x90\x81R`\x04\x8A\x01` R`@\x81 \x81\x81U`\x01\x81\x01\x82\x90U\x90\x91\x01U[\x80`@\x01Q\x15a\x1D\xB1W`\x02\x82\x81\x0B_\x90\x81R`\x04\x8A\x01` R`@\x81 \x81\x81U`\x01\x81\x01\x82\x90U\x90\x91\x01U[P\x82`\x0F\x0B_\x14a\x1E\xBEW\x86T_\x80a\x1D\xCD\x83`\xA0\x1C`\x02\x0B\x90V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x91P\x91P\x84`\x02\x0B\x82`\x02\x0B\x12\x15a\x1E\x1CWa\x1E\x15a\x1E\x0Fa\x1E\na\x1D\xFB\x88a-\x9AV[a\x1E\x04\x88a-\x9AV[\x8Aa0RV[a\x1B2V[`\x80\x1B\x90V[\x97Pa\x1E\xBAV[\x83`\x02\x0B\x82`\x02\x0B\x12\x15a\x1E\x95Wa\x1ESa\x1E=a\x1E\n\x83a\x1E\x04\x88a-\x9AV[a\x1D5a\x1E\na\x1EL\x89a-\x9AV[\x85\x8Ba0\x8AV[`\x03\x8B\x01T\x90\x98Pa\x1En\x90`\x01`\x01`\x80\x1B\x03\x16\x87a0\xB6V[`\x03\x8B\x01\x80T`\x01`\x01`\x80\x1B\x03\x19\x16`\x01`\x01`\x80\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ua\x1E\xBAV[a\x1E\xB7_a\x1D5a\x1E\na\x1E\xA8\x89a-\x9AV[a\x1E\xB1\x89a-\x9AV[\x8Ba0\x8AV[\x97P[PPP[PPP\x92P\x92\x90PV[_`\x80\x82\x81\x1D\x90\x84\x90\x1D\x01`\x0F\x83\x81\x0B\x90\x85\x90\x0B\x01a\x1E\xF2a\x1E\xE9\x83a\x1B2V[a\x1D5\x83a\x1B2V[\x95\x94PPPPPV[_\x80`\x01`\x01`\xA0\x1B\x03\x88\x163\x03a\x1F\x17WP\x83\x90P_a \x0FV[\x84\x91P_\x86`@\x01Q\x13\x15a\x1F\xA3Wa\x04\0\x88\x16\x15a\x1F\x9EWa\x1F\x8F3\x88\x88\x88\x88\x88`@Q`$\x01a\x1FN\x96\x95\x94\x93\x92\x91\x90aK\xE8V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16bZ*\x81`\xE8\x1B\x17\x90R`\x02\x8A\x16\x15\x15[`\x01`\x01`\xA0\x1B\x03\x8B\x16\x91\x90a0\xDDV[\x90Pa\x1F\x9B\x82\x82a1\x1EV[\x91P[a \x0FV[a\x01\0\x88\x16\x15a \x0FWa \x003\x88\x88\x88\x88\x88`@Q`$\x01a\x1F\xCB\x96\x95\x94\x93\x92\x91\x90aK\xE8V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cF\xD9[)`\xE1\x1B\x17\x90R`\x01\x8A\x16\x15\x15a\x1F~V[\x90Pa \x0C\x82\x82a1\x1EV[\x91P[\x96P\x96\x94PPPPPV[\x81_R\x80`\x02\x0B`\x04R`$_\xFD[\x82_R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04R`\x01`\x01`\xA0\x1B\x03\x81\x16`$R`D_\xFD[_`\x80\x83\x16\x15\x80\x15a _WP`\x08\x83\x16\x15\x15[\x15a kWP_a\x06\xCDV[`@\x83\x16\x15\x80\x15a ~WP`\x04\x83\x16\x15\x15[\x15a \x8AWP_a\x06\xCDV[a\x04\0\x83\x16\x15\x80\x15a \x9EWP`\x02\x83\x16\x15\x15[\x15a \xAAWP_a\x06\xCDV[a\x01\0\x83\x16\x15\x80\x15a \xBEWP`\x01\x83\x16\x15\x15[\x15a \xCAWP_a\x06\xCDV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a \xFBWa?\xFF\x83\x16\x15\x15\x80a \xF6WPb\x80\0\0b\xFF\xFF\xFF\x83\x16\x14a\x07sV[a\x07sV[Pb\xFF\xFF\xFF\x16b\x80\0\0\x14\x15\x91\x90PV[\x81_R`\x01`\x01`\xA0\x1B\x03\x81\x16`\x04R`$_\xFD[_b\x80\0\0b\xFF\xFF\xFF\x83\x16\x03a!8WP_\x91\x90PV[a\x15\x98\x82b\xFF\xFF\xFF\x16a\x19\xEFV[\x843`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x1B*Wa \0\x86\x16\x15a\x1B*Wa\x18t3\x86\x86\x86\x86`@Q`$\x01a!}\x95\x94\x93\x92\x91\x90aLOV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x01\xA2\x06\xC1`\xE5\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x88\x16\x90a)yV[`\x02T_\x90\x81\x90`\x01`\x01`\xA0\x1B\x03\x16\x15a\"\xE4W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Z\x10\x15a\"\x04Wa\"\x04c\x0FrK\x81`\xE1\x1Ba\x15tV[`\x02T`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90_\x90a\"F\x90\x87\x90`$\x01aL\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cU;\xFC7`\xE0\x1B\x17\x81R\x81Q\x91\x92P_\x91\x82\x91\x82\x91\x90\x82\x87\x89\xF1=` \x14\x16\x95P\x85\x15a\"\x9DW`@Q=_\x82>\x80Q\x91P_\x81RP[\x85\x80\x15a\"\xAEWP\x80b\xFF\xFF\xFF\x16\x81\x14[\x80\x15a\"\xCBWPa\x03\xE9a\x0F\xFF\x82\x16\x10b>\x90\0b\xFF\xF0\0\x83\x16\x10\x16[a\"\xD6W_\x80a\"\xDAV[`\x01\x81[\x90\x96P\x94PPPPP[\x91P\x91V[\x83T_\x90`\x01`\x01`\xA0\x1B\x03\x16\x15a#\x0BWa#\x0Bcy\x83\xC0Q`\xE0\x1Ba\x15tV[a#\x14\x84a1?V[\x90Pa#=\x82a#7\x85a#1`\x01`\x01`\xA0\x1B\x03\x89\x16\x86a4*V[\x90a4EV[\x90a*\xA6V[\x90\x94UP\x91\x92\x91PPV[\x853`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x18tWa\x10\0\x87\x16\x15a\x18tWa\x18r3\x87\x87\x87\x87\x87`@Q`$\x01a#\x81\x96\x95\x94\x93\x92\x91\x90aL\x9EV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x10\xF8\x0F`\xE0\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x89\x16\x90a)yV[a#\xC4\x82a\x17\xDCV[\x81Ta\x1A*\x90\x82a4EV[a#\xF0_\x80Q` aN\x8B\x839\x81Q\x91R\\`\x01`\x01`\xA0\x1B\x03\x16a4`V[a\x17\xDAWa\x17\xDAc\x99l\xAFe`\xE0\x1Ba\x15tV[_`\x01`\x01`\xA0\x1B\x03\x82\x16a$\x1AWPG\x91\x90PV[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a$\\W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xCD\x91\x90aL\xE7V[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x80Q` aN\x8B\x839\x81Q\x91R]\x80\x7F\x1E\x07E\xA7\xDB\x16#\x98\x1F\x0B*]B26L\0xrf\xEBu\xADTo\x19\x0El\xEB\xE9\xBD\x95]PPV[` \x83\x01Q_\x80`\x01`\x01`\xA0\x1B\x03\x88\x163\x03a$\xDFW_\x91Pa%\xD1V[`\x80\x88\x16\x15a%\xD1W_a%5\x893\x8A\x8A\x8A\x8A`@Q`$\x01a%\x06\x95\x94\x93\x92\x91\x90aL\xFEV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x15\xD7\x89-`\xE2\x1B\x17\x90Ra)yV[\x90P\x80Q``\x14a%PWa%Pc\x1E\x04\x8E\x1D`\xE0\x1Ba\x15tV[`@\x88\x01Qb\xFF\xFF\xFF\x16b\x80\0\0\x03a%kW``\x81\x01Q\x91P[`\x08\x89\x16\x15a%\xCFW`@\x81\x01Q\x92P_a%\x86\x84`\x80\x1D\x90V[\x90P\x80`\x0F\x0B_\x14a%\xCDW_\x85\x12a%\xA3`\x0F\x83\x90\x0B\x87aMWV[\x95P\x80a%\xB2W_\x86\x12a%\xB6V[_\x86\x13[\x15a%\xCBWa%\xCBc}\x05\xB8\xEB`\xE1\x1Ba\x15tV[P[P[P[\x95P\x95P\x95\x92PPPV[_\x80\x80\x80\x80a%\xEB\x89\x88a4qV[\x93P\x93P\x93P\x93P_\x83\x11\x15a&\x19W`\x01`\x01`\xA0\x1B\x03\x86\x16_\x90\x81R`\x01` R`@\x90 \x80T\x84\x01\x90U[3\x88\x7F@\xE9\xCE\xCB\x9F_\x1F\x1C[\x9C\x97\xDE\xC2\x91{~\xE9.W\xBAUcp\x8D\xAC\xA9M\xD8J\xD7\x11/a&F\x87`\x80\x1D\x90V[a&P\x88`\x0F\x0B\x90V[`@\x80\x87\x01Q`\xA0\x88\x01Q``\x89\x01Q\x92Qa&\xB5\x95\x94\x93\x90\x8B\x90`\x0F\x96\x87\x0B\x81R\x94\x90\x95\x0B` \x85\x01R`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16`@\x84\x01R`\x01`\x01`\x80\x1B\x03\x16``\x83\x01R`\x02\x0B`\x80\x82\x01Rb\xFF\xFF\xFF\x91\x90\x91\x16`\xA0\x82\x01R`\xC0\x01\x90V[`@Q\x80\x91\x03\x90\xA3P\x91\x97\x96PPPPPPPV[_\x80`\x01`\x01`\xA0\x1B\x03\x89\x163\x03a&\xE6WP\x84\x90P_a'\xE1V[_a&\xF1\x84`\x80\x1D\x90V[\x90P_a&\xFE\x85`\x0F\x0B\x90V[\x90P`@\x8B\x16\x15a'xWa'ka\x1E\n3\x8C\x8C\x8C\x8C\x8C`@Q`$\x01a'*\x96\x95\x94\x93\x92\x91\x90aM~V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xB4{/\xB1`\xE0\x1B\x17\x90R`\x04\x8E\x16\x15\x15`\x01`\x01`\xA0\x1B\x03\x8F\x16\x91\x90a0\xDDV[a'u\x90\x82aM\xDEV[\x90P[_\x81`\x0F\x0B_\x14\x15\x80a'\x8EWP\x82`\x0F\x0B_\x14\x15[\x15a'\xD9W\x89Q` \x8B\x01Q_\x13\x90\x15\x15\x14a'\xB9W`\x01`\x01`\x80\x1B\x03\x83\x16`\x80\x83\x90\x1B\x17a'\xCAV[`\x01`\x01`\x80\x1B\x03\x82\x16`\x80\x84\x90\x1B\x17[\x90Pa'\xD6\x89\x82a1\x1EV[\x98P[\x88\x94P\x92PPP[\x97P\x97\x95PPPPPPV[3`\x01`\x01`\xA0\x1B\x03\x84\x16\x81\x14\x80\x15\x90a(,WP`\x01`\x01`\xA0\x1B\x03\x80\x85\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x85\x16\x83R\x92\x90R T`\xFF\x16\x15[\x15a(\xA0W`\x01`\x01`\xA0\x1B\x03\x80\x85\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 \x93\x85\x16\x83R\x92\x81R\x82\x82 \x86\x83R\x90R T_\x19\x81\x14a(\x9EWa(p\x83\x82aI\xE4V[`\x01`\x01`\xA0\x1B\x03\x80\x87\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 \x93\x87\x16\x83R\x92\x81R\x82\x82 \x88\x83R\x90R U[P[a\x08B\x84\x84\x84a;\x1EV[`\x01`\x01`\xA0\x1B\x03\x82\x81\x16_\x90\x81R\x90\x84\x16` R`@\x81 \x80\\\x91\x90a(\xD6`\x0F\x85\x90\x0B\x84aMWV[\x91P\x81\x81]P\x93P\x93\x91PPV[_\x80Q` aN\xEB\x839\x81Q\x91R\\`\x01\x81\x03\x90P\x80_\x80Q` aN\xEB\x839\x81Q\x91R]PV[_\x80Q` aN\xEB\x839\x81Q\x91R\\`\x01\x81\x01\x90P\x80_\x80Q` aN\xEB\x839\x81Q\x91R]PV[=`@Q\x83\x81R\x82`\x04\x82\x01R`@`$\x82\x01R\x81`D\x82\x01R\x81_`d\x83\x01>` \x80`\x1F\x84\x01\x04\x02`d\x01\x91P\x81\x81\xFD[__\x80Q` aN\x8B\x839\x81Q\x91R]V[``_\x80_\x84Q` \x86\x01_\x88Z\xF1\x90P\x80a)\xA0Wa)\xA0c1\x9DT\xC3`\xE0\x1B\x85a)4V[`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>` \x82Q\x10\x80a)\xEEWP` \x83\x01Q`\x01`\x01`\xE0\x1B\x03\x19\x16a)\xE1\x83` \x01Q\x90V[`\x01`\x01`\xE0\x1B\x03\x19\x16\x14\x15[\x15a*\x03Wa*\x03c\x1E\x04\x8E\x1D`\xE0\x1Ba\x15tV[P\x92\x91PPV[_\x83\x83\x02\x81_\x19\x85\x87\t\x82\x81\x10\x83\x82\x03\x03\x91PP\x80\x84\x11a*)W_\x80\xFD[\x80_\x03a*;WP\x82\x90\x04\x90Pa\x07sV[_\x84\x86\x88\t_\x86\x81\x03\x87\x16\x96\x87\x90\x04\x96`\x02`\x03\x89\x02\x81\x18\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x90\x91\x03\x02\x91\x81\x90\x03\x81\x90\x04`\x01\x01\x86\x84\x11\x90\x95\x03\x94\x90\x94\x02\x91\x90\x94\x03\x92\x90\x92\x04\x91\x90\x91\x17\x91\x90\x91\x02\x91PP\x93\x92PPPV[`\xD0\x1Bb\xFF\xFF\xFF`\xD0\x1B\x16b\xFF\xFF\xFF`\xD0\x1B\x19\x91\x90\x91\x16\x17\x90V[\x80`\x02\x0B\x82`\x02\x0B\x12a*\xE0Wa*\xE0c\xC4C>\xD5`\xE0\x1B\x83\x83a;\x87V[b\r\x89\xE7\x19`\x02\x83\x90\x0B\x12\x15a+\x01Wa+\x01c\xD5\xE2\xF7\xAB`\xE0\x1B\x83a \x1AV[b\r\x89\xE8`\x02\x82\x90\x0B\x13\x15a\x11\xB3Wa\x11\xB3c\x03Z\xEE\xFF`\xE3\x1B\x82a \x1AV[`\x02\x83\x90\x0B_\x90\x81R`\x04\x85\x01` R`@\x81 \x80T\x82\x91\x90`\x01`\x01`\x80\x1B\x03\x81\x16\x90`\x80\x1Da+R\x82\x88a0\xB6V[`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x15\x90\x84\x16\x80\x15\x91\x90\x91\x14\x15\x96P\x90\x94P_\x03a+\x9CW\x88T`\xA0\x1C`\x02\x0B`\x02\x0B\x88`\x02\x0B\x13a+\x9CW`\x01\x80\x8A\x01T\x90\x84\x01U`\x02\x80\x8A\x01T\x90\x84\x01U[_\x86a+\xB1Wa+\xAC\x88\x83aM\xDEV[a+\xBBV[a+\xBB\x88\x83aN\x0BV[\x90P\x80`\x80\x1B`\x01`\x01`\x80\x1B\x03\x86\x16\x17\x84UPPPP\x94P\x94\x92PPPV[`\x02\x91\x82\x0B\x91\x0B\x80\x82\x07\x15a,\x08W`@Qc\xD4\xD8\xF3\xE6\x81R\x82` \x82\x01R\x81`@\x82\x01R`D`\x1C\x82\x01\xFD[\x80\x82\x05\x91P\x81`\x08\x1D_R\x82` R`@_ `\x01`\xFF\x84\x16\x1B\x81T\x18\x81UPPPPV[`\x02\x82\x81\x0B_\x81\x81R`\x04\x86\x01` R`@\x80\x82 \x85\x85\x0B\x83R\x90\x82 \x87T\x92\x94\x85\x94\x92\x93\x91\x92`\xA0\x92\x90\x92\x1C\x90\x0B\x90\x81\x12\x15a,\x83W\x81`\x01\x01T\x83`\x01\x01T\x03\x94P\x81`\x02\x01T\x83`\x02\x01T\x03\x93Pa,\xD6V[\x85`\x02\x0B\x81`\x02\x0B\x12a,\xAFW\x82`\x01\x01T\x82`\x01\x01T\x03\x94P\x82`\x02\x01T\x82`\x02\x01T\x03\x93Pa,\xD6V[\x81`\x01\x01T\x83`\x01\x01T\x89`\x01\x01T\x03\x03\x94P\x81`\x02\x01T\x83`\x02\x01T\x89`\x02\x01T\x03\x03\x93P[PPP\x93P\x93\x91PPV[\x83T_\x90\x81\x90`\x01`\x01`\x80\x1B\x03\x16`\x0F\x86\x90\x0B\x82\x03a- W\x80`\x01`\x01`\x80\x1B\x03\x16_\x03a-\x1BWa-\x1Bc+\xBF\xAEI`\xE2\x1Ba\x15tV[a-FV[a-*\x81\x87a0\xB6V[\x87T`\x01`\x01`\x80\x1B\x03\x19\x16`\x01`\x01`\x80\x1B\x03\x91\x90\x91\x16\x17\x87U[a-d\x87`\x01\x01T\x86\x03\x82`\x01`\x01`\x80\x1B\x03\x16`\x01`\x80\x1Ba*\nV[\x92Pa-\x84\x87`\x02\x01T\x85\x03\x82`\x01`\x01`\x80\x1B\x03\x16`\x01`\x80\x1Ba*\nV[`\x01\x88\x01\x95\x90\x95UPP`\x02\x90\x94\x01U\x91\x92\x90PV[`\x02\x0B_`\xFF\x82\x90\x1D\x80\x83\x01\x18b\r\x89\xE8\x81\x11\x15a-\xC3Wa-\xC3cE\xC3\x19=`\xE1\x1B\x84a \x1AV[p\x01\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01`\x01\x82\x16\x02`\x01`\x80\x1B\x18`\x02\x82\x16\x15a-\xFFWo\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C[`\x04\x82\x16\x15a.\x1EWo\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C[`\x08\x82\x16\x15a.=Wo\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C[`\x10\x82\x16\x15a.\\Wo\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C[` \x82\x16\x15a.{Wo\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C[`@\x82\x16\x15a.\x9AWo\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C[`\x80\x82\x16\x15a.\xB9Wo\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C[a\x01\0\x82\x16\x15a.\xD9Wo\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C[a\x02\0\x82\x16\x15a.\xF9Wo\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C[a\x04\0\x82\x16\x15a/\x19Wo\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C[a\x08\0\x82\x16\x15a/9Wo\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C[a\x10\0\x82\x16\x15a/YWo\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C[a \0\x82\x16\x15a/yWo\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C[a@\0\x82\x16\x15a/\x99Wop\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C[a\x80\0\x82\x16\x15a/\xB9Wo1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C[b\x01\0\0\x82\x16\x15a/\xDAWo\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C[b\x02\0\0\x82\x16\x15a/\xFAWn]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C[b\x04\0\0\x82\x16\x15a0\x19Wm\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x02`\x80\x1C[b\x08\0\0\x82\x16\x15a06Wk\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x02`\x80\x1C[_\x84\x13\x15a0BW_\x19\x04[c\xFF\xFF\xFF\xFF\x01` \x1C\x93\x92PPPV[_\x80\x82`\x0F\x0B\x12a0yWa0ra0m\x85\x85\x85`\x01a;\xA4V[a<gV[_\x03a\x15lV[a\x15la0m\x85\x85\x85_\x03_a;\xA4V[_\x80\x82`\x0F\x0B\x12a0\xA5Wa0ra0m\x85\x85\x85`\x01a<\x80V[a\x15la0m\x85\x85\x85_\x03_a<\x80V[`\x01`\x01`\x80\x1B\x03\x82\x16`\x0F\x82\x90\x0B\x01`\x80\x81\x90\x1C\x15a\x06\xCDWc\x93\xDA\xFD\xF1_R`\x04`\x1C\xFD[_\x80a0\xE9\x85\x85a)yV[\x90P\x82a0\xF9W_\x91PPa\x07sV[\x80Q`@\x14a1\x12Wa1\x12c\x1E\x04\x8E\x1D`\xE0\x1Ba\x15tV[`@\x01Q\x94\x93PPPPV[_`\x80\x82\x81\x1D\x90\x84\x90\x1D\x03`\x0F\x83\x81\x0B\x90\x85\x90\x0B\x03a\x1E\xF2a\x1E\xE9\x83a\x1B2V[_s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DQc\x96\x16\x82d\x01\0\x02v\xA2\x19\x83\x01`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a1~Wa1~c\x18R\x1DI`\xE2\x1B\x83a!\x0CV[d\x01\0\0\0\0`\x01`\xC0\x1B\x03` \x83\x90\x1B\x16`\x01`\x01`\x80\x1B\x03\x81\x11`\x07\x1B\x81\x81\x1C`\x01`\x01`@\x1B\x03\x81\x11`\x06\x1B\x90\x81\x1Cc\xFF\xFF\xFF\xFF\x81\x11`\x05\x1B\x90\x81\x1Ca\xFF\xFF\x81\x11`\x04\x1B\x90\x81\x1C`\xFF\x81\x11`\x03\x90\x81\x1B\x91\x82\x1C`\x0F\x81\x11`\x02\x1B\x90\x81\x1C\x91\x82\x11`\x01\x90\x81\x1B\x92\x83\x1C\x97\x90\x88\x11\x96\x17\x90\x94\x17\x90\x92\x17\x17\x90\x91\x17\x17\x17`\x80\x81\x10a2\x11W`\x7F\x81\x03\x83\x90\x1C\x91Pa2\x1BV[\x80`\x7F\x03\x83\x90\x1B\x91P[\x90\x80\x02`\x7F\x81\x81\x1C`\xFF\x83\x81\x1C\x91\x90\x91\x1C\x80\x02\x80\x83\x1C\x81\x83\x1C\x1C\x80\x02\x80\x84\x1C\x81\x84\x1C\x1C\x80\x02\x80\x85\x1C\x81\x85\x1C\x1C\x80\x02\x80\x86\x1C\x81\x86\x1C\x1C\x80\x02\x80\x87\x1C\x81\x87\x1C\x1C\x80\x02\x80\x88\x1C\x81\x88\x1C\x1C\x80\x02\x80\x89\x1C\x81\x89\x1C\x1C\x80\x02\x80\x8A\x1C\x81\x8A\x1C\x1C\x80\x02\x80\x8B\x1C\x81\x8B\x1C\x1C\x80\x02\x80\x8C\x1C\x81\x8C\x1C\x1C\x80\x02\x80\x8D\x1C\x81\x8D\x1C\x1C\x80\x02\x80\x8E\x1C\x9C\x81\x90\x1C\x9C\x90\x9C\x1C\x80\x02\x9C\x8D\x90\x1C\x9E\x9D`\x7F\x19\x8F\x01`@\x1B`\xC0\x91\x90\x91\x1Cg\x80\0\0\0\0\0\0\0\x16\x17`\xC1\x9B\x90\x9B\x1Cg@\0\0\0\0\0\0\0\x16\x9A\x90\x9A\x17`\xC2\x99\x90\x99\x1Cg \0\0\0\0\0\0\0\x16\x98\x90\x98\x17`\xC3\x97\x90\x97\x1Cg\x10\0\0\0\0\0\0\0\x16\x96\x90\x96\x17`\xC4\x95\x90\x95\x1Cg\x08\0\0\0\0\0\0\0\x16\x94\x90\x94\x17`\xC5\x93\x90\x93\x1Cg\x04\0\0\0\0\0\0\0\x16\x92\x90\x92\x17`\xC6\x91\x90\x91\x1Cg\x02\0\0\0\0\0\0\0\x16\x17`\xC7\x91\x90\x91\x1Cg\x01\0\0\0\0\0\0\0\x16\x17`\xC8\x91\x90\x91\x1Cf\x80\0\0\0\0\0\0\x16\x17`\xC9\x91\x90\x91\x1Cf@\0\0\0\0\0\0\x16\x17`\xCA\x91\x90\x91\x1Cf \0\0\0\0\0\0\x16\x17`\xCB\x91\x90\x91\x1Cf\x10\0\0\0\0\0\0\x16\x17`\xCC\x91\x90\x91\x1Cf\x08\0\0\0\0\0\0\x16\x17`\xCD\x91\x90\x91\x1Cf\x04\0\0\0\0\0\0\x16\x17i6'\xA3\x01\xD7\x10UwL\x85\x81\x02o\x02\x8Fd\x81\xAB\x7F\x04ZZ\xF0\x12\xA1\x9D\0:\xA9\x19\x81\x01`\x80\x90\x81\x1D\x90o\xDB-\xF0\x9E\x81\x95\x9A\x81E^&\x07\x99\xA0c/\x83\x01\x90\x1D`\x02\x81\x81\x0B\x90\x83\x90\x0B\x14a4\x1BW\x88`\x01`\x01`\xA0\x1B\x03\x16a4\0\x82a-\x9AV[`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a4\x15W\x81a4\x1DV[\x80a4\x1DV[\x81[\x99\x98PPPPPPPPPV[`\xA0\x1Bb\xFF\xFF\xFF`\xA0\x1B\x16b\xFF\xFF\xFF`\xA0\x1B\x19\x91\x90\x91\x16\x17\x90V[`\xB8\x1Bb\xFF\xFF\xFF`\xB8\x1B\x16b\xFF\xFF\xFF`\xB8\x1B\x19\x91\x90\x91\x16\x17\x90V[_`\x01`\x01`\xA0\x1B\x03\x82\x16\x15a\x06\xCDV[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R\x81\x90\x81\x90\x85T` \x86\x01Q`\x03\x88\x01T`\x01`\x01`\x80\x1B\x03\x16_\x82a4\xCEWa\x0F\xFF`\xC4\x85\x90\x1C\x16a4\xD8V[a\x0F\xFF`\xB8\x85\x90\x1C\x16[`@\x8A\x81\x01Q\x87R_` \x88\x01R`\x01`\x01`\xA0\x1B\x03\x86\x16\x90\x87\x01R`\xA0\x85\x90\x1C`\x02\x0B``\x87\x01Ra\xFF\xFF\x16\x90P\x82a5\x16W\x89`\x02\x01Ta5\x1CV[\x89`\x01\x01T[`\x80\x86\x81\x01\x91\x90\x91R`\x01`\x01`\x80\x1B\x03\x83\x16`\xA0\x87\x01R\x89\x01Q_\x90b@\0\0\x16a5QW`\xD0\x85\x90\x1Cb\xFF\xFF\xFF\x16a5cV[a5c\x8A`\x80\x01Qb\xFF\xFF\xFF\x16a<\xCCV[\x90P\x81\x15a5\x91Wb\x0FB@b\xFF\xFF\xFF\x82\x16a\xFF\xFF\x84\x16\x81\x81\x02\x83\x81\x06\x15\x15\x93\x90\x04\x92\x90\x92\x01\x91\x01\x03a5\x93V[\x80[`@\x8B\x01Q\x90\x97P_\x13\x90Pb\xFF\xFF\xFF\x87\x16b\x0FB@\x14\x80\x15a5\xB4WP\x80\x15[\x15a5\xC9Wa5\xC9cK\x101#`\xE1\x1Ba\x15tV[\x89`@\x01Q_\x03a5\xE4W_\x80\x98P\x98PPPPPPa;\x15V[\x83\x15a6bW``\x8A\x01Q`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x10a6#Wa6#`\x01`\x01`\xA0\x1B\x03\x86\x16[``\x8C\x01Qc|\x9Cn\x8F`\xE0\x1B\x91\x90a<\xDBV[d\x01\0\x02v\xA3`\x01`\x01`\xA0\x1B\x03\x16\x8A``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x10\x15a6]W``\x8A\x01Qa6]\x90c\x9EM|\xC7`\xE0\x1B\x90a!\x0CV[a6\xD3V[``\x8A\x01Q`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x11a6\x8BWa6\x8B`\x01`\x01`\xA0\x1B\x03\x86\x16a6\x0FV[s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&`\x01`\x01`\xA0\x1B\x03\x16\x8A``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x10a6\xD3W``\x8A\x01Qa6\xD3\x90c\x9EM|\xC7`\xE0\x1B\x90a!\x0CV[`@\x80Q`\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x91\x90\x91R[\x86Q\x15\x80a73WP\x8A``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x87`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14[a:\x1EW`@\x87\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R``\x87\x01Q\x8BQa7]\x91`\x05\x8F\x01\x91\x88a=\x04V[\x15\x15`@\x83\x01R`\x02\x0B` \x82\x01\x81\x90Rb\r\x89\xE7\x19\x12a7\x83Wb\r\x89\xE7\x19` \x82\x01R[b\r\x89\xE8`\x02\x0B\x81` \x01Q`\x02\x0B\x12a7\xA1Wb\r\x89\xE8` \x82\x01R[a7\xAE\x81` \x01Qa-\x9AV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16``\x83\x81\x01\x82\x90R`@\x8A\x01Q\x90\x8E\x01Qa7\xEF\x93\x91\x92\x91\x16\x80\x82\x18\x91\x81\x11`\xFF\x8A\x16\x18\x91\x90\x91\x02\x18`\xA0\x8A\x01Q\x8AQ\x8Ca=\xEDV[`\xC0\x85\x01R`\xA0\x84\x01R`\x80\x83\x01R`\x01`\x01`\xA0\x1B\x03\x16`@\x88\x01R\x81a8SWa8\x1E\x81`\xA0\x01Qa<gV[\x87Q\x03\x87R`\xC0\x81\x01Q`\x80\x82\x01Qa8:\x91a0m\x91aI\xF7V[\x87` \x01\x81\x81Qa8K\x91\x90aN8V[\x90RPa8\x8EV[a8f\x81`\xC0\x01Q\x82`\x80\x01Q\x01a<gV[\x87Q\x01\x87R`\xA0\x81\x01Qa8y\x90a<gV[\x87` \x01\x81\x81Qa8\x8A\x91\x90aMWV[\x90RP[\x82\x15a8\xCAW_b\x0FB@\x84\x83`\xC0\x01Q\x84`\x80\x01Q\x01\x02\x81a8\xB3Wa8\xB3aNWV[`\xC0\x84\x01\x80Q\x92\x90\x91\x04\x91\x82\x90\x03\x90R\x99\x90\x99\x01\x98P[`\xA0\x87\x01Q`\x01`\x01`\x80\x1B\x03\x16\x15a9\tWa8\xFD\x81`\xC0\x01Q`\x01`\x80\x1B\x89`\xA0\x01Q`\x01`\x01`\x80\x1B\x03\x16a*\nV[`\x80\x88\x01\x80Q\x90\x91\x01\x90R[\x80``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x87`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x03a9\xE3W\x80`@\x01Q\x15a9\xCBW_\x80\x86a9JW\x8D`\x01\x01T\x89`\x80\x01Qa9UV[\x88`\x80\x01Q\x8E`\x02\x01T[\x91P\x91P_a9\xA0\x8F\x85` \x01Q\x85\x85`\x02\x92\x83\x0B_\x90\x81R`\x04\x90\x94\x01` R`@\x90\x93 `\x01\x81\x01\x80T\x90\x92\x03\x90\x91U\x90\x81\x01\x80T\x90\x92\x03\x90\x91UT`\x01`\x80\x1B\x90\x04`\x0F\x0B\x90V[\x90P\x87\x15a9\xABW_\x03[a9\xB9\x8A`\xA0\x01Q\x82a0\xB6V[`\x01`\x01`\x80\x1B\x03\x16`\xA0\x8B\x01RPPP[` \x81\x01Q`\xFF\x86\x16\x90\x03`\x02\x0B``\x88\x01Ra7\x0CV[\x80_\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x87`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14a:\x19Wa:\x10\x87`@\x01Qa1?V[`\x02\x0B``\x88\x01R[a7\x0CV[a:V\x87`@\x01Qa:=\x89``\x01Q\x89a4*\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x90V[\x8CU`\xA0\x87\x01Q`\x01`\x01`\x80\x1B\x03\x85\x81\x16\x91\x16\x14a:\x96W`\xA0\x87\x01Q`\x03\x8D\x01\x80T`\x01`\x01`\x80\x1B\x03\x19\x16`\x01`\x01`\x80\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90U[\x84a:\xAAW`\x80\x87\x01Q`\x02\x8D\x01Ua:\xB5V[`\x80\x87\x01Q`\x01\x8D\x01U[\x81\x15\x15\x85\x15\x15\x14a:\xE9Wa:\xE2a:\xD0\x88` \x01Qa\x1B2V[a\x1D5\x89_\x01Q\x8E`@\x01Q\x03a\x1B2V[\x99Pa;\x0EV[a;\x0Ba:\xFE\x88_\x01Q\x8D`@\x01Q\x03a\x1B2V[a\x1D5\x89` \x01Qa\x1B2V[\x99P[PPPPPP[\x92\x95\x91\x94P\x92PV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 \x80T\x83\x92\x90a;P\x90\x84\x90aI\xE4V[\x90\x91UPP`@\x80Q3\x81R` \x81\x01\x83\x90R\x83\x91_\x91`\x01`\x01`\xA0\x1B\x03\x87\x16\x91_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01a\x17\x8DV[`@Q\x83\x81R\x82`\x02\x0B`\x04\x82\x01R\x81`\x02\x0B`$\x82\x01R`D\x81\xFD[_\x83`\x01`\x01`\xA0\x1B\x03\x16\x85`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a;\xC3W\x92\x93\x92[`\x01`\x01`\xA0\x1B\x03\x85\x16a;\xDDWb\xBF\xC9!_R`\x04`\x1C\xFD[`\x01``\x1B`\x01`\xE0\x1B\x03``\x84\x90\x1B\x16`\x01`\x01`\xA0\x1B\x03\x86\x86\x03\x16\x83a<0W\x86`\x01`\x01`\xA0\x1B\x03\x16a<\x1D\x83\x83\x89`\x01`\x01`\xA0\x1B\x03\x16a*\nV[\x81a<*Wa<*aNWV[\x04a<\\V[a<\\a<G\x83\x83\x89`\x01`\x01`\xA0\x1B\x03\x16a?sV[\x88`\x01`\x01`\xA0\x1B\x03\x16\x80\x82\x04\x91\x06\x15\x15\x01\x90V[\x97\x96PPPPPPPV[\x80_\x81\x12\x15a\n\x02Wa\n\x02c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[_`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x90\x86\x16\x03`\xFF\x81\x90\x1D\x90\x81\x01\x18`\x01``\x1B`\x01`\x01`\x80\x1B\x03\x85\x16a<\xB3\x81\x84\x84a*\nV[\x93P\x84_\x83\x85\x84\t\x11\x16\x84\x01\x93PPPP\x94\x93PPPPV[b\xBF\xFF\xFF\x81\x16a\n\x02\x81a\x19\xEFV[`@Q\x83\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16`$\x82\x01R`D\x81\xFD[_\x80`\x02\x84\x81\x0B\x90\x86\x90\x0B\x81\x81\x07\x83\x13\x91\x90\x05\x03\x83\x15a=\x7FW`\x02\x81\x90\x0B`\x08\x1D`\x01\x81\x81\x0B_\x90\x81R` \x8A\x90R`@\x90 T_\x19`\xFF\x85\x16\x83\x81\x01\x93\x90\x93\x1B\x01\x90\x81\x16\x80\x15\x15\x95P\x85a=aW\x88\x83`\xFF\x16\x86\x03\x02a=tV[\x88a=k\x82a?\xA3V[\x84\x03`\xFF\x16\x86\x03\x02[\x96PPPPPa=\xE3V[`\x01\x90\x81\x01`\x02\x81\x90\x0B`\x08\x1D\x80\x83\x0B_\x90\x81R` \x8A\x90R`@\x90 T_\x19`\xFF\x84\x16\x94\x85\x1B\x01\x19\x90\x81\x16\x80\x15\x15\x95P\x92\x93\x91\x92\x85a=\xC9W\x88\x83`\xFF\x03`\xFF\x16\x86\x01\x02a=\xDCV[\x88\x83a=\xD4\x83a@3V[\x03`\xFF\x16\x86\x01\x02[\x96PPPPP[P\x94P\x94\x92PPPV[_\x80\x80\x80b\xFF\xFF\xFF\x85\x16`\x01`\x01`\xA0\x1B\x03\x80\x8A\x16\x90\x8B\x16\x10\x15\x82\x88\x12\x80\x15a>\xE6W_a>&\x8A_\x03\x85b\x0FB@\x03b\x0FB@a*\nV[\x90P\x82a>?Wa>:\x8D\x8D\x8D`\x01a<\x80V[a>LV[a>L\x8C\x8E\x8D`\x01a;\xA4V[\x96P\x86\x81\x10a>\x80W\x8B\x97Pb\x0FB@\x84\x14a>wWa>r\x87\x85\x86b\x0FB@\x03a?sV[a>yV[\x86[\x94Pa>\xBCV[a>\x8C\x8D\x8C\x83\x86a@\xCEV[\x97P\x82a>\xA5Wa>\xA0\x8D\x89\x8D`\x01a<\x80V[a>\xB2V[a>\xB2\x88\x8E\x8D`\x01a;\xA4V[\x96P\x86\x8A_\x03\x03\x94P[\x82a>\xD2Wa>\xCD\x8D\x89\x8D_a;\xA4V[a>\xDEV[a>\xDE\x88\x8E\x8D_a<\x80V[\x95PPa?dV[\x81a>\xFCWa>\xF7\x8C\x8C\x8C_a;\xA4V[a?\x08V[a?\x08\x8B\x8D\x8C_a<\x80V[\x94P\x84\x89\x10a?\x19W\x8A\x96Pa?+V[\x88\x94Pa?(\x8C\x8B\x87\x85aA\x1CV[\x96P[\x81a?BWa?=\x8C\x88\x8C`\x01a<\x80V[a?OV[a?O\x87\x8D\x8C`\x01a;\xA4V[\x95Pa?a\x86\x84\x85b\x0FB@\x03a?sV[\x93P[PPP\x95P\x95P\x95P\x95\x91PPV[_a?\x7F\x84\x84\x84a*\nV[\x90P\x81\x80a?\x8FWa?\x8FaNWV[\x83\x85\t\x15a\x07sW`\x01\x01\x80a\x07sW_\x80\xFD[_\x80\x82\x11a?\xAFW_\x80\xFD[P\x7F\x07\x06\x06\x05\x06\x02\x05\x04\x06\x02\x03\x02\x05\x04\x03\x01\x06\x05\x02\x05\x03\x03\x04\x01\x05\x05\x03\x04\0\0\0\0`\x1Fo\x84!\x08B\x10\x84!\x08\xCCc\x18\xC6\xDBmT\xBE\x83\x15`\x08\x1B`\x01`\x01`\x80\x1B\x03\x85\x11`\x07\x1B\x17\x84\x81\x1C`\x01`\x01`@\x1B\x03\x10`\x06\x1B\x17\x84\x81\x1Cc\xFF\xFF\xFF\xFF\x10`\x05\x1B\x17\x84\x81\x1Ca\xFF\xFF\x10`\x04\x1B\x17\x84\x81\x1C`\xFF\x10`\x03\x1B\x17\x93\x84\x1C\x1C\x16\x1A\x17\x90V[_\x80\x82\x11a@?W_\x80\xFD[P~\x1F\r\x1E\x10\x0C\x1D\x07\x0F\t\x0B\x19\x13\x1C\x17\x06\x01\x0E\x11\x08\n\x1A\x14\x18\x02\x12\x1B\x15\x03\x16\x04\x05\x81\x19`\x01\x01\x90\x91\x16a\x01\xE0\x7F\x80@@UC\0RfD2\0\0P a\x06t\x050&\x02\0\0\x10u\x06 \x01v\x11pw`\xFC\x7F\xB6\xDBm\xB6\xDD\xDD\xDD\xDD\xD3M4\xD3I$\x92I!\x08B\x10\x8Cc\x18\xC69\xCEs\x9C\xFF\xFF\xFF\xFF\x84\x02`\xF8\x1C\x16\x1B`\xF7\x1C\x16\x90\x81\x1Cc\xD7dS\xE0\x04`\x1F\x16\x91\x90\x91\x1A\x17\x90V[_`\x01`\x01`\x80\x1B\x03\x84\x16\x15`\x01`\x01`\xA0\x1B\x03\x86\x16\x15\x17\x15a@\xF8WcO$a\xB8_R`\x04`\x1C\xFD[\x81aA\x0FWaA\n\x85\x85\x85`\x01aA_V[a\x1E\xF2V[a\x1E\xF2\x85\x85\x85`\x01aBJV[_`\x01`\x01`\x80\x1B\x03\x84\x16\x15`\x01`\x01`\xA0\x1B\x03\x86\x16\x15\x17\x15aAFWcO$a\xB8_R`\x04`\x1C\xFD[\x81aAWWaA\n\x85\x85\x85_aBJV[a\x1E\xF2\x85\x85\x85_[_\x81\x15aA\xCFW_`\x01`\x01`\xA0\x1B\x03\x84\x11\x15aA\x93WaA\x8E\x84`\x01``\x1B\x87`\x01`\x01`\x80\x1B\x03\x16a*\nV[aA\xAAV[aA\xAA`\x01`\x01`\x80\x1B\x03\x86\x16``\x86\x90\x1BaNkV[\x90PaA\xC7aA\xC2\x82`\x01`\x01`\xA0\x1B\x03\x89\x16aI\xF7V[aC,V[\x91PPa\x15lV[_`\x01`\x01`\xA0\x1B\x03\x84\x11\x15aA\xFCWaA\xF7\x84`\x01``\x1B\x87`\x01`\x01`\x80\x1B\x03\x16a?sV[aB\x19V[aB\x19``\x85\x90\x1B`\x01`\x01`\x80\x1B\x03\x87\x16\x80\x82\x04\x91\x06\x15\x15\x01\x90V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x87\x16\x11aB8WcC#\xA5U_R`\x04`\x1C\xFD[`\x01`\x01`\xA0\x1B\x03\x86\x16\x03\x90Pa\x15lV[_\x82_\x03aBYWP\x83a\x15lV[`\x01``\x1B`\x01`\xE0\x1B\x03``\x85\x90\x1B\x16\x82\x15aB\xEBW`\x01`\x01`\xA0\x1B\x03\x86\x16\x84\x81\x02\x90\x85\x82\x81aB\x8DWaB\x8DaNWV[\x04\x03aB\xBDW\x81\x81\x01\x82\x81\x10aB\xBBWaB\xB1\x83\x89`\x01`\x01`\xA0\x1B\x03\x16\x83a?sV[\x93PPPPa\x15lV[P[PaA\xC7\x81\x85aB\xD6`\x01`\x01`\xA0\x1B\x03\x8A\x16\x83aNkV[aB\xE0\x91\x90aI\xF7V[\x80\x82\x04\x91\x06\x15\x15\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x86\x16\x84\x81\x02\x90\x85\x82\x04\x14\x81\x83\x11\x16aC\x12Wc\xF5\xC7\x87\xF1_R`\x04`\x1C\xFD[\x80\x82\x03aB\xB1aA\xC2\x84`\x01`\x01`\xA0\x1B\x03\x8B\x16\x84a?sV[\x80`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x02Wa\n\x02c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x17\xFDW_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15aCrW_\x80\xFD[\x825aC}\x81aCMV[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15aC\x9BW_\x80\xFD[\x815`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x07sW_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15aC\xC4W_\x80\xFD[\x835aC\xCF\x81aCMV[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[_\x80_``\x84\x86\x03\x12\x15aC\xF6W_\x80\xFD[\x835aD\x01\x81aCMV[\x92P` \x84\x015aD\x11\x81aCMV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[_` \x82\x84\x03\x12\x15aD2W_\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x80\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aDoWaDoaD9V[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aD\x9DWaD\x9DaD9V[`@R\x91\x90PV[\x805b\xFF\xFF\xFF\x81\x16\x81\x14a\n\x02W_\x80\xFD[\x805`\x02\x81\x90\x0B\x81\x14a\n\x02W_\x80\xFD[_`\xA0\x82\x84\x03\x12\x15aD\xD8W_\x80\xFD[`@Q`\xA0\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aD\xFAWaD\xFAaD9V[`@R\x90P\x80\x825aE\x0B\x81aCMV[\x81R` \x83\x015aE\x1B\x81aCMV[` \x82\x01RaE,`@\x84\x01aD\xA5V[`@\x82\x01RaE=``\x84\x01aD\xB7V[``\x82\x01R`\x80\x83\x015aEP\x81aCMV[`\x80\x91\x90\x91\x01R\x92\x91PPV[_\x80\x83`\x1F\x84\x01\x12aEmW_\x80\xFD[P\x815`\x01`\x01`@\x1B\x03\x81\x11\x15aE\x83W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15aE\x9AW_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_a\x01\0\x86\x88\x03\x12\x15aE\xB6W_\x80\xFD[aE\xC0\x87\x87aD\xC8V[\x94P`\xA0\x86\x015\x93P`\xC0\x86\x015\x92P`\xE0\x86\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aE\xE8W_\x80\xFD[aE\xF4\x88\x82\x89\x01aE]V[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[_` \x82\x84\x03\x12\x15aF\x15W_\x80\xFD[\x815a\x07s\x81aCMV[_\x80`@\x83\x85\x03\x12\x15aF1W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15aFwW\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aFYV[P\x90\x95\x94PPPPPV[_\x80` \x83\x85\x03\x12\x15aF\x93W_\x80\xFD[\x825`\x01`\x01`@\x1B\x03\x81\x11\x15aF\xA8W_\x80\xFD[aF\xB4\x85\x82\x86\x01aE]V[\x90\x96\x90\x95P\x93PPPPV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[_\x80`\xC0\x83\x85\x03\x12\x15aG\x06W_\x80\xFD[aG\x10\x84\x84aD\xC8V[\x91PaG\x1E`\xA0\x84\x01aD\xA5V[\x90P\x92P\x92\x90PV[\x805\x80\x15\x15\x81\x14a\n\x02W_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15aGGW_\x80\xFD[\x825aGR\x81aCMV[\x91PaG\x1E` \x84\x01aG'V[_\x80_\x80\x84\x86\x03a\x01@\x81\x12\x15aGuW_\x80\xFD[aG\x7F\x87\x87aD\xC8V[\x94P`\x80`\x9F\x19\x82\x01\x12\x15aG\x92W_\x80\xFD[PaG\x9BaDMV[aG\xA7`\xA0\x87\x01aD\xB7V[\x81RaG\xB5`\xC0\x87\x01aD\xB7V[` \x82\x01R`\xE0\x86\x015`@\x82\x01Ra\x01\0\x86\x015``\x82\x01R\x92Pa\x01 \x85\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aG\xEAW_\x80\xFD[aG\xF6\x87\x82\x88\x01aE]V[\x95\x98\x94\x97P\x95PPPPV[_\x80_\x80`\xE0\x85\x87\x03\x12\x15aH\x15W_\x80\xFD[aH\x1F\x86\x86aD\xC8V[\x93P`\xA0\x85\x015aH/\x81aCMV[\x92P`\xC0\x85\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aG\xEAW_\x80\xFD[_\x80` \x83\x85\x03\x12\x15aHZW_\x80\xFD[\x825`\x01`\x01`@\x1B\x03\x81\x11\x15aHoW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13aH\x7FW_\x80\xFD[\x805`\x01`\x01`@\x1B\x03\x81\x11\x15aH\x94W_\x80\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15aH\xA8W_\x80\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x80`@\x83\x85\x03\x12\x15aH\xC9W_\x80\xFD[\x825aH\xD4\x81aCMV[\x91P` \x83\x015aH\xE4\x81aCMV[\x80\x91PP\x92P\x92\x90PV[_\x80_\x80\x84\x86\x03a\x01 \x81\x12\x15aI\x04W_\x80\xFD[aI\x0E\x87\x87aD\xC8V[\x94P```\x9F\x19\x82\x01\x12\x15aI!W_\x80\xFD[P`@Q``\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aIDWaIDaD9V[`@RaIS`\xA0\x87\x01aG'V[\x81R`\xC0\x86\x015` \x82\x01R`\xE0\x86\x015aIm\x81aCMV[`@\x82\x01R\x92Pa\x01\0\x85\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aG\xEAW_\x80\xFD[_\x80_\x80`\x80\x85\x87\x03\x12\x15aI\xA0W_\x80\xFD[\x845aI\xAB\x81aCMV[\x93P` \x85\x015aI\xBB\x81aCMV[\x93\x96\x93\x95PPPP`@\x82\x015\x91``\x015\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x06\xCDWa\x06\xCDaI\xD0V[\x80\x82\x01\x80\x82\x11\x15a\x06\xCDWa\x06\xCDaI\xD0V[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[` \x81R_a\x15l` \x83\x01\x84\x86aJ\nV[_` \x82\x84\x03\x12\x15aJUW_\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15aJjW_\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13aJzW_\x80\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15aJ\x93WaJ\x93aD9V[aJ\xA6`\x1F\x82\x01`\x1F\x19\x16` \x01aDuV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15aJ\xBAW_\x80\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[_\x81`\x0F\x0B`\x01`\x01`\x7F\x1B\x03\x19\x81\x03aJ\xF3WaJ\xF3aI\xD0V[_\x03\x92\x91PPV[\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x83R` \x80\x83\x01Q\x82\x16\x90\x84\x01R`@\x80\x83\x01Qb\xFF\xFF\xFF\x16\x90\x84\x01R``\x80\x83\x01Q`\x02\x0B\x90\x84\x01R`\x80\x91\x82\x01Q\x16\x91\x01RV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaKW` \x82\x01\x87aJ\xFBV[\x84`\xC0\x82\x01R\x83`\xE0\x82\x01Ra\x01 a\x01\0\x82\x01R_aK|a\x01 \x83\x01\x84\x86aJ\nV[\x98\x97PPPPPPPPV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81RaK\xA1` \x82\x01\x86aJ\xFBV[\x83Q`\x02\x90\x81\x0B`\xC0\x83\x01R` \x85\x01Q\x90\x0B`\xE0\x82\x01R`@\x84\x01Qa\x01\0\x82\x01R``\x84\x01Qa\x01 \x82\x01Ra\x01`a\x01@\x82\x01R_a<\\a\x01`\x83\x01\x84\x86aJ\nV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaL\x01` \x82\x01\x87aJ\xFBV[\x84Q`\x02\x90\x81\x0B`\xC0\x83\x01R` \x86\x01Q\x90\x0B`\xE0\x82\x01R`@\x85\x01Qa\x01\0\x82\x01R``\x85\x01Qa\x01 \x82\x01R\x83a\x01@\x82\x01Ra\x01\x80a\x01`\x82\x01R_aK|a\x01\x80\x83\x01\x84\x86aJ\nV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81RaLh` \x82\x01\x86aJ\xFBV[`\x01`\x01`\xA0\x1B\x03\x84\x16`\xC0\x82\x01Ra\x01\0`\xE0\x82\x01\x81\x90R_\x90a<\\\x90\x83\x01\x84\x86aJ\nV[`\xA0\x81\x01a\x06\xCD\x82\x84aJ\xFBV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaL\xB7` \x82\x01\x87aJ\xFBV[`\x01\x80`\xA0\x1B\x03\x85\x16`\xC0\x82\x01R\x83`\x02\x0B`\xE0\x82\x01Ra\x01 a\x01\0\x82\x01R_aK|a\x01 \x83\x01\x84\x86aJ\nV[_` \x82\x84\x03\x12\x15aL\xF7W_\x80\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81RaM\x17` \x82\x01\x86aJ\xFBV[\x83Q\x15\x15`\xC0\x82\x01R` \x84\x01Q`\xE0\x82\x01R`@\x84\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x82\x01Ra\x01@a\x01 \x82\x01R_a<\\a\x01@\x83\x01\x84\x86aJ\nV[\x80\x82\x01\x82\x81\x12_\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15aMvWaMvaI\xD0V[PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaM\x97` \x82\x01\x87aJ\xFBV[\x84Q\x15\x15`\xC0\x82\x01R` \x85\x01Q`\xE0\x82\x01R`@\x85\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x82\x01R\x83a\x01 \x82\x01Ra\x01`a\x01@\x82\x01R_aK|a\x01`\x83\x01\x84\x86aJ\nV[`\x0F\x81\x81\x0B\x90\x83\x90\x0B\x01`\x01`\x01`\x7F\x1B\x03\x81\x13`\x01`\x01`\x7F\x1B\x03\x19\x82\x12\x17\x15a\x06\xCDWa\x06\xCDaI\xD0V[`\x0F\x82\x81\x0B\x90\x82\x90\x0B\x03`\x01`\x01`\x7F\x1B\x03\x19\x81\x12`\x01`\x01`\x7F\x1B\x03\x82\x13\x17\x15a\x06\xCDWa\x06\xCDaI\xD0V[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a*\x03Wa*\x03aI\xD0V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82aN\x85WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V\xFE'\xE0\x98\xC5\x05\xD4N\xC3W@\x04\xBC\xA0R\xAA\xBFv\xBD5\0L\x18 \x99\xD8\xC5u\xFB#\x85\x93\xB9\x1B=~\xDB.\x9C\x0B\x0E|R[ \xAA\xAE\xF0\xF5\x94\r.\xD7\x16c\xC7\xD3\x92f\xEC\xAF\xACr\x88Y\xC0\x90\xFCF\x83bL\xFC8\x84\xE9\xD8\xDE^\xCA\x13/-\x0E\xC0b\xAF\xF7]C\xC0F]\\\xEE\xAB#}K1d\xC6\xE4[\x97\xE7\xD8{q%\xA4LX(\xD0\x05\xAF\x88\xF9\xD7Q\xCF\xD7\x87)\xC5\xD9\x9A\x0B\xA2dipfsX\"\x12 \xB0(\xC1\xE0\xE3,}\xAE\xCF\x98J71B\xFE\x8A\xABF\xAA\xE5j\x88\x19\xEC@N\r\x16\x14\x1DfkdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106101e5575f3560e01c80635a6bcfda11610108578063a58411941161009d578063f135baaa1161006d578063f135baaa14610602578063f2fde38b14610621578063f3cd914c14610640578063f5298aca1461065f578063fe99049a1461067e575f80fd5b8063a58411941461056c578063b6363cf21461058b578063dbd035ff146105c4578063f02de3b2146105e3575f80fd5b80638161b874116100d85780638161b874146104cd5780638da5cb5b146104ec57806397e8cd4e146105225780639bf6645f1461054d575f80fd5b80635a6bcfda14610429578063695c5bf51461045d5780637e87ce7d1461048f57806380f0b44c146104ae575f80fd5b80632d7713891161017e57806348c894911161014e57806348c894911461038357806352759651146103af578063558a7297146103ce578063598af9e7146103ed575f80fd5b80632d7713891461030657806335fd631a146103255780633dd45adb14610351578063426a849314610364575f80fd5b806311da60b4116101b957806311da60b4146102a1578063156e29f6146102a95780631e2eaeaf146102c8578063234266d7146102e7575f80fd5b8062fdd58e146101e957806301ffc9a714610232578063095bcdb6146102615780630b0d9c0914610280575b5f80fd5b3480156101f4575f80fd5b5061021f610203366004614361565b600460209081525f928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561023d575f80fd5b5061025161024c36600461438b565b61069d565b6040519015158152602001610229565b34801561026c575f80fd5b5061025161027b3660046143b2565b6106d3565b34801561028b575f80fd5b5061029f61029a3660046143e4565b61077a565b005b61021f6107cb565b3480156102b4575f80fd5b5061029f6102c33660046143b2565b6107fd565b3480156102d3575f80fd5b5061021f6102e2366004614422565b610848565b3480156102f2575f80fd5b5061021f6103013660046145a1565b610852565b348015610311575f80fd5b5061029f610320366004614605565b610902565b348015610330575f80fd5b5061034461033f366004614620565b610998565b6040516102299190614640565b61021f61035f366004614605565b6109d5565b34801561036f575f80fd5b5061025161037e3660046143b2565b610a07565b34801561038e575f80fd5b506103a261039d366004614682565b610a6b565b60405161022991906146c0565b3480156103ba575f80fd5b5061029f6103c93660046146f5565b610b2e565b3480156103d9575f80fd5b506102516103e8366004614736565b610b9d565b3480156103f8575f80fd5b5061021f6104073660046143e4565b600560209081525f938452604080852082529284528284209052825290205481565b348015610434575f80fd5b50610448610443366004614760565b610c0c565b60408051928352602083019190915201610229565b348015610468575f80fd5b5061047c610477366004614802565b610d9f565b60405160029190910b8152602001610229565b34801561049a575f80fd5b5061029f6104a93660046146f5565b610f8e565b3480156104b9575f80fd5b5061029f6104c8366004614361565b611040565b3480156104d8575f80fd5b5061021f6104e73660046143e4565b6110b3565b3480156104f7575f80fd5b505f5461050a906001600160a01b031681565b6040516001600160a01b039091168152602001610229565b34801561052d575f80fd5b5061021f61053c366004614605565b60016020525f908152604090205481565b348015610558575f80fd5b50610344610567366004614849565b611142565b348015610577575f80fd5b5061029f610586366004614605565b61117b565b348015610596575f80fd5b506102516105a53660046148b8565b600360209081525f928352604080842090915290825290205460ff1681565b3480156105cf575f80fd5b506103446105de366004614849565b6111b7565b3480156105ee575f80fd5b5060025461050a906001600160a01b031681565b34801561060d575f80fd5b5061021f61061c366004614422565b6111ee565b34801561062c575f80fd5b5061029f61063b366004614605565b6111f8565b34801561064b575f80fd5b5061021f61065a3660046148ef565b61128a565b34801561066a575f80fd5b5061029f6106793660046143b2565b6113d0565b348015610689575f80fd5b5061025161069836600461498d565b611415565b5f6301ffc9a760e01b6001600160e01b0319831614806106cd5750630f632fb360e01b6001600160e01b03198316145b92915050565b335f9081526004602090815260408083208584529091528120805483919083906106fe9084906149e4565b90915550506001600160a01b0384165f908152600460209081526040808320868452909152812080548492906107359084906149f7565b909155505060408051338082526020820185905285926001600160a01b038816925f80516020614eab83398151915291015b60405180910390a45060015b9392505050565b5f80516020614ecb8339815191525c61079d5761079d6354e3ca0d60e01b611574565b6107b2836107aa8361157c565b5f033361159c565b6107c66001600160a01b03841683836115ef565b505050565b5f5f80516020614ecb8339815191525c6107ef576107ef6354e3ca0d60e01b611574565b6107f833611685565b905090565b5f80516020614ecb8339815191525c610820576108206354e3ca0d60e01b611574565b8161082e816107aa8461157c565b610842846001600160a01b03831684611728565b50505050565b5f81545f5260205ff35b5f5f80516020614ecb8339815191525c610876576108766354e3ca0d60e01b611574565b61087e61179a565b5f61089d61088d8860a0902090565b5f90815260066020526040902090565b90506108a8816117dc565b60808701516108c4906001600160a01b03168888888888611800565b6108cf81878761187d565b91506108dc878333611930565b60808701516108f8906001600160a01b03168888888888611958565b5095945050505050565b5f546001600160a01b0316331461094f5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517fb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc905f90a250565b6060604051808360051b6020835284602084015260408301925080830190505b855483526020830192506001860195508083106109b85781810382f35b5f5f80516020614ecb8339815191525c6109f9576109f96354e3ca0d60e01b611574565b6106cd82611685565b919050565b335f8181526005602090815260408083206001600160a01b03881680855290835281842087855290925280832085905551919285927fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a7906107679087815260200190565b60605f80516020614ecb8339815191525c15610a9157610a916328486b6360e11b611574565b610a996119ca565b6040516348eeb9a360e11b815233906391dd734690610abe9086908690600401614a32565b5f604051808303815f875af1158015610ad9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b009190810190614a45565b90505f80516020614eeb8339815191525c15610b2657610b26635212cba160e01b611574565b6106cd6119dd565b604082015162ffffff1662800000141580610b5f575081608001516001600160a01b0316336001600160a01b031614155b15610b7457610b746330d2164160e01b611574565b610b828162ffffff166119ef565b60a082205f8181526006602052604090206107c69083611a15565b335f8181526003602090815260408083206001600160a01b038716808552908352818420805460ff191687151590811790915591519182529293917fceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267910160405180910390a350600192915050565b5f805f80516020614ecb8339815191525c610c3157610c316354e3ca0d60e01b611574565b610c3961179a565b60a086205f818152600660205260409020610c53816117dc565b6080880151610c6e906001600160a01b031689898989611a30565b5f610cd56040518060c00160405280336001600160a01b031681526020018a5f015160020b81526020018a6020015160020b8152602001610cb28b60400151611b32565b600f0b81526060808d015160020b60208301528b01516040909101528390611b4e565b94509050610ce38185611ec8565b9450336001600160a01b0316837f541c041c2cce48e614b3de043c9280f06b6164c0a1741649e2de3c3d375f79748a5f01518b602001518c60400151604051610d4793929190600293840b81529190920b6020820152604081019190915260600190565b60405180910390a360808901515f90610d6d906001600160a01b03168b8b898c8c611efb565b90965090508015610d8757610d878a828c60800151611930565b610d928a8733611930565b5050505094509492505050565b5f610da861179a565b6060850151617fff60029190910b1315610dd3576060850151610dd3906316e0049f60e31b9061201a565b600160020b856060015160020b1215610dfd576060850151610dfd90631d3d20b160e31b9061201a565b845160208601516001600160a01b03908116911610610e2f5784516020860151610e2f916306e6c98360e41b91612029565b610e53856040015186608001516001600160a01b031661204b90919063ffffffff16565b610e6e576080850151610e6e90630732d7b560e51b9061210c565b5f610e81866040015162ffffff16612121565b6080870151909150610e9f906001600160a01b031687878787612146565b60a086205f610ead886121b7565b5f848152600660205260409020909250610eca91508883866122e9565b6080890151909450610ee9906001600160a01b03168989878a8a612348565b87602001516001600160a01b0316885f01516001600160a01b0316837fdd466e674ea557f56295e2d0218a125ea4b4f0f6f3307b95f85e6110838d64388b604001518c606001518d608001518d8b604051610f7b95949392919062ffffff959095168552600293840b60208601526001600160a01b03928316604086015291166060840152900b608082015260a00190565b60405180910390a4505050949350505050565b6002546001600160a01b03163314610fb057610fb06348f5c3ed60e01b611574565b6103e9610fff821610623e900062fff00083161016610fdf57610fdf63a7abe2f760e01b62ffffff831661210c565b60a0822061100182610ffb835f90815260066020526040902090565b906123bb565b60405162ffffff8316815281907fe9c42593e71f84403b84352cd168d693e2c9fcd1fdbcc3feb21d92b43e6696f99060200160405180910390a2505050565b5f80516020614ecb8339815191525c611063576110636354e3ca0d60e01b611574565b335f9081526001600160a01b038316602052604081205c906110848361157c565b90508181600f0b146110a0576110a063bda73abf60e01b611574565b610842846110ad83614ad7565b3361159c565b6002545f906001600160a01b031633146110d7576110d76348f5c3ed60e01b611574565b81156110e357816110fc565b6001600160a01b0383165f908152600160205260409020545b6001600160a01b0384165f908152600160205260408120805492935083929091906111289084906149e4565b9091555061077390506001600160a01b03841685836115ef565b606060405180602082528360208301526040820191508360051b8201855b80355c845260209384019301818410611160575b5081810382f35b6111836123d0565b6001600160a01b0381166111945750565b5f6111a7826001600160a01b0316612404565b90506111b38282612480565b5050565b606060405180602082528360208301526040820191508360051b8201855b80355484526020938401930181841015611174576111d5565b5f815c5f5260205ff35b5f546001600160a01b031633146112405760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610946565b5f80546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b5f5f80516020614ecb8339815191525c6112ae576112ae6354e3ca0d60e01b611574565b6112b661179a565b83602001515f036112d1576112d163be8b850760e01b611574565b60a085205f8181526006602052604090206112eb816117dc565b60808701515f908190819061130c906001600160a01b03168b8b8b8b6124c0565b80935081955082945050505061137b84866040518060a001604052808e6060015160020b81526020018d5f0151151581526020018681526020018d604001516001600160a01b031681526020018562ffffff168152508c5f0151611374578d602001516125dc565b8d516125dc565b60808b01519096505f925061139f91506001600160a01b03168a8a888b8b886126ca565b909550905080156113b9576113b989828b60800151611930565b6113c4898633611930565b50505050949350505050565b5f80516020614ecb8339815191525c6113f3576113f36354e3ca0d60e01b611574565b81611401816110ad8461157c565b610842846001600160a01b038316846127ed565b5f336001600160a01b0386161480159061145257506001600160a01b0385165f90815260036020908152604080832033845290915290205460ff16155b156114c2576001600160a01b0385165f90815260056020908152604080832033845282528083208684529091529020545f1981146114c05761149483826149e4565b6001600160a01b0387165f90815260056020908152604080832033845282528083208884529091529020555b505b6001600160a01b0385165f908152600460209081526040808320868452909152812080548492906114f49084906149e4565b90915550506001600160a01b0384165f9081526004602090815260408083208684529091528120805484929061152b9084906149f7565b9091555050604080513381526020810184905284916001600160a01b0380881692908916915f80516020614eab833981519152910160405180910390a45060015b949350505050565b805f5260045ffd5b5f6001607f1b8210611598576115986393dafdf160e01b611574565b5090565b81600f0b5f036115ab57505050565b5f806115c16001600160a01b03861684866128ab565b91509150805f036115d9576115d46128e4565b6115e8565b815f036115e8576115e861290c565b5050505050565b5f6001600160a01b038416611623575f805f8085875af190508061161e5761161e638549db5960e01b84612934565b610842565b60405163a9059cbb60e01b81526001600160a01b038416600482015282602482015260205f6044835f895af13d15601f3d1160015f511416171691505f81525f60208201525f6040820152508061084257610842632c4b17e760e21b85612934565b5f5f80516020614e8b8339815191525c6001600160a01b0381166116ab5734915061170f565b34156116c1576116c16319d245cf60e01b611574565b7f1e0745a7db1623981f0b2a5d4232364c00787266eb75ad546f190e6cebe9bd955c5f6116f66001600160a01b038416612404565b905061170282826149e4565b935061170c612967565b50505b6117228161171c8461157c565b8561159c565b50919050565b6001600160a01b0383165f9081526004602090815260408083208584529091528120805483929061175a9084906149f7565b9091555050604080513381526020810183905283916001600160a01b038616915f915f80516020614eab83398151915291015b60405180910390a4505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117da576117da6306c4a1c760e11b611574565b565b80546001600160a01b03165f036117fd576117fd63486aa30760e01b611574565b50565b85336001600160a01b038216146118745760208716156118745761187233878787878760405160240161183896959493929190614b3e565b60408051601f198184030181529190526020810180516001600160e01b0316635b54587d60e11b1790526001600160a01b03891690612979565b505b50505050505050565b60038301545f906001600160801b03168082036118a4576118a463a74f97ab60e01b611574565b6118d26118b08561157c565b5f036118bb8561157c565b5f0360809190911b6001600160801b039091161790565b915083156118fe576118f284600160801b836001600160801b0316612a0a565b60018601805490910190555b82156119285761191c83600160801b836001600160801b0316612a0a565b60028601805490910190555b509392505050565b8251611946906119408460801d90565b8361159c565b6107c6836020015161194084600f0b90565b85336001600160a01b038216146118745760108716156118745761187233878787878760405160240161199096959493929190614b3e565b60408051601f198184030181529190526020810180516001600160e01b031663e1b4af6960e01b1790526001600160a01b03891690612979565b60015f80516020614ecb8339815191525d565b5f5f80516020614ecb8339815191525d565b620f424062ffffff821611156117fd576117fd631400211360e01b62ffffff831661210c565b611a1e826117dc565b8154611a2a9082612aa6565b90915550565b84336001600160a01b03821614611b2a575f8460400151138015611a575750610800861615155b15611ab857611ab23386868686604051602401611a78959493929190614b88565b60408051601f198184030181529190526020810180516001600160e01b031663259982e560e01b1790526001600160a01b03881690612979565b50611b2a565b5f846040015113158015611acf5750610200861615155b15611b2a576118743386868686604051602401611af0959493929190614b88565b60408051601f198184030181529190526020810180516001600160e01b031663021d0ee760e41b1790526001600160a01b03881690612979565b505050505050565b80600f81900b8114610a0257610a026393dafdf160e01b611574565b6060810151602082015160408301515f9283929091611b6d8282612ac1565b604080516080810182525f80825260208201819052918101829052606081019190915283600f0b5f14611cb257611ba68884865f612b21565b6001600160801b0316602083015215158152611bc58883866001612b21565b6001600160801b03166060830152151560408201525f600f85900b12611c77575f611c15886080015160020b620d89e7198190058102620d89e8829005820203056001016001600160801b030490565b9050806001600160801b031682602001516001600160801b03161115611c4657611c4663b8e3c38560e01b8561201a565b806001600160801b031682606001516001600160801b03161115611c7557611c7563b8e3c38560e01b8461201a565b505b805115611c93576080870151611c939060058a01908590612bdb565b806040015115611cb2576080870151611cb29060058a01908490612bdb565b5f80611cbf8a8686612c2d565b8a5160a08c015160408051602681019290925260068083018a9052600383018b9052928252603a600c8301205f838301819052602080850182905293819052908152928f01909152812092945090925080611d1c838a8787612ce1565b91509150611d48611d2c8361157c565b611d358361157c565b6001600160801b031660809190911b1790565b995050505050505f84600f0b1215611db157805115611d8457600283810b5f90815260048a016020526040812081815560018101829055909101555b806040015115611db157600282810b5f90815260048a016020526040812081815560018101829055909101555b5082600f0b5f14611ebe5786545f80611dcd8360a01c60020b90565b6001600160a01b038416915091508460020b8260020b1215611e1c57611e15611e0f611e0a611dfb88612d9a565b611e0488612d9a565b8a613052565b611b32565b60801b90565b9750611eba565b8360020b8260020b1215611e9557611e53611e3d611e0a83611e0488612d9a565b611d35611e0a611e4c89612d9a565b858b61308a565b60038b0154909850611e6e906001600160801b0316876130b6565b60038b0180546001600160801b0319166001600160801b0392909216919091179055611eba565b611eb75f611d35611e0a611ea889612d9a565b611eb189612d9a565b8b61308a565b97505b5050505b5050509250929050565b5f608082811d9084901d01600f83810b9085900b01611ef2611ee983611b32565b611d3583611b32565b95945050505050565b5f806001600160a01b0388163303611f1757508390505f61200f565b8491505f86604001511315611fa357610400881615611f9e57611f8f338888888888604051602401611f4e96959493929190614be8565b60408051601f198184030181529190526020810180516001600160e01b0316625a2a8160e81b17905260028a1615155b6001600160a01b038b1691906130dd565b9050611f9b828261311e565b91505b61200f565b61010088161561200f57612000338888888888604051602401611fcb96959493929190614be8565b60408051601f198184030181529190526020810180516001600160e01b03166346d95b2960e11b17905260018a161515611f7e565b905061200c828261311e565b91505b965096945050505050565b815f528060020b60045260245ffd5b825f526001600160a01b0382166004526001600160a01b03811660245260445ffd5b5f6080831615801561205f57506008831615155b1561206b57505f6106cd565b6040831615801561207e57506004831615155b1561208a57505f6106cd565b610400831615801561209e57506002831615155b156120aa57505f6106cd565b61010083161580156120be57506001831615155b156120ca57505f6106cd565b6001600160a01b038316156120fb57613fff83161515806120f657506280000062ffffff831614610773565b610773565b5062ffffff16628000001415919050565b815f526001600160a01b03811660045260245ffd5b5f6280000062ffffff83160361213857505f919050565b6115988262ffffff166119ef565b84336001600160a01b03821614611b2a57612000861615611b2a57611874338686868660405160240161217d959493929190614c4f565b60408051601f198184030181529190526020810180516001600160e01b03166301a206c160e51b1790526001600160a01b03881690612979565b6002545f9081906001600160a01b0316156122e4577f00000000000000000000000000000000000000000000000000000000000000005a101561220457612204630f724b8160e11b611574565b6002546040517f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b0316905f90612246908790602401614c90565b60408051601f198184030181529190526020810180516001600160e01b031663553bfc3760e01b17815281519192505f918291829190828789f13d602014169550851561229d576040513d5f823e805191505f8152505b8580156122ae57508062ffffff1681145b80156122cb57506103e9610fff821610623e900062fff000831610165b6122d6575f806122da565b6001815b9096509450505050505b915091565b83545f906001600160a01b03161561230b5761230b637983c05160e01b611574565b6123148461313f565b905061233d82612337856123316001600160a01b0389168661342a565b90613445565b90612aa6565b909455509192915050565b85336001600160a01b03821614611874576110008716156118745761187233878787878760405160240161238196959493929190614c9e565b60408051601f198184030181529190526020810180516001600160e01b031663a910f80f60e01b1790526001600160a01b03891690612979565b6123c4826117dc565b8154611a2a9082613445565b6123f05f80516020614e8b8339815191525c6001600160a01b0316613460565b6117da576117da63996caf6560e01b611574565b5f6001600160a01b03821661241a575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561245c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106cd9190614ce7565b6001600160a01b0382165f80516020614e8b8339815191525d807f1e0745a7db1623981f0b2a5d4232364c00787266eb75ad546f190e6cebe9bd955d5050565b60208301515f806001600160a01b03881633036124df575f91506125d1565b60808816156125d1575f61253589338a8a8a8a604051602401612506959493929190614cfe565b60408051601f198184030181529190526020810180516001600160e01b03166315d7892d60e21b179052612979565b9050805160601461255057612550631e048e1d60e01b611574565b604088015162ffffff16628000000361256b57606081015191505b60088916156125cf57604081015192505f6125868460801d90565b905080600f0b5f146125cd575f85126125a3600f83900b87614d57565b9550806125b2575f86126125b6565b5f86135b156125cb576125cb637d05b8eb60e11b611574565b505b505b505b955095509592505050565b5f808080806125eb8988613471565b93509350935093505f831115612619576001600160a01b0386165f9081526001602052604090208054840190555b33887f40e9cecb9f5f1f1c5b9c97dec2917b7ee92e57ba5563708daca94dd84ad7112f6126468760801d90565b61265088600f0b90565b60408087015160a0880151606089015192516126b5959493908b90600f96870b81529490950b60208501526001600160a01b039290921660408401526001600160801b0316606083015260020b608082015262ffffff9190911660a082015260c00190565b60405180910390a35091979650505050505050565b5f806001600160a01b03891633036126e657508490505f6127e1565b5f6126f18460801d90565b90505f6126fe85600f0b90565b905060408b16156127785761276b611e0a338c8c8c8c8c60405160240161272a96959493929190614d7e565b60408051601f198184030181529190526020810180516001600160e01b031663b47b2fb160e01b17905260048e1615156001600160a01b038f1691906130dd565b6127759082614dde565b90505b5f81600f0b5f14158061278e575082600f0b5f14155b156127d957895160208b01515f13901515146127b9576001600160801b038316608083901b176127ca565b6001600160801b038216608084901b175b90506127d6898261311e565b98505b889450925050505b97509795505050505050565b336001600160a01b038416811480159061282c57506001600160a01b038085165f9081526003602090815260408083209385168352929052205460ff16155b156128a0576001600160a01b038085165f9081526005602090815260408083209385168352928152828220868352905220545f19811461289e5761287083826149e4565b6001600160a01b038087165f9081526005602090815260408083209387168352928152828220888352905220555b505b610842848484613b1e565b6001600160a01b038281165f90815290841660205260408120805c91906128d6600f85900b84614d57565b915081815d50935093915050565b5f80516020614eeb8339815191525c600181039050805f80516020614eeb8339815191525d50565b5f80516020614eeb8339815191525c600181019050805f80516020614eeb8339815191525d50565b3d60405183815282600482015260406024820152816044820152815f606483013e602080601f8401040260640191508181fd5b5f5f80516020614e8b8339815191525d565b60605f805f8451602086015f885af19050806129a0576129a063319d54c360e01b85612934565b6040519150601f19603f3d011682016040523d82523d5f602084013e6020825110806129ee575060208301516001600160e01b0319166129e1836020015190565b6001600160e01b03191614155b15612a0357612a03631e048e1d60e01b611574565b5092915050565b5f838302815f1985870982811083820303915050808411612a29575f80fd5b805f03612a3b57508290049050610773565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60d01b62ffffff60d01b1662ffffff60d01b19919091161790565b8060020b8260020b12612ae057612ae063c4433ed560e01b8383613b87565b620d89e719600283900b1215612b0157612b0163d5e2f7ab60e01b8361201a565b620d89e8600282900b13156111b3576111b363035aeeff60e31b8261201a565b600283900b5f908152600485016020526040812080548291906001600160801b0381169060801d612b5282886130b6565b6001600160801b03808216159084168015919091141596509094505f03612b9c57885460a01c60020b60020b8860020b13612b9c576001808a0154908401556002808a0154908401555b5f86612bb157612bac8883614dde565b612bbb565b612bbb8883614e0b565b90508060801b6001600160801b0386161784555050505094509492505050565b600291820b910b80820715612c085760405163d4d8f3e681528260208201528160408201526044601c8201fd5b80820591508160081d5f528260205260405f20600160ff84161b815418815550505050565b600282810b5f81815260048601602052604080822085850b83529082208754929485949293919260a09290921c900b90811215612c83578160010154836001015403945081600201548360020154039350612cd6565b8560020b8160020b12612caf578260010154826001015403945082600201548260020154039350612cd6565b81600101548360010154896001015403039450816002015483600201548960020154030393505b505050935093915050565b83545f9081906001600160801b0316600f86900b8203612d2057806001600160801b03165f03612d1b57612d1b632bbfae4960e21b611574565b612d46565b612d2a81876130b6565b87546001600160801b0319166001600160801b03919091161787555b612d6487600101548603826001600160801b0316600160801b612a0a565b9250612d8487600201548503826001600160801b0316600160801b612a0a565b6001880195909555505060029094015591929050565b60020b5f60ff82901d80830118620d89e8811115612dc357612dc36345c3193d60e11b8461201a565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b186002821615612dff576ffff97272373d413259a46990580e213a0260801c5b6004821615612e1e576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615612e3d576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615612e5c576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615612e7b576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615612e9a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615612eb9576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615612ed9576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615612ef9576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615612f19576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615612f39576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615612f59576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615612f79576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615612f99576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615612fb9576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615612fda576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615612ffa576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615613019576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615613036576b048a170391f7dc42444e8fa20260801c5b5f841315613042575f19045b63ffffffff0160201c9392505050565b5f8082600f0b126130795761307261306d8585856001613ba4565b613c67565b5f0361156c565b61156c61306d8585855f035f613ba4565b5f8082600f0b126130a55761307261306d8585856001613c80565b61156c61306d8585855f035f613c80565b6001600160801b038216600f82900b01608081901c156106cd576393dafdf15f526004601cfd5b5f806130e98585612979565b9050826130f9575f915050610773565b805160401461311257613112631e048e1d60e01b611574565b60400151949350505050565b5f608082811d9084901d03600f83810b9085900b03611ef2611ee983611b32565b5f73fffd8963efd1fc6a506488495d951d51639616826401000276a21983016001600160a01b0316111561317e5761317e6318521d4960e21b8361210c565b640100000000600160c01b03602083901b166001600160801b03811160071b81811c6001600160401b03811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061321157607f810383901c915061321b565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461341b57886001600160a01b031661340082612d9a565b6001600160a01b03161115613415578161341d565b8061341d565b815b9998505050505050505050565b60a01b62ffffff60a01b1662ffffff60a01b19919091161790565b60b81b62ffffff60b81b1662ffffff60b81b19919091161790565b5f6001600160a01b038216156106cd565b6040805160c0810182525f80825260208201819052918101829052606081018290526080810182905260a08101829052819081908554602086015160038801546001600160801b03165f826134ce57610fff60c485901c166134d8565b610fff60b885901c165b60408a81015187525f60208801526001600160a01b0386169087015260a085901c60020b606087015261ffff1690508261351657896002015461351c565b89600101545b6080868101919091526001600160801b03831660a08701528901515f9062400000166135515760d085901c62ffffff16613563565b6135638a6080015162ffffff16613ccc565b9050811561359157620f424062ffffff821661ffff8416818102838106151593900492909201910103613593565b805b60408b01519097505f13905062ffffff8716620f42401480156135b4575080155b156135c9576135c9634b10312360e11b611574565b89604001515f036135e4575f80985098505050505050613b15565b83156136625760608a01516001600160a01b03868116911610613623576136236001600160a01b0386165b60608c0151637c9c6e8f60e01b9190613cdb565b6401000276a36001600160a01b03168a606001516001600160a01b0316101561365d5760608a015161365d90639e4d7cc760e01b9061210c565b6136d3565b60608a01516001600160a01b0386811691161161368b5761368b6001600160a01b03861661360f565b73fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03168a606001516001600160a01b0316106136d35760608a01516136d390639e4d7cc760e01b9061210c565b6040805160e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525b8651158061373357508a606001516001600160a01b031687604001516001600160a01b0316145b613a1e5760408701516001600160a01b0316815260608701518b5161375d9160058f019188613d04565b1515604083015260020b60208201819052620d89e7191261378357620d89e71960208201525b620d89e860020b816020015160020b126137a157620d89e860208201525b6137ae8160200151612d9a565b6001600160a01b03908116606083810182905260408a0151908e01516137ef939192911680821891811160ff8a1618919091021860a08a01518a518c613ded565b60c085015260a084015260808301526001600160a01b03166040880152816138535761381e8160a00151613c67565b875103875260c0810151608082015161383a9161306d916149f7565b8760200181815161384b9190614e38565b90525061388e565b6138668160c00151826080015101613c67565b875101875260a081015161387990613c67565b8760200181815161388a9190614d57565b9052505b82156138ca575f620f4240848360c0015184608001510102816138b3576138b3614e57565b60c084018051929091049182900390529990990198505b60a08701516001600160801b031615613909576138fd8160c00151600160801b8960a001516001600160801b0316612a0a565b60808801805190910190525b80606001516001600160a01b031687604001516001600160a01b0316036139e3578060400151156139cb575f808661394a578d600101548960800151613955565b88608001518e600201545b915091505f6139a08f85602001518585600292830b5f90815260049094016020526040909320600181018054909203909155908101805490920390915554600160801b9004600f0b90565b905087156139ab575f035b6139b98a60a00151826130b6565b6001600160801b031660a08b01525050505b602081015160ff8616900360020b606088015261370c565b805f01516001600160a01b031687604001516001600160a01b031614613a1957613a10876040015161313f565b60020b60608801525b61370c565b613a568760400151613a3d89606001518961342a90919063ffffffff16565b6001600160a01b0319166001600160a01b039091161790565b8c5560a08701516001600160801b03858116911614613a965760a087015160038d0180546001600160801b0319166001600160801b039092169190911790555b84613aaa57608087015160028d0155613ab5565b608087015160018d01555b81151585151514613ae957613ae2613ad08860200151611b32565b611d35895f01518e6040015103611b32565b9950613b0e565b613b0b613afe885f01518d6040015103611b32565b611d358960200151611b32565b99505b5050505050505b92959194509250565b6001600160a01b0383165f90815260046020908152604080832085845290915281208054839290613b509084906149e4565b9091555050604080513381526020810183905283915f916001600160a01b038716915f80516020614eab833981519152910161178d565b6040518381528260020b60048201528160020b6024820152604481fd5b5f836001600160a01b0316856001600160a01b03161115613bc3579293925b6001600160a01b038516613bdd5762bfc9215f526004601cfd5b600160601b600160e01b03606084901b166001600160a01b038686031683613c3057866001600160a01b0316613c1d8383896001600160a01b0316612a0a565b81613c2a57613c2a614e57565b04613c5c565b613c5c613c478383896001600160a01b0316613f73565b886001600160a01b0316808204910615150190565b979650505050505050565b805f811215610a0257610a026393dafdf160e01b611574565b5f6001600160a01b038481169086160360ff81901d90810118600160601b6001600160801b038516613cb3818484612a0a565b9350845f83858409111684019350505050949350505050565b62bfffff8116610a02816119ef565b6040518381526001600160a01b03831660048201526001600160a01b0382166024820152604481fd5b5f80600284810b9086900b8181078313919005038315613d7f57600281900b60081d600181810b5f90815260208a905260409020545f1960ff85168381019390931b01908116801515955085613d6157888360ff16860302613d74565b88613d6b82613fa3565b840360ff168603025b965050505050613de3565b6001908101600281900b60081d80830b5f90815260208a905260409020545f1960ff841694851b011990811680151595509293919285613dc957888360ff0360ff16860102613ddc565b8883613dd483614033565b0360ff168601025b9650505050505b5094509492505050565b5f80808062ffffff85166001600160a01b03808a16908b1610158288128015613ee6575f613e268a5f0385620f424003620f4240612a0a565b905082613e3f57613e3a8d8d8d6001613c80565b613e4c565b613e4c8c8e8d6001613ba4565b9650868110613e80578b9750620f42408414613e7757613e72878586620f424003613f73565b613e79565b865b9450613ebc565b613e8c8d8c83866140ce565b975082613ea557613ea08d898d6001613c80565b613eb2565b613eb2888e8d6001613ba4565b9650868a5f030394505b82613ed257613ecd8d898d5f613ba4565b613ede565b613ede888e8d5f613c80565b955050613f64565b81613efc57613ef78c8c8c5f613ba4565b613f08565b613f088b8d8c5f613c80565b9450848910613f19578a9650613f2b565b889450613f288c8b878561411c565b96505b81613f4257613f3d8c888c6001613c80565b613f4f565b613f4f878d8c6001613ba4565b9550613f61868485620f424003613f73565b93505b50505095509550955095915050565b5f613f7f848484612a0a565b90508180613f8f57613f8f614e57565b838509156107735760010180610773575f80fd5b5f808211613faf575f80fd5b507f0706060506020504060203020504030106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be831560081b6001600160801b03851160071b1784811c6001600160401b031060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b5f80821161403f575f80fd5b507e1f0d1e100c1d070f090b19131c1706010e11080a1a141802121b150316040581196001019091166101e07f804040554300526644320000502061067405302602000010750620017611707760fc7fb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff840260f81c161b60f71c1690811c63d76453e004601f169190911a1790565b5f6001600160801b038416156001600160a01b0386161517156140f857634f2461b85f526004601cfd5b8161410f5761410a858585600161415f565b611ef2565b611ef2858585600161424a565b5f6001600160801b038416156001600160a01b03861615171561414657634f2461b85f526004601cfd5b816141575761410a8585855f61424a565b611ef28585855f5b5f81156141cf575f6001600160a01b038411156141935761418e84600160601b876001600160801b0316612a0a565b6141aa565b6141aa6001600160801b038616606086901b614e6b565b90506141c76141c2826001600160a01b0389166149f7565b61432c565b91505061156c565b5f6001600160a01b038411156141fc576141f784600160601b876001600160801b0316613f73565b614219565b614219606085901b6001600160801b038716808204910615150190565b9050806001600160a01b0387161161423857634323a5555f526004601cfd5b6001600160a01b03861603905061156c565b5f825f0361425957508361156c565b600160601b600160e01b03606085901b1682156142eb576001600160a01b0386168481029085828161428d5761428d614e57565b04036142bd578181018281106142bb576142b183896001600160a01b031683613f73565b935050505061156c565b505b506141c781856142d66001600160a01b038a1683614e6b565b6142e091906149f7565b808204910615150190565b6001600160a01b0386168481029085820414818311166143125763f5c787f15f526004601cfd5b8082036142b16141c2846001600160a01b038b1684613f73565b806001600160a01b0381168114610a0257610a026393dafdf160e01b611574565b6001600160a01b03811681146117fd575f80fd5b5f8060408385031215614372575f80fd5b823561437d8161434d565b946020939093013593505050565b5f6020828403121561439b575f80fd5b81356001600160e01b031981168114610773575f80fd5b5f805f606084860312156143c4575f80fd5b83356143cf8161434d565b95602085013595506040909401359392505050565b5f805f606084860312156143f6575f80fd5b83356144018161434d565b925060208401356144118161434d565b929592945050506040919091013590565b5f60208284031215614432575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561446f5761446f614439565b60405290565b604051601f8201601f191681016001600160401b038111828210171561449d5761449d614439565b604052919050565b803562ffffff81168114610a02575f80fd5b8035600281900b8114610a02575f80fd5b5f60a082840312156144d8575f80fd5b60405160a081016001600160401b03811182821017156144fa576144fa614439565b604052905080823561450b8161434d565b8152602083013561451b8161434d565b602082015261452c604084016144a5565b604082015261453d606084016144b7565b606082015260808301356145508161434d565b6080919091015292915050565b5f8083601f84011261456d575f80fd5b5081356001600160401b03811115614583575f80fd5b60208301915083602082850101111561459a575f80fd5b9250929050565b5f805f805f61010086880312156145b6575f80fd5b6145c087876144c8565b945060a0860135935060c0860135925060e08601356001600160401b038111156145e8575f80fd5b6145f48882890161455d565b969995985093965092949392505050565b5f60208284031215614615575f80fd5b81356107738161434d565b5f8060408385031215614631575f80fd5b50508035926020909101359150565b602080825282518282018190525f918401906040840190835b81811015614677578351835260209384019390920191600101614659565b509095945050505050565b5f8060208385031215614693575f80fd5b82356001600160401b038111156146a8575f80fd5b6146b48582860161455d565b90969095509350505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f8060c08385031215614706575f80fd5b61471084846144c8565b915061471e60a084016144a5565b90509250929050565b80358015158114610a02575f80fd5b5f8060408385031215614747575f80fd5b82356147528161434d565b915061471e60208401614727565b5f805f80848603610140811215614775575f80fd5b61477f87876144c8565b94506080609f1982011215614792575f80fd5b5061479b61444d565b6147a760a087016144b7565b81526147b560c087016144b7565b602082015260e08601356040820152610100860135606082015292506101208501356001600160401b038111156147ea575f80fd5b6147f68782880161455d565b95989497509550505050565b5f805f8060e08587031215614815575f80fd5b61481f86866144c8565b935060a085013561482f8161434d565b925060c08501356001600160401b038111156147ea575f80fd5b5f806020838503121561485a575f80fd5b82356001600160401b0381111561486f575f80fd5b8301601f8101851361487f575f80fd5b80356001600160401b03811115614894575f80fd5b8560208260051b84010111156148a8575f80fd5b6020919091019590945092505050565b5f80604083850312156148c9575f80fd5b82356148d48161434d565b915060208301356148e48161434d565b809150509250929050565b5f805f80848603610120811215614904575f80fd5b61490e87876144c8565b94506060609f1982011215614921575f80fd5b50604051606081016001600160401b038111828210171561494457614944614439565b60405261495360a08701614727565b815260c0860135602082015260e086013561496d8161434d565b604082015292506101008501356001600160401b038111156147ea575f80fd5b5f805f80608085870312156149a0575f80fd5b84356149ab8161434d565b935060208501356149bb8161434d565b93969395505050506040820135916060013590565b634e487b7160e01b5f52601160045260245ffd5b818103818111156106cd576106cd6149d0565b808201808211156106cd576106cd6149d0565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b602081525f61156c602083018486614a0a565b5f60208284031215614a55575f80fd5b81516001600160401b03811115614a6a575f80fd5b8201601f81018413614a7a575f80fd5b80516001600160401b03811115614a9357614a93614439565b614aa6601f8201601f1916602001614475565b818152856020838501011115614aba575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b5f81600f0b60016001607f1b03198103614af357614af36149d0565b5f0392915050565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff169084015260608083015160020b9084015260809182015116910152565b6001600160a01b0387168152614b576020820187614afb565b8460c08201528360e08201526101206101008201525f614b7c61012083018486614a0a565b98975050505050505050565b6001600160a01b0386168152614ba16020820186614afb565b8351600290810b60c08301526020850151900b60e0820152604084015161010082015260608401516101208201526101606101408201525f613c5c61016083018486614a0a565b6001600160a01b0387168152614c016020820187614afb565b8451600290810b60c08301526020860151900b60e082015260408501516101008201526060850151610120820152836101408201526101806101608201525f614b7c61018083018486614a0a565b6001600160a01b0386168152614c686020820186614afb565b6001600160a01b03841660c082015261010060e082018190525f90613c5c9083018486614a0a565b60a081016106cd8284614afb565b6001600160a01b0387168152614cb76020820187614afb565b60018060a01b03851660c08201528360020b60e08201526101206101008201525f614b7c61012083018486614a0a565b5f60208284031215614cf7575f80fd5b5051919050565b6001600160a01b0386168152614d176020820186614afb565b8351151560c0820152602084015160e082015260408401516001600160a01b03166101008201526101406101208201525f613c5c61014083018486614a0a565b8082018281125f831280158216821582161715614d7657614d766149d0565b505092915050565b6001600160a01b0387168152614d976020820187614afb565b8451151560c0820152602085015160e082015260408501516001600160a01b0316610100820152836101208201526101606101408201525f614b7c61016083018486614a0a565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106cd576106cd6149d0565b600f82810b9082900b0360016001607f1b0319811260016001607f1b03821317156106cd576106cd6149d0565b8181035f831280158383131683831282161715612a0357612a036149d0565b634e487b7160e01b5f52601260045260245ffd5b5f82614e8557634e487b7160e01b5f52601260045260245ffd5b50049056fe27e098c505d44ec3574004bca052aabf76bd35004c182099d8c575fb238593b91b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac728859c090fc4683624cfc3884e9d8de5eca132f2d0ec062aff75d43c0465d5ceeab237d4b3164c6e45b97e7d87b7125a44c5828d005af88f9d751cfd78729c5d99a0ba2646970667358221220b028c1e0e32c7daecf984a373142fe8aab46aae56a8819ec404e0d16141d666b64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01\xE5W_5`\xE0\x1C\x80cZk\xCF\xDA\x11a\x01\x08W\x80c\xA5\x84\x11\x94\x11a\0\x9DW\x80c\xF15\xBA\xAA\x11a\0mW\x80c\xF15\xBA\xAA\x14a\x06\x02W\x80c\xF2\xFD\xE3\x8B\x14a\x06!W\x80c\xF3\xCD\x91L\x14a\x06@W\x80c\xF5)\x8A\xCA\x14a\x06_W\x80c\xFE\x99\x04\x9A\x14a\x06~W_\x80\xFD[\x80c\xA5\x84\x11\x94\x14a\x05lW\x80c\xB66<\xF2\x14a\x05\x8BW\x80c\xDB\xD05\xFF\x14a\x05\xC4W\x80c\xF0-\xE3\xB2\x14a\x05\xE3W_\x80\xFD[\x80c\x81a\xB8t\x11a\0\xD8W\x80c\x81a\xB8t\x14a\x04\xCDW\x80c\x8D\xA5\xCB[\x14a\x04\xECW\x80c\x97\xE8\xCDN\x14a\x05\"W\x80c\x9B\xF6d_\x14a\x05MW_\x80\xFD[\x80cZk\xCF\xDA\x14a\x04)W\x80ci\\[\xF5\x14a\x04]W\x80c~\x87\xCE}\x14a\x04\x8FW\x80c\x80\xF0\xB4L\x14a\x04\xAEW_\x80\xFD[\x80c-w\x13\x89\x11a\x01~W\x80cH\xC8\x94\x91\x11a\x01NW\x80cH\xC8\x94\x91\x14a\x03\x83W\x80cRu\x96Q\x14a\x03\xAFW\x80cU\x8Ar\x97\x14a\x03\xCEW\x80cY\x8A\xF9\xE7\x14a\x03\xEDW_\x80\xFD[\x80c-w\x13\x89\x14a\x03\x06W\x80c5\xFDc\x1A\x14a\x03%W\x80c=\xD4Z\xDB\x14a\x03QW\x80cBj\x84\x93\x14a\x03dW_\x80\xFD[\x80c\x11\xDA`\xB4\x11a\x01\xB9W\x80c\x11\xDA`\xB4\x14a\x02\xA1W\x80c\x15n)\xF6\x14a\x02\xA9W\x80c\x1E.\xAE\xAF\x14a\x02\xC8W\x80c#Bf\xD7\x14a\x02\xE7W_\x80\xFD[\x80b\xFD\xD5\x8E\x14a\x01\xE9W\x80c\x01\xFF\xC9\xA7\x14a\x022W\x80c\t[\xCD\xB6\x14a\x02aW\x80c\x0B\r\x9C\t\x14a\x02\x80W[_\x80\xFD[4\x80\x15a\x01\xF4W_\x80\xFD[Pa\x02\x1Fa\x02\x036`\x04aCaV[`\x04` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02=W_\x80\xFD[Pa\x02Qa\x02L6`\x04aC\x8BV[a\x06\x9DV[`@Q\x90\x15\x15\x81R` \x01a\x02)V[4\x80\x15a\x02lW_\x80\xFD[Pa\x02Qa\x02{6`\x04aC\xB2V[a\x06\xD3V[4\x80\x15a\x02\x8BW_\x80\xFD[Pa\x02\x9Fa\x02\x9A6`\x04aC\xE4V[a\x07zV[\0[a\x02\x1Fa\x07\xCBV[4\x80\x15a\x02\xB4W_\x80\xFD[Pa\x02\x9Fa\x02\xC36`\x04aC\xB2V[a\x07\xFDV[4\x80\x15a\x02\xD3W_\x80\xFD[Pa\x02\x1Fa\x02\xE26`\x04aD\"V[a\x08HV[4\x80\x15a\x02\xF2W_\x80\xFD[Pa\x02\x1Fa\x03\x016`\x04aE\xA1V[a\x08RV[4\x80\x15a\x03\x11W_\x80\xFD[Pa\x02\x9Fa\x03 6`\x04aF\x05V[a\t\x02V[4\x80\x15a\x030W_\x80\xFD[Pa\x03Da\x03?6`\x04aF V[a\t\x98V[`@Qa\x02)\x91\x90aF@V[a\x02\x1Fa\x03_6`\x04aF\x05V[a\t\xD5V[4\x80\x15a\x03oW_\x80\xFD[Pa\x02Qa\x03~6`\x04aC\xB2V[a\n\x07V[4\x80\x15a\x03\x8EW_\x80\xFD[Pa\x03\xA2a\x03\x9D6`\x04aF\x82V[a\nkV[`@Qa\x02)\x91\x90aF\xC0V[4\x80\x15a\x03\xBAW_\x80\xFD[Pa\x02\x9Fa\x03\xC96`\x04aF\xF5V[a\x0B.V[4\x80\x15a\x03\xD9W_\x80\xFD[Pa\x02Qa\x03\xE86`\x04aG6V[a\x0B\x9DV[4\x80\x15a\x03\xF8W_\x80\xFD[Pa\x02\x1Fa\x04\x076`\x04aC\xE4V[`\x05` \x90\x81R_\x93\x84R`@\x80\x85 \x82R\x92\x84R\x82\x84 \x90R\x82R\x90 T\x81V[4\x80\x15a\x044W_\x80\xFD[Pa\x04Ha\x04C6`\x04aG`V[a\x0C\x0CV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x02)V[4\x80\x15a\x04hW_\x80\xFD[Pa\x04|a\x04w6`\x04aH\x02V[a\r\x9FV[`@Q`\x02\x91\x90\x91\x0B\x81R` \x01a\x02)V[4\x80\x15a\x04\x9AW_\x80\xFD[Pa\x02\x9Fa\x04\xA96`\x04aF\xF5V[a\x0F\x8EV[4\x80\x15a\x04\xB9W_\x80\xFD[Pa\x02\x9Fa\x04\xC86`\x04aCaV[a\x10@V[4\x80\x15a\x04\xD8W_\x80\xFD[Pa\x02\x1Fa\x04\xE76`\x04aC\xE4V[a\x10\xB3V[4\x80\x15a\x04\xF7W_\x80\xFD[P_Ta\x05\n\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x02)V[4\x80\x15a\x05-W_\x80\xFD[Pa\x02\x1Fa\x05<6`\x04aF\x05V[`\x01` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x05XW_\x80\xFD[Pa\x03Da\x05g6`\x04aHIV[a\x11BV[4\x80\x15a\x05wW_\x80\xFD[Pa\x02\x9Fa\x05\x866`\x04aF\x05V[a\x11{V[4\x80\x15a\x05\x96W_\x80\xFD[Pa\x02Qa\x05\xA56`\x04aH\xB8V[`\x03` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T`\xFF\x16\x81V[4\x80\x15a\x05\xCFW_\x80\xFD[Pa\x03Da\x05\xDE6`\x04aHIV[a\x11\xB7V[4\x80\x15a\x05\xEEW_\x80\xFD[P`\x02Ta\x05\n\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x06\rW_\x80\xFD[Pa\x02\x1Fa\x06\x1C6`\x04aD\"V[a\x11\xEEV[4\x80\x15a\x06,W_\x80\xFD[Pa\x02\x9Fa\x06;6`\x04aF\x05V[a\x11\xF8V[4\x80\x15a\x06KW_\x80\xFD[Pa\x02\x1Fa\x06Z6`\x04aH\xEFV[a\x12\x8AV[4\x80\x15a\x06jW_\x80\xFD[Pa\x02\x9Fa\x06y6`\x04aC\xB2V[a\x13\xD0V[4\x80\x15a\x06\x89W_\x80\xFD[Pa\x02Qa\x06\x986`\x04aI\x8DV[a\x14\x15V[_c\x01\xFF\xC9\xA7`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x14\x80a\x06\xCDWPc\x0Fc/\xB3`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x14[\x92\x91PPV[3_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 \x80T\x83\x91\x90\x83\x90a\x06\xFE\x90\x84\x90aI\xE4V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x81 \x80T\x84\x92\x90a\x075\x90\x84\x90aI\xF7V[\x90\x91UPP`@\x80Q3\x80\x82R` \x82\x01\x85\x90R\x85\x92`\x01`\x01`\xA0\x1B\x03\x88\x16\x92_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01[`@Q\x80\x91\x03\x90\xA4P`\x01[\x93\x92PPPV[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x07\x9DWa\x07\x9DcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x07\xB2\x83a\x07\xAA\x83a\x15|V[_\x033a\x15\x9CV[a\x07\xC6`\x01`\x01`\xA0\x1B\x03\x84\x16\x83\x83a\x15\xEFV[PPPV[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\x07\xEFWa\x07\xEFcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x07\xF83a\x16\x85V[\x90P\x90V[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x08 Wa\x08 cT\xE3\xCA\r`\xE0\x1Ba\x15tV[\x81a\x08.\x81a\x07\xAA\x84a\x15|V[a\x08B\x84`\x01`\x01`\xA0\x1B\x03\x83\x16\x84a\x17(V[PPPPV[_\x81T_R` _\xF3[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\x08vWa\x08vcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x08~a\x17\x9AV[_a\x08\x9Da\x08\x8D\x88`\xA0\x90 \x90V[_\x90\x81R`\x06` R`@\x90 \x90V[\x90Pa\x08\xA8\x81a\x17\xDCV[`\x80\x87\x01Qa\x08\xC4\x90`\x01`\x01`\xA0\x1B\x03\x16\x88\x88\x88\x88\x88a\x18\0V[a\x08\xCF\x81\x87\x87a\x18}V[\x91Pa\x08\xDC\x87\x833a\x190V[`\x80\x87\x01Qa\x08\xF8\x90`\x01`\x01`\xA0\x1B\x03\x16\x88\x88\x88\x88\x88a\x19XV[P\x95\x94PPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\tOW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15S\x90UU\x12\x13\xD4\x92V\x91Q`\xA2\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x7F\xB4\xBD\x8E\xF5=\xF6\x90\xB9\x94=3\x18\x99`\x06\xDB\xB8*%\xF5G\x19\xD8\xC8\x03[Qj*[\x8A\xCC\x90_\x90\xA2PV[```@Q\x80\x83`\x05\x1B` \x83R\x84` \x84\x01R`@\x83\x01\x92P\x80\x83\x01\x90P[\x85T\x83R` \x83\x01\x92P`\x01\x86\x01\x95P\x80\x83\x10a\t\xB8W\x81\x81\x03\x82\xF3[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\t\xF9Wa\t\xF9cT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x06\xCD\x82a\x16\x85V[\x91\x90PV[3_\x81\x81R`\x05` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x88\x16\x80\x85R\x90\x83R\x81\x84 \x87\x85R\x90\x92R\x80\x83 \x85\x90UQ\x91\x92\x85\x92\x7F\xB3\xFDPq\x83X\x87Vz\x06q\x15\x11!\x89M\xDC\xCC(B\xF1\xD1\x0B\xED\xAD\x13\xE0\xD1|\xAC\xE9\xA7\x90a\x07g\x90\x87\x81R` \x01\x90V[``_\x80Q` aN\xCB\x839\x81Q\x91R\\\x15a\n\x91Wa\n\x91c(Hkc`\xE1\x1Ba\x15tV[a\n\x99a\x19\xCAV[`@QcH\xEE\xB9\xA3`\xE1\x1B\x81R3\x90c\x91\xDDsF\x90a\n\xBE\x90\x86\x90\x86\x90`\x04\x01aJ2V[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n\xD9W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0B\0\x91\x90\x81\x01\x90aJEV[\x90P_\x80Q` aN\xEB\x839\x81Q\x91R\\\x15a\x0B&Wa\x0B&cR\x12\xCB\xA1`\xE0\x1Ba\x15tV[a\x06\xCDa\x19\xDDV[`@\x82\x01Qb\xFF\xFF\xFF\x16b\x80\0\0\x14\x15\x80a\x0B_WP\x81`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x0BtWa\x0Btc0\xD2\x16A`\xE0\x1Ba\x15tV[a\x0B\x82\x81b\xFF\xFF\xFF\x16a\x19\xEFV[`\xA0\x82 _\x81\x81R`\x06` R`@\x90 a\x07\xC6\x90\x83a\x1A\x15V[3_\x81\x81R`\x03` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x87\x16\x80\x85R\x90\x83R\x81\x84 \x80T`\xFF\x19\x16\x87\x15\x15\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x92\x93\x91\x7F\xCE\xB5v\xD9\xF1^N \x0F\xDBP\x96\xD6M]\xFDf~\x16\xDE\xF2\x0C\x1E\xEF\xD1BV\xD8\xE3\xFA\xA2g\x91\x01`@Q\x80\x91\x03\x90\xA3P`\x01\x92\x91PPV[_\x80_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x0C1Wa\x0C1cT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x0C9a\x17\x9AV[`\xA0\x86 _\x81\x81R`\x06` R`@\x90 a\x0CS\x81a\x17\xDCV[`\x80\x88\x01Qa\x0Cn\x90`\x01`\x01`\xA0\x1B\x03\x16\x89\x89\x89\x89a\x1A0V[_a\x0C\xD5`@Q\x80`\xC0\x01`@R\x803`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A_\x01Q`\x02\x0B\x81R` \x01\x8A` \x01Q`\x02\x0B\x81R` \x01a\x0C\xB2\x8B`@\x01Qa\x1B2V[`\x0F\x0B\x81R``\x80\x8D\x01Q`\x02\x0B` \x83\x01R\x8B\x01Q`@\x90\x91\x01R\x83\x90a\x1BNV[\x94P\x90Pa\x0C\xE3\x81\x85a\x1E\xC8V[\x94P3`\x01`\x01`\xA0\x1B\x03\x16\x83\x7FT\x1C\x04\x1C,\xCEH\xE6\x14\xB3\xDE\x04<\x92\x80\xF0kad\xC0\xA1t\x16I\xE2\xDE<=7_yt\x8A_\x01Q\x8B` \x01Q\x8C`@\x01Q`@Qa\rG\x93\x92\x91\x90`\x02\x93\x84\x0B\x81R\x91\x90\x92\x0B` \x82\x01R`@\x81\x01\x91\x90\x91R``\x01\x90V[`@Q\x80\x91\x03\x90\xA3`\x80\x89\x01Q_\x90a\rm\x90`\x01`\x01`\xA0\x1B\x03\x16\x8B\x8B\x89\x8C\x8Ca\x1E\xFBV[\x90\x96P\x90P\x80\x15a\r\x87Wa\r\x87\x8A\x82\x8C`\x80\x01Qa\x190V[a\r\x92\x8A\x873a\x190V[PPPP\x94P\x94\x92PPPV[_a\r\xA8a\x17\x9AV[``\x85\x01Qa\x7F\xFF`\x02\x91\x90\x91\x0B\x13\x15a\r\xD3W``\x85\x01Qa\r\xD3\x90c\x16\xE0\x04\x9F`\xE3\x1B\x90a \x1AV[`\x01`\x02\x0B\x85``\x01Q`\x02\x0B\x12\x15a\r\xFDW``\x85\x01Qa\r\xFD\x90c\x1D= \xB1`\xE3\x1B\x90a \x1AV[\x84Q` \x86\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x16\x10a\x0E/W\x84Q` \x86\x01Qa\x0E/\x91c\x06\xE6\xC9\x83`\xE4\x1B\x91a )V[a\x0ES\x85`@\x01Q\x86`\x80\x01Q`\x01`\x01`\xA0\x1B\x03\x16a K\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x0EnW`\x80\x85\x01Qa\x0En\x90c\x072\xD7\xB5`\xE5\x1B\x90a!\x0CV[_a\x0E\x81\x86`@\x01Qb\xFF\xFF\xFF\x16a!!V[`\x80\x87\x01Q\x90\x91Pa\x0E\x9F\x90`\x01`\x01`\xA0\x1B\x03\x16\x87\x87\x87\x87a!FV[`\xA0\x86 _a\x0E\xAD\x88a!\xB7V[_\x84\x81R`\x06` R`@\x90 \x90\x92Pa\x0E\xCA\x91P\x88\x83\x86a\"\xE9V[`\x80\x89\x01Q\x90\x94Pa\x0E\xE9\x90`\x01`\x01`\xA0\x1B\x03\x16\x89\x89\x87\x8A\x8Aa#HV[\x87` \x01Q`\x01`\x01`\xA0\x1B\x03\x16\x88_\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x83\x7F\xDDFngN\xA5W\xF5b\x95\xE2\xD0!\x8A\x12^\xA4\xB4\xF0\xF6\xF30{\x95\xF8^a\x10\x83\x8Dd8\x8B`@\x01Q\x8C``\x01Q\x8D`\x80\x01Q\x8D\x8B`@Qa\x0F{\x95\x94\x93\x92\x91\x90b\xFF\xFF\xFF\x95\x90\x95\x16\x85R`\x02\x93\x84\x0B` \x86\x01R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`@\x86\x01R\x91\x16``\x84\x01R\x90\x0B`\x80\x82\x01R`\xA0\x01\x90V[`@Q\x80\x91\x03\x90\xA4PPP\x94\x93PPPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0F\xB0Wa\x0F\xB0cH\xF5\xC3\xED`\xE0\x1Ba\x15tV[a\x03\xE9a\x0F\xFF\x82\x16\x10b>\x90\0b\xFF\xF0\0\x83\x16\x10\x16a\x0F\xDFWa\x0F\xDFc\xA7\xAB\xE2\xF7`\xE0\x1Bb\xFF\xFF\xFF\x83\x16a!\x0CV[`\xA0\x82 a\x10\x01\x82a\x0F\xFB\x83_\x90\x81R`\x06` R`@\x90 \x90V[\x90a#\xBBV[`@Qb\xFF\xFF\xFF\x83\x16\x81R\x81\x90\x7F\xE9\xC4%\x93\xE7\x1F\x84@;\x845,\xD1h\xD6\x93\xE2\xC9\xFC\xD1\xFD\xBC\xC3\xFE\xB2\x1D\x92\xB4>f\x96\xF9\x90` \x01`@Q\x80\x91\x03\x90\xA2PPPV[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x10cWa\x10ccT\xE3\xCA\r`\xE0\x1Ba\x15tV[3_\x90\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16` R`@\x81 \\\x90a\x10\x84\x83a\x15|V[\x90P\x81\x81`\x0F\x0B\x14a\x10\xA0Wa\x10\xA0c\xBD\xA7:\xBF`\xE0\x1Ba\x15tV[a\x08B\x84a\x10\xAD\x83aJ\xD7V[3a\x15\x9CV[`\x02T_\x90`\x01`\x01`\xA0\x1B\x03\x163\x14a\x10\xD7Wa\x10\xD7cH\xF5\xC3\xED`\xE0\x1Ba\x15tV[\x81\x15a\x10\xE3W\x81a\x10\xFCV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x01` R`@\x90 T[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x01` R`@\x81 \x80T\x92\x93P\x83\x92\x90\x91\x90a\x11(\x90\x84\x90aI\xE4V[\x90\x91UPa\x07s\x90P`\x01`\x01`\xA0\x1B\x03\x84\x16\x85\x83a\x15\xEFV[```@Q\x80` \x82R\x83` \x83\x01R`@\x82\x01\x91P\x83`\x05\x1B\x82\x01\x85[\x805\\\x84R` \x93\x84\x01\x93\x01\x81\x84\x10a\x11`W[P\x81\x81\x03\x82\xF3[a\x11\x83a#\xD0V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x11\x94WPV[_a\x11\xA7\x82`\x01`\x01`\xA0\x1B\x03\x16a$\x04V[\x90Pa\x11\xB3\x82\x82a$\x80V[PPV[```@Q\x80` \x82R\x83` \x83\x01R`@\x82\x01\x91P\x83`\x05\x1B\x82\x01\x85[\x805T\x84R` \x93\x84\x01\x93\x01\x81\x84\x10\x15a\x11tWa\x11\xD5V[_\x81\\_R` _\xF3[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x12@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15S\x90UU\x12\x13\xD4\x92V\x91Q`\xA2\x1B`D\x82\x01R`d\x01a\tFV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[__\x80Q` aN\xCB\x839\x81Q\x91R\\a\x12\xAEWa\x12\xAEcT\xE3\xCA\r`\xE0\x1Ba\x15tV[a\x12\xB6a\x17\x9AV[\x83` \x01Q_\x03a\x12\xD1Wa\x12\xD1c\xBE\x8B\x85\x07`\xE0\x1Ba\x15tV[`\xA0\x85 _\x81\x81R`\x06` R`@\x90 a\x12\xEB\x81a\x17\xDCV[`\x80\x87\x01Q_\x90\x81\x90\x81\x90a\x13\x0C\x90`\x01`\x01`\xA0\x1B\x03\x16\x8B\x8B\x8B\x8Ba$\xC0V[\x80\x93P\x81\x95P\x82\x94PPPPa\x13{\x84\x86`@Q\x80`\xA0\x01`@R\x80\x8E``\x01Q`\x02\x0B\x81R` \x01\x8D_\x01Q\x15\x15\x81R` \x01\x86\x81R` \x01\x8D`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85b\xFF\xFF\xFF\x16\x81RP\x8C_\x01Qa\x13tW\x8D` \x01Qa%\xDCV[\x8DQa%\xDCV[`\x80\x8B\x01Q\x90\x96P_\x92Pa\x13\x9F\x91P`\x01`\x01`\xA0\x1B\x03\x16\x8A\x8A\x88\x8B\x8B\x88a&\xCAV[\x90\x95P\x90P\x80\x15a\x13\xB9Wa\x13\xB9\x89\x82\x8B`\x80\x01Qa\x190V[a\x13\xC4\x89\x863a\x190V[PPPP\x94\x93PPPPV[_\x80Q` aN\xCB\x839\x81Q\x91R\\a\x13\xF3Wa\x13\xF3cT\xE3\xCA\r`\xE0\x1Ba\x15tV[\x81a\x14\x01\x81a\x10\xAD\x84a\x15|V[a\x08B\x84`\x01`\x01`\xA0\x1B\x03\x83\x16\x84a'\xEDV[_3`\x01`\x01`\xA0\x1B\x03\x86\x16\x14\x80\x15\x90a\x14RWP`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90 T`\xFF\x16\x15[\x15a\x14\xC2W`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 3\x84R\x82R\x80\x83 \x86\x84R\x90\x91R\x90 T_\x19\x81\x14a\x14\xC0Wa\x14\x94\x83\x82aI\xE4V[`\x01`\x01`\xA0\x1B\x03\x87\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 3\x84R\x82R\x80\x83 \x88\x84R\x90\x91R\x90 U[P[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x81 \x80T\x84\x92\x90a\x14\xF4\x90\x84\x90aI\xE4V[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x81 \x80T\x84\x92\x90a\x15+\x90\x84\x90aI\xF7V[\x90\x91UPP`@\x80Q3\x81R` \x81\x01\x84\x90R\x84\x91`\x01`\x01`\xA0\x1B\x03\x80\x88\x16\x92\x90\x89\x16\x91_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01`@Q\x80\x91\x03\x90\xA4P`\x01[\x94\x93PPPPV[\x80_R`\x04_\xFD[_`\x01`\x7F\x1B\x82\x10a\x15\x98Wa\x15\x98c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[P\x90V[\x81`\x0F\x0B_\x03a\x15\xABWPPPV[_\x80a\x15\xC1`\x01`\x01`\xA0\x1B\x03\x86\x16\x84\x86a(\xABV[\x91P\x91P\x80_\x03a\x15\xD9Wa\x15\xD4a(\xE4V[a\x15\xE8V[\x81_\x03a\x15\xE8Wa\x15\xE8a)\x0CV[PPPPPV[_`\x01`\x01`\xA0\x1B\x03\x84\x16a\x16#W_\x80_\x80\x85\x87Z\xF1\x90P\x80a\x16\x1EWa\x16\x1Ec\x85I\xDBY`\xE0\x1B\x84a)4V[a\x08BV[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16`\x04\x82\x01R\x82`$\x82\x01R` _`D\x83_\x89Z\xF1=\x15`\x1F=\x11`\x01_Q\x14\x16\x17\x16\x91P_\x81R_` \x82\x01R_`@\x82\x01RP\x80a\x08BWa\x08Bc,K\x17\xE7`\xE2\x1B\x85a)4V[__\x80Q` aN\x8B\x839\x81Q\x91R\\`\x01`\x01`\xA0\x1B\x03\x81\x16a\x16\xABW4\x91Pa\x17\x0FV[4\x15a\x16\xC1Wa\x16\xC1c\x19\xD2E\xCF`\xE0\x1Ba\x15tV[\x7F\x1E\x07E\xA7\xDB\x16#\x98\x1F\x0B*]B26L\0xrf\xEBu\xADTo\x19\x0El\xEB\xE9\xBD\x95\\_a\x16\xF6`\x01`\x01`\xA0\x1B\x03\x84\x16a$\x04V[\x90Pa\x17\x02\x82\x82aI\xE4V[\x93Pa\x17\x0Ca)gV[PP[a\x17\"\x81a\x17\x1C\x84a\x15|V[\x85a\x15\x9CV[P\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 \x80T\x83\x92\x90a\x17Z\x90\x84\x90aI\xF7V[\x90\x91UPP`@\x80Q3\x81R` \x81\x01\x83\x90R\x83\x91`\x01`\x01`\xA0\x1B\x03\x86\x16\x91_\x91_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01[`@Q\x80\x91\x03\x90\xA4PPPV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x17\xDAWa\x17\xDAc\x06\xC4\xA1\xC7`\xE1\x1Ba\x15tV[V[\x80T`\x01`\x01`\xA0\x1B\x03\x16_\x03a\x17\xFDWa\x17\xFDcHj\xA3\x07`\xE0\x1Ba\x15tV[PV[\x853`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x18tW` \x87\x16\x15a\x18tWa\x18r3\x87\x87\x87\x87\x87`@Q`$\x01a\x188\x96\x95\x94\x93\x92\x91\x90aK>V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c[TX}`\xE1\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x89\x16\x90a)yV[P[PPPPPPPV[`\x03\x83\x01T_\x90`\x01`\x01`\x80\x1B\x03\x16\x80\x82\x03a\x18\xA4Wa\x18\xA4c\xA7O\x97\xAB`\xE0\x1Ba\x15tV[a\x18\xD2a\x18\xB0\x85a\x15|V[_\x03a\x18\xBB\x85a\x15|V[_\x03`\x80\x91\x90\x91\x1B`\x01`\x01`\x80\x1B\x03\x90\x91\x16\x17\x90V[\x91P\x83\x15a\x18\xFEWa\x18\xF2\x84`\x01`\x80\x1B\x83`\x01`\x01`\x80\x1B\x03\x16a*\nV[`\x01\x86\x01\x80T\x90\x91\x01\x90U[\x82\x15a\x19(Wa\x19\x1C\x83`\x01`\x80\x1B\x83`\x01`\x01`\x80\x1B\x03\x16a*\nV[`\x02\x86\x01\x80T\x90\x91\x01\x90U[P\x93\x92PPPV[\x82Qa\x19F\x90a\x19@\x84`\x80\x1D\x90V[\x83a\x15\x9CV[a\x07\xC6\x83` \x01Qa\x19@\x84`\x0F\x0B\x90V[\x853`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x18tW`\x10\x87\x16\x15a\x18tWa\x18r3\x87\x87\x87\x87\x87`@Q`$\x01a\x19\x90\x96\x95\x94\x93\x92\x91\x90aK>V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xE1\xB4\xAFi`\xE0\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x89\x16\x90a)yV[`\x01_\x80Q` aN\xCB\x839\x81Q\x91R]V[__\x80Q` aN\xCB\x839\x81Q\x91R]V[b\x0FB@b\xFF\xFF\xFF\x82\x16\x11\x15a\x17\xFDWa\x17\xFDc\x14\0!\x13`\xE0\x1Bb\xFF\xFF\xFF\x83\x16a!\x0CV[a\x1A\x1E\x82a\x17\xDCV[\x81Ta\x1A*\x90\x82a*\xA6V[\x90\x91UPV[\x843`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x1B*W_\x84`@\x01Q\x13\x80\x15a\x1AWWPa\x08\0\x86\x16\x15\x15[\x15a\x1A\xB8Wa\x1A\xB23\x86\x86\x86\x86`@Q`$\x01a\x1Ax\x95\x94\x93\x92\x91\x90aK\x88V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c%\x99\x82\xE5`\xE0\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x88\x16\x90a)yV[Pa\x1B*V[_\x84`@\x01Q\x13\x15\x80\x15a\x1A\xCFWPa\x02\0\x86\x16\x15\x15[\x15a\x1B*Wa\x18t3\x86\x86\x86\x86`@Q`$\x01a\x1A\xF0\x95\x94\x93\x92\x91\x90aK\x88V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x02\x1D\x0E\xE7`\xE4\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x88\x16\x90a)yV[PPPPPPV[\x80`\x0F\x81\x90\x0B\x81\x14a\n\x02Wa\n\x02c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[``\x81\x01Q` \x82\x01Q`@\x83\x01Q_\x92\x83\x92\x90\x91a\x1Bm\x82\x82a*\xC1V[`@\x80Q`\x80\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x91\x90\x91R\x83`\x0F\x0B_\x14a\x1C\xB2Wa\x1B\xA6\x88\x84\x86_a+!V[`\x01`\x01`\x80\x1B\x03\x16` \x83\x01R\x15\x15\x81Ra\x1B\xC5\x88\x83\x86`\x01a+!V[`\x01`\x01`\x80\x1B\x03\x16``\x83\x01R\x15\x15`@\x82\x01R_`\x0F\x85\x90\x0B\x12a\x1CwW_a\x1C\x15\x88`\x80\x01Q`\x02\x0Bb\r\x89\xE7\x19\x81\x90\x05\x81\x02b\r\x89\xE8\x82\x90\x05\x82\x02\x03\x05`\x01\x01`\x01`\x01`\x80\x1B\x03\x04\x90V[\x90P\x80`\x01`\x01`\x80\x1B\x03\x16\x82` \x01Q`\x01`\x01`\x80\x1B\x03\x16\x11\x15a\x1CFWa\x1CFc\xB8\xE3\xC3\x85`\xE0\x1B\x85a \x1AV[\x80`\x01`\x01`\x80\x1B\x03\x16\x82``\x01Q`\x01`\x01`\x80\x1B\x03\x16\x11\x15a\x1CuWa\x1Cuc\xB8\xE3\xC3\x85`\xE0\x1B\x84a \x1AV[P[\x80Q\x15a\x1C\x93W`\x80\x87\x01Qa\x1C\x93\x90`\x05\x8A\x01\x90\x85\x90a+\xDBV[\x80`@\x01Q\x15a\x1C\xB2W`\x80\x87\x01Qa\x1C\xB2\x90`\x05\x8A\x01\x90\x84\x90a+\xDBV[_\x80a\x1C\xBF\x8A\x86\x86a,-V[\x8AQ`\xA0\x8C\x01Q`@\x80Q`&\x81\x01\x92\x90\x92R`\x06\x80\x83\x01\x8A\x90R`\x03\x83\x01\x8B\x90R\x92\x82R`:`\x0C\x83\x01 _\x83\x83\x01\x81\x90R` \x80\x85\x01\x82\x90R\x93\x81\x90R\x90\x81R\x92\x8F\x01\x90\x91R\x81 \x92\x94P\x90\x92P\x80a\x1D\x1C\x83\x8A\x87\x87a,\xE1V[\x91P\x91Pa\x1DHa\x1D,\x83a\x15|V[a\x1D5\x83a\x15|V[`\x01`\x01`\x80\x1B\x03\x16`\x80\x91\x90\x91\x1B\x17\x90V[\x99PPPPPP_\x84`\x0F\x0B\x12\x15a\x1D\xB1W\x80Q\x15a\x1D\x84W`\x02\x83\x81\x0B_\x90\x81R`\x04\x8A\x01` R`@\x81 \x81\x81U`\x01\x81\x01\x82\x90U\x90\x91\x01U[\x80`@\x01Q\x15a\x1D\xB1W`\x02\x82\x81\x0B_\x90\x81R`\x04\x8A\x01` R`@\x81 \x81\x81U`\x01\x81\x01\x82\x90U\x90\x91\x01U[P\x82`\x0F\x0B_\x14a\x1E\xBEW\x86T_\x80a\x1D\xCD\x83`\xA0\x1C`\x02\x0B\x90V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x91P\x91P\x84`\x02\x0B\x82`\x02\x0B\x12\x15a\x1E\x1CWa\x1E\x15a\x1E\x0Fa\x1E\na\x1D\xFB\x88a-\x9AV[a\x1E\x04\x88a-\x9AV[\x8Aa0RV[a\x1B2V[`\x80\x1B\x90V[\x97Pa\x1E\xBAV[\x83`\x02\x0B\x82`\x02\x0B\x12\x15a\x1E\x95Wa\x1ESa\x1E=a\x1E\n\x83a\x1E\x04\x88a-\x9AV[a\x1D5a\x1E\na\x1EL\x89a-\x9AV[\x85\x8Ba0\x8AV[`\x03\x8B\x01T\x90\x98Pa\x1En\x90`\x01`\x01`\x80\x1B\x03\x16\x87a0\xB6V[`\x03\x8B\x01\x80T`\x01`\x01`\x80\x1B\x03\x19\x16`\x01`\x01`\x80\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ua\x1E\xBAV[a\x1E\xB7_a\x1D5a\x1E\na\x1E\xA8\x89a-\x9AV[a\x1E\xB1\x89a-\x9AV[\x8Ba0\x8AV[\x97P[PPP[PPP\x92P\x92\x90PV[_`\x80\x82\x81\x1D\x90\x84\x90\x1D\x01`\x0F\x83\x81\x0B\x90\x85\x90\x0B\x01a\x1E\xF2a\x1E\xE9\x83a\x1B2V[a\x1D5\x83a\x1B2V[\x95\x94PPPPPV[_\x80`\x01`\x01`\xA0\x1B\x03\x88\x163\x03a\x1F\x17WP\x83\x90P_a \x0FV[\x84\x91P_\x86`@\x01Q\x13\x15a\x1F\xA3Wa\x04\0\x88\x16\x15a\x1F\x9EWa\x1F\x8F3\x88\x88\x88\x88\x88`@Q`$\x01a\x1FN\x96\x95\x94\x93\x92\x91\x90aK\xE8V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16bZ*\x81`\xE8\x1B\x17\x90R`\x02\x8A\x16\x15\x15[`\x01`\x01`\xA0\x1B\x03\x8B\x16\x91\x90a0\xDDV[\x90Pa\x1F\x9B\x82\x82a1\x1EV[\x91P[a \x0FV[a\x01\0\x88\x16\x15a \x0FWa \x003\x88\x88\x88\x88\x88`@Q`$\x01a\x1F\xCB\x96\x95\x94\x93\x92\x91\x90aK\xE8V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cF\xD9[)`\xE1\x1B\x17\x90R`\x01\x8A\x16\x15\x15a\x1F~V[\x90Pa \x0C\x82\x82a1\x1EV[\x91P[\x96P\x96\x94PPPPPV[\x81_R\x80`\x02\x0B`\x04R`$_\xFD[\x82_R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04R`\x01`\x01`\xA0\x1B\x03\x81\x16`$R`D_\xFD[_`\x80\x83\x16\x15\x80\x15a _WP`\x08\x83\x16\x15\x15[\x15a kWP_a\x06\xCDV[`@\x83\x16\x15\x80\x15a ~WP`\x04\x83\x16\x15\x15[\x15a \x8AWP_a\x06\xCDV[a\x04\0\x83\x16\x15\x80\x15a \x9EWP`\x02\x83\x16\x15\x15[\x15a \xAAWP_a\x06\xCDV[a\x01\0\x83\x16\x15\x80\x15a \xBEWP`\x01\x83\x16\x15\x15[\x15a \xCAWP_a\x06\xCDV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a \xFBWa?\xFF\x83\x16\x15\x15\x80a \xF6WPb\x80\0\0b\xFF\xFF\xFF\x83\x16\x14a\x07sV[a\x07sV[Pb\xFF\xFF\xFF\x16b\x80\0\0\x14\x15\x91\x90PV[\x81_R`\x01`\x01`\xA0\x1B\x03\x81\x16`\x04R`$_\xFD[_b\x80\0\0b\xFF\xFF\xFF\x83\x16\x03a!8WP_\x91\x90PV[a\x15\x98\x82b\xFF\xFF\xFF\x16a\x19\xEFV[\x843`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x1B*Wa \0\x86\x16\x15a\x1B*Wa\x18t3\x86\x86\x86\x86`@Q`$\x01a!}\x95\x94\x93\x92\x91\x90aLOV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x01\xA2\x06\xC1`\xE5\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x88\x16\x90a)yV[`\x02T_\x90\x81\x90`\x01`\x01`\xA0\x1B\x03\x16\x15a\"\xE4W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Z\x10\x15a\"\x04Wa\"\x04c\x0FrK\x81`\xE1\x1Ba\x15tV[`\x02T`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91`\x01`\x01`\xA0\x1B\x03\x16\x90_\x90a\"F\x90\x87\x90`$\x01aL\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cU;\xFC7`\xE0\x1B\x17\x81R\x81Q\x91\x92P_\x91\x82\x91\x82\x91\x90\x82\x87\x89\xF1=` \x14\x16\x95P\x85\x15a\"\x9DW`@Q=_\x82>\x80Q\x91P_\x81RP[\x85\x80\x15a\"\xAEWP\x80b\xFF\xFF\xFF\x16\x81\x14[\x80\x15a\"\xCBWPa\x03\xE9a\x0F\xFF\x82\x16\x10b>\x90\0b\xFF\xF0\0\x83\x16\x10\x16[a\"\xD6W_\x80a\"\xDAV[`\x01\x81[\x90\x96P\x94PPPPP[\x91P\x91V[\x83T_\x90`\x01`\x01`\xA0\x1B\x03\x16\x15a#\x0BWa#\x0Bcy\x83\xC0Q`\xE0\x1Ba\x15tV[a#\x14\x84a1?V[\x90Pa#=\x82a#7\x85a#1`\x01`\x01`\xA0\x1B\x03\x89\x16\x86a4*V[\x90a4EV[\x90a*\xA6V[\x90\x94UP\x91\x92\x91PPV[\x853`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x18tWa\x10\0\x87\x16\x15a\x18tWa\x18r3\x87\x87\x87\x87\x87`@Q`$\x01a#\x81\x96\x95\x94\x93\x92\x91\x90aL\x9EV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x10\xF8\x0F`\xE0\x1B\x17\x90R`\x01`\x01`\xA0\x1B\x03\x89\x16\x90a)yV[a#\xC4\x82a\x17\xDCV[\x81Ta\x1A*\x90\x82a4EV[a#\xF0_\x80Q` aN\x8B\x839\x81Q\x91R\\`\x01`\x01`\xA0\x1B\x03\x16a4`V[a\x17\xDAWa\x17\xDAc\x99l\xAFe`\xE0\x1Ba\x15tV[_`\x01`\x01`\xA0\x1B\x03\x82\x16a$\x1AWPG\x91\x90PV[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x83\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a$\\W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xCD\x91\x90aL\xE7V[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x80Q` aN\x8B\x839\x81Q\x91R]\x80\x7F\x1E\x07E\xA7\xDB\x16#\x98\x1F\x0B*]B26L\0xrf\xEBu\xADTo\x19\x0El\xEB\xE9\xBD\x95]PPV[` \x83\x01Q_\x80`\x01`\x01`\xA0\x1B\x03\x88\x163\x03a$\xDFW_\x91Pa%\xD1V[`\x80\x88\x16\x15a%\xD1W_a%5\x893\x8A\x8A\x8A\x8A`@Q`$\x01a%\x06\x95\x94\x93\x92\x91\x90aL\xFEV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x15\xD7\x89-`\xE2\x1B\x17\x90Ra)yV[\x90P\x80Q``\x14a%PWa%Pc\x1E\x04\x8E\x1D`\xE0\x1Ba\x15tV[`@\x88\x01Qb\xFF\xFF\xFF\x16b\x80\0\0\x03a%kW``\x81\x01Q\x91P[`\x08\x89\x16\x15a%\xCFW`@\x81\x01Q\x92P_a%\x86\x84`\x80\x1D\x90V[\x90P\x80`\x0F\x0B_\x14a%\xCDW_\x85\x12a%\xA3`\x0F\x83\x90\x0B\x87aMWV[\x95P\x80a%\xB2W_\x86\x12a%\xB6V[_\x86\x13[\x15a%\xCBWa%\xCBc}\x05\xB8\xEB`\xE1\x1Ba\x15tV[P[P[P[\x95P\x95P\x95\x92PPPV[_\x80\x80\x80\x80a%\xEB\x89\x88a4qV[\x93P\x93P\x93P\x93P_\x83\x11\x15a&\x19W`\x01`\x01`\xA0\x1B\x03\x86\x16_\x90\x81R`\x01` R`@\x90 \x80T\x84\x01\x90U[3\x88\x7F@\xE9\xCE\xCB\x9F_\x1F\x1C[\x9C\x97\xDE\xC2\x91{~\xE9.W\xBAUcp\x8D\xAC\xA9M\xD8J\xD7\x11/a&F\x87`\x80\x1D\x90V[a&P\x88`\x0F\x0B\x90V[`@\x80\x87\x01Q`\xA0\x88\x01Q``\x89\x01Q\x92Qa&\xB5\x95\x94\x93\x90\x8B\x90`\x0F\x96\x87\x0B\x81R\x94\x90\x95\x0B` \x85\x01R`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16`@\x84\x01R`\x01`\x01`\x80\x1B\x03\x16``\x83\x01R`\x02\x0B`\x80\x82\x01Rb\xFF\xFF\xFF\x91\x90\x91\x16`\xA0\x82\x01R`\xC0\x01\x90V[`@Q\x80\x91\x03\x90\xA3P\x91\x97\x96PPPPPPPV[_\x80`\x01`\x01`\xA0\x1B\x03\x89\x163\x03a&\xE6WP\x84\x90P_a'\xE1V[_a&\xF1\x84`\x80\x1D\x90V[\x90P_a&\xFE\x85`\x0F\x0B\x90V[\x90P`@\x8B\x16\x15a'xWa'ka\x1E\n3\x8C\x8C\x8C\x8C\x8C`@Q`$\x01a'*\x96\x95\x94\x93\x92\x91\x90aM~V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xB4{/\xB1`\xE0\x1B\x17\x90R`\x04\x8E\x16\x15\x15`\x01`\x01`\xA0\x1B\x03\x8F\x16\x91\x90a0\xDDV[a'u\x90\x82aM\xDEV[\x90P[_\x81`\x0F\x0B_\x14\x15\x80a'\x8EWP\x82`\x0F\x0B_\x14\x15[\x15a'\xD9W\x89Q` \x8B\x01Q_\x13\x90\x15\x15\x14a'\xB9W`\x01`\x01`\x80\x1B\x03\x83\x16`\x80\x83\x90\x1B\x17a'\xCAV[`\x01`\x01`\x80\x1B\x03\x82\x16`\x80\x84\x90\x1B\x17[\x90Pa'\xD6\x89\x82a1\x1EV[\x98P[\x88\x94P\x92PPP[\x97P\x97\x95PPPPPPV[3`\x01`\x01`\xA0\x1B\x03\x84\x16\x81\x14\x80\x15\x90a(,WP`\x01`\x01`\xA0\x1B\x03\x80\x85\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x85\x16\x83R\x92\x90R T`\xFF\x16\x15[\x15a(\xA0W`\x01`\x01`\xA0\x1B\x03\x80\x85\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 \x93\x85\x16\x83R\x92\x81R\x82\x82 \x86\x83R\x90R T_\x19\x81\x14a(\x9EWa(p\x83\x82aI\xE4V[`\x01`\x01`\xA0\x1B\x03\x80\x87\x16_\x90\x81R`\x05` \x90\x81R`@\x80\x83 \x93\x87\x16\x83R\x92\x81R\x82\x82 \x88\x83R\x90R U[P[a\x08B\x84\x84\x84a;\x1EV[`\x01`\x01`\xA0\x1B\x03\x82\x81\x16_\x90\x81R\x90\x84\x16` R`@\x81 \x80\\\x91\x90a(\xD6`\x0F\x85\x90\x0B\x84aMWV[\x91P\x81\x81]P\x93P\x93\x91PPV[_\x80Q` aN\xEB\x839\x81Q\x91R\\`\x01\x81\x03\x90P\x80_\x80Q` aN\xEB\x839\x81Q\x91R]PV[_\x80Q` aN\xEB\x839\x81Q\x91R\\`\x01\x81\x01\x90P\x80_\x80Q` aN\xEB\x839\x81Q\x91R]PV[=`@Q\x83\x81R\x82`\x04\x82\x01R`@`$\x82\x01R\x81`D\x82\x01R\x81_`d\x83\x01>` \x80`\x1F\x84\x01\x04\x02`d\x01\x91P\x81\x81\xFD[__\x80Q` aN\x8B\x839\x81Q\x91R]V[``_\x80_\x84Q` \x86\x01_\x88Z\xF1\x90P\x80a)\xA0Wa)\xA0c1\x9DT\xC3`\xE0\x1B\x85a)4V[`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>` \x82Q\x10\x80a)\xEEWP` \x83\x01Q`\x01`\x01`\xE0\x1B\x03\x19\x16a)\xE1\x83` \x01Q\x90V[`\x01`\x01`\xE0\x1B\x03\x19\x16\x14\x15[\x15a*\x03Wa*\x03c\x1E\x04\x8E\x1D`\xE0\x1Ba\x15tV[P\x92\x91PPV[_\x83\x83\x02\x81_\x19\x85\x87\t\x82\x81\x10\x83\x82\x03\x03\x91PP\x80\x84\x11a*)W_\x80\xFD[\x80_\x03a*;WP\x82\x90\x04\x90Pa\x07sV[_\x84\x86\x88\t_\x86\x81\x03\x87\x16\x96\x87\x90\x04\x96`\x02`\x03\x89\x02\x81\x18\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x82\x03\x02\x80\x8A\x02\x90\x91\x03\x02\x91\x81\x90\x03\x81\x90\x04`\x01\x01\x86\x84\x11\x90\x95\x03\x94\x90\x94\x02\x91\x90\x94\x03\x92\x90\x92\x04\x91\x90\x91\x17\x91\x90\x91\x02\x91PP\x93\x92PPPV[`\xD0\x1Bb\xFF\xFF\xFF`\xD0\x1B\x16b\xFF\xFF\xFF`\xD0\x1B\x19\x91\x90\x91\x16\x17\x90V[\x80`\x02\x0B\x82`\x02\x0B\x12a*\xE0Wa*\xE0c\xC4C>\xD5`\xE0\x1B\x83\x83a;\x87V[b\r\x89\xE7\x19`\x02\x83\x90\x0B\x12\x15a+\x01Wa+\x01c\xD5\xE2\xF7\xAB`\xE0\x1B\x83a \x1AV[b\r\x89\xE8`\x02\x82\x90\x0B\x13\x15a\x11\xB3Wa\x11\xB3c\x03Z\xEE\xFF`\xE3\x1B\x82a \x1AV[`\x02\x83\x90\x0B_\x90\x81R`\x04\x85\x01` R`@\x81 \x80T\x82\x91\x90`\x01`\x01`\x80\x1B\x03\x81\x16\x90`\x80\x1Da+R\x82\x88a0\xB6V[`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x15\x90\x84\x16\x80\x15\x91\x90\x91\x14\x15\x96P\x90\x94P_\x03a+\x9CW\x88T`\xA0\x1C`\x02\x0B`\x02\x0B\x88`\x02\x0B\x13a+\x9CW`\x01\x80\x8A\x01T\x90\x84\x01U`\x02\x80\x8A\x01T\x90\x84\x01U[_\x86a+\xB1Wa+\xAC\x88\x83aM\xDEV[a+\xBBV[a+\xBB\x88\x83aN\x0BV[\x90P\x80`\x80\x1B`\x01`\x01`\x80\x1B\x03\x86\x16\x17\x84UPPPP\x94P\x94\x92PPPV[`\x02\x91\x82\x0B\x91\x0B\x80\x82\x07\x15a,\x08W`@Qc\xD4\xD8\xF3\xE6\x81R\x82` \x82\x01R\x81`@\x82\x01R`D`\x1C\x82\x01\xFD[\x80\x82\x05\x91P\x81`\x08\x1D_R\x82` R`@_ `\x01`\xFF\x84\x16\x1B\x81T\x18\x81UPPPPV[`\x02\x82\x81\x0B_\x81\x81R`\x04\x86\x01` R`@\x80\x82 \x85\x85\x0B\x83R\x90\x82 \x87T\x92\x94\x85\x94\x92\x93\x91\x92`\xA0\x92\x90\x92\x1C\x90\x0B\x90\x81\x12\x15a,\x83W\x81`\x01\x01T\x83`\x01\x01T\x03\x94P\x81`\x02\x01T\x83`\x02\x01T\x03\x93Pa,\xD6V[\x85`\x02\x0B\x81`\x02\x0B\x12a,\xAFW\x82`\x01\x01T\x82`\x01\x01T\x03\x94P\x82`\x02\x01T\x82`\x02\x01T\x03\x93Pa,\xD6V[\x81`\x01\x01T\x83`\x01\x01T\x89`\x01\x01T\x03\x03\x94P\x81`\x02\x01T\x83`\x02\x01T\x89`\x02\x01T\x03\x03\x93P[PPP\x93P\x93\x91PPV[\x83T_\x90\x81\x90`\x01`\x01`\x80\x1B\x03\x16`\x0F\x86\x90\x0B\x82\x03a- W\x80`\x01`\x01`\x80\x1B\x03\x16_\x03a-\x1BWa-\x1Bc+\xBF\xAEI`\xE2\x1Ba\x15tV[a-FV[a-*\x81\x87a0\xB6V[\x87T`\x01`\x01`\x80\x1B\x03\x19\x16`\x01`\x01`\x80\x1B\x03\x91\x90\x91\x16\x17\x87U[a-d\x87`\x01\x01T\x86\x03\x82`\x01`\x01`\x80\x1B\x03\x16`\x01`\x80\x1Ba*\nV[\x92Pa-\x84\x87`\x02\x01T\x85\x03\x82`\x01`\x01`\x80\x1B\x03\x16`\x01`\x80\x1Ba*\nV[`\x01\x88\x01\x95\x90\x95UPP`\x02\x90\x94\x01U\x91\x92\x90PV[`\x02\x0B_`\xFF\x82\x90\x1D\x80\x83\x01\x18b\r\x89\xE8\x81\x11\x15a-\xC3Wa-\xC3cE\xC3\x19=`\xE1\x1B\x84a \x1AV[p\x01\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01`\x01\x82\x16\x02`\x01`\x80\x1B\x18`\x02\x82\x16\x15a-\xFFWo\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C[`\x04\x82\x16\x15a.\x1EWo\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C[`\x08\x82\x16\x15a.=Wo\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C[`\x10\x82\x16\x15a.\\Wo\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C[` \x82\x16\x15a.{Wo\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C[`@\x82\x16\x15a.\x9AWo\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C[`\x80\x82\x16\x15a.\xB9Wo\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C[a\x01\0\x82\x16\x15a.\xD9Wo\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C[a\x02\0\x82\x16\x15a.\xF9Wo\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C[a\x04\0\x82\x16\x15a/\x19Wo\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C[a\x08\0\x82\x16\x15a/9Wo\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C[a\x10\0\x82\x16\x15a/YWo\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C[a \0\x82\x16\x15a/yWo\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C[a@\0\x82\x16\x15a/\x99Wop\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C[a\x80\0\x82\x16\x15a/\xB9Wo1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C[b\x01\0\0\x82\x16\x15a/\xDAWo\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C[b\x02\0\0\x82\x16\x15a/\xFAWn]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C[b\x04\0\0\x82\x16\x15a0\x19Wm\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x02`\x80\x1C[b\x08\0\0\x82\x16\x15a06Wk\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x02`\x80\x1C[_\x84\x13\x15a0BW_\x19\x04[c\xFF\xFF\xFF\xFF\x01` \x1C\x93\x92PPPV[_\x80\x82`\x0F\x0B\x12a0yWa0ra0m\x85\x85\x85`\x01a;\xA4V[a<gV[_\x03a\x15lV[a\x15la0m\x85\x85\x85_\x03_a;\xA4V[_\x80\x82`\x0F\x0B\x12a0\xA5Wa0ra0m\x85\x85\x85`\x01a<\x80V[a\x15la0m\x85\x85\x85_\x03_a<\x80V[`\x01`\x01`\x80\x1B\x03\x82\x16`\x0F\x82\x90\x0B\x01`\x80\x81\x90\x1C\x15a\x06\xCDWc\x93\xDA\xFD\xF1_R`\x04`\x1C\xFD[_\x80a0\xE9\x85\x85a)yV[\x90P\x82a0\xF9W_\x91PPa\x07sV[\x80Q`@\x14a1\x12Wa1\x12c\x1E\x04\x8E\x1D`\xE0\x1Ba\x15tV[`@\x01Q\x94\x93PPPPV[_`\x80\x82\x81\x1D\x90\x84\x90\x1D\x03`\x0F\x83\x81\x0B\x90\x85\x90\x0B\x03a\x1E\xF2a\x1E\xE9\x83a\x1B2V[_s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DQc\x96\x16\x82d\x01\0\x02v\xA2\x19\x83\x01`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a1~Wa1~c\x18R\x1DI`\xE2\x1B\x83a!\x0CV[d\x01\0\0\0\0`\x01`\xC0\x1B\x03` \x83\x90\x1B\x16`\x01`\x01`\x80\x1B\x03\x81\x11`\x07\x1B\x81\x81\x1C`\x01`\x01`@\x1B\x03\x81\x11`\x06\x1B\x90\x81\x1Cc\xFF\xFF\xFF\xFF\x81\x11`\x05\x1B\x90\x81\x1Ca\xFF\xFF\x81\x11`\x04\x1B\x90\x81\x1C`\xFF\x81\x11`\x03\x90\x81\x1B\x91\x82\x1C`\x0F\x81\x11`\x02\x1B\x90\x81\x1C\x91\x82\x11`\x01\x90\x81\x1B\x92\x83\x1C\x97\x90\x88\x11\x96\x17\x90\x94\x17\x90\x92\x17\x17\x90\x91\x17\x17\x17`\x80\x81\x10a2\x11W`\x7F\x81\x03\x83\x90\x1C\x91Pa2\x1BV[\x80`\x7F\x03\x83\x90\x1B\x91P[\x90\x80\x02`\x7F\x81\x81\x1C`\xFF\x83\x81\x1C\x91\x90\x91\x1C\x80\x02\x80\x83\x1C\x81\x83\x1C\x1C\x80\x02\x80\x84\x1C\x81\x84\x1C\x1C\x80\x02\x80\x85\x1C\x81\x85\x1C\x1C\x80\x02\x80\x86\x1C\x81\x86\x1C\x1C\x80\x02\x80\x87\x1C\x81\x87\x1C\x1C\x80\x02\x80\x88\x1C\x81\x88\x1C\x1C\x80\x02\x80\x89\x1C\x81\x89\x1C\x1C\x80\x02\x80\x8A\x1C\x81\x8A\x1C\x1C\x80\x02\x80\x8B\x1C\x81\x8B\x1C\x1C\x80\x02\x80\x8C\x1C\x81\x8C\x1C\x1C\x80\x02\x80\x8D\x1C\x81\x8D\x1C\x1C\x80\x02\x80\x8E\x1C\x9C\x81\x90\x1C\x9C\x90\x9C\x1C\x80\x02\x9C\x8D\x90\x1C\x9E\x9D`\x7F\x19\x8F\x01`@\x1B`\xC0\x91\x90\x91\x1Cg\x80\0\0\0\0\0\0\0\x16\x17`\xC1\x9B\x90\x9B\x1Cg@\0\0\0\0\0\0\0\x16\x9A\x90\x9A\x17`\xC2\x99\x90\x99\x1Cg \0\0\0\0\0\0\0\x16\x98\x90\x98\x17`\xC3\x97\x90\x97\x1Cg\x10\0\0\0\0\0\0\0\x16\x96\x90\x96\x17`\xC4\x95\x90\x95\x1Cg\x08\0\0\0\0\0\0\0\x16\x94\x90\x94\x17`\xC5\x93\x90\x93\x1Cg\x04\0\0\0\0\0\0\0\x16\x92\x90\x92\x17`\xC6\x91\x90\x91\x1Cg\x02\0\0\0\0\0\0\0\x16\x17`\xC7\x91\x90\x91\x1Cg\x01\0\0\0\0\0\0\0\x16\x17`\xC8\x91\x90\x91\x1Cf\x80\0\0\0\0\0\0\x16\x17`\xC9\x91\x90\x91\x1Cf@\0\0\0\0\0\0\x16\x17`\xCA\x91\x90\x91\x1Cf \0\0\0\0\0\0\x16\x17`\xCB\x91\x90\x91\x1Cf\x10\0\0\0\0\0\0\x16\x17`\xCC\x91\x90\x91\x1Cf\x08\0\0\0\0\0\0\x16\x17`\xCD\x91\x90\x91\x1Cf\x04\0\0\0\0\0\0\x16\x17i6'\xA3\x01\xD7\x10UwL\x85\x81\x02o\x02\x8Fd\x81\xAB\x7F\x04ZZ\xF0\x12\xA1\x9D\0:\xA9\x19\x81\x01`\x80\x90\x81\x1D\x90o\xDB-\xF0\x9E\x81\x95\x9A\x81E^&\x07\x99\xA0c/\x83\x01\x90\x1D`\x02\x81\x81\x0B\x90\x83\x90\x0B\x14a4\x1BW\x88`\x01`\x01`\xA0\x1B\x03\x16a4\0\x82a-\x9AV[`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a4\x15W\x81a4\x1DV[\x80a4\x1DV[\x81[\x99\x98PPPPPPPPPV[`\xA0\x1Bb\xFF\xFF\xFF`\xA0\x1B\x16b\xFF\xFF\xFF`\xA0\x1B\x19\x91\x90\x91\x16\x17\x90V[`\xB8\x1Bb\xFF\xFF\xFF`\xB8\x1B\x16b\xFF\xFF\xFF`\xB8\x1B\x19\x91\x90\x91\x16\x17\x90V[_`\x01`\x01`\xA0\x1B\x03\x82\x16\x15a\x06\xCDV[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R\x81\x90\x81\x90\x85T` \x86\x01Q`\x03\x88\x01T`\x01`\x01`\x80\x1B\x03\x16_\x82a4\xCEWa\x0F\xFF`\xC4\x85\x90\x1C\x16a4\xD8V[a\x0F\xFF`\xB8\x85\x90\x1C\x16[`@\x8A\x81\x01Q\x87R_` \x88\x01R`\x01`\x01`\xA0\x1B\x03\x86\x16\x90\x87\x01R`\xA0\x85\x90\x1C`\x02\x0B``\x87\x01Ra\xFF\xFF\x16\x90P\x82a5\x16W\x89`\x02\x01Ta5\x1CV[\x89`\x01\x01T[`\x80\x86\x81\x01\x91\x90\x91R`\x01`\x01`\x80\x1B\x03\x83\x16`\xA0\x87\x01R\x89\x01Q_\x90b@\0\0\x16a5QW`\xD0\x85\x90\x1Cb\xFF\xFF\xFF\x16a5cV[a5c\x8A`\x80\x01Qb\xFF\xFF\xFF\x16a<\xCCV[\x90P\x81\x15a5\x91Wb\x0FB@b\xFF\xFF\xFF\x82\x16a\xFF\xFF\x84\x16\x81\x81\x02\x83\x81\x06\x15\x15\x93\x90\x04\x92\x90\x92\x01\x91\x01\x03a5\x93V[\x80[`@\x8B\x01Q\x90\x97P_\x13\x90Pb\xFF\xFF\xFF\x87\x16b\x0FB@\x14\x80\x15a5\xB4WP\x80\x15[\x15a5\xC9Wa5\xC9cK\x101#`\xE1\x1Ba\x15tV[\x89`@\x01Q_\x03a5\xE4W_\x80\x98P\x98PPPPPPa;\x15V[\x83\x15a6bW``\x8A\x01Q`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x10a6#Wa6#`\x01`\x01`\xA0\x1B\x03\x86\x16[``\x8C\x01Qc|\x9Cn\x8F`\xE0\x1B\x91\x90a<\xDBV[d\x01\0\x02v\xA3`\x01`\x01`\xA0\x1B\x03\x16\x8A``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x10\x15a6]W``\x8A\x01Qa6]\x90c\x9EM|\xC7`\xE0\x1B\x90a!\x0CV[a6\xD3V[``\x8A\x01Q`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x11a6\x8BWa6\x8B`\x01`\x01`\xA0\x1B\x03\x86\x16a6\x0FV[s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&`\x01`\x01`\xA0\x1B\x03\x16\x8A``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x10a6\xD3W``\x8A\x01Qa6\xD3\x90c\x9EM|\xC7`\xE0\x1B\x90a!\x0CV[`@\x80Q`\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x91\x90\x91R[\x86Q\x15\x80a73WP\x8A``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x87`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14[a:\x1EW`@\x87\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x81R``\x87\x01Q\x8BQa7]\x91`\x05\x8F\x01\x91\x88a=\x04V[\x15\x15`@\x83\x01R`\x02\x0B` \x82\x01\x81\x90Rb\r\x89\xE7\x19\x12a7\x83Wb\r\x89\xE7\x19` \x82\x01R[b\r\x89\xE8`\x02\x0B\x81` \x01Q`\x02\x0B\x12a7\xA1Wb\r\x89\xE8` \x82\x01R[a7\xAE\x81` \x01Qa-\x9AV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16``\x83\x81\x01\x82\x90R`@\x8A\x01Q\x90\x8E\x01Qa7\xEF\x93\x91\x92\x91\x16\x80\x82\x18\x91\x81\x11`\xFF\x8A\x16\x18\x91\x90\x91\x02\x18`\xA0\x8A\x01Q\x8AQ\x8Ca=\xEDV[`\xC0\x85\x01R`\xA0\x84\x01R`\x80\x83\x01R`\x01`\x01`\xA0\x1B\x03\x16`@\x88\x01R\x81a8SWa8\x1E\x81`\xA0\x01Qa<gV[\x87Q\x03\x87R`\xC0\x81\x01Q`\x80\x82\x01Qa8:\x91a0m\x91aI\xF7V[\x87` \x01\x81\x81Qa8K\x91\x90aN8V[\x90RPa8\x8EV[a8f\x81`\xC0\x01Q\x82`\x80\x01Q\x01a<gV[\x87Q\x01\x87R`\xA0\x81\x01Qa8y\x90a<gV[\x87` \x01\x81\x81Qa8\x8A\x91\x90aMWV[\x90RP[\x82\x15a8\xCAW_b\x0FB@\x84\x83`\xC0\x01Q\x84`\x80\x01Q\x01\x02\x81a8\xB3Wa8\xB3aNWV[`\xC0\x84\x01\x80Q\x92\x90\x91\x04\x91\x82\x90\x03\x90R\x99\x90\x99\x01\x98P[`\xA0\x87\x01Q`\x01`\x01`\x80\x1B\x03\x16\x15a9\tWa8\xFD\x81`\xC0\x01Q`\x01`\x80\x1B\x89`\xA0\x01Q`\x01`\x01`\x80\x1B\x03\x16a*\nV[`\x80\x88\x01\x80Q\x90\x91\x01\x90R[\x80``\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x87`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x03a9\xE3W\x80`@\x01Q\x15a9\xCBW_\x80\x86a9JW\x8D`\x01\x01T\x89`\x80\x01Qa9UV[\x88`\x80\x01Q\x8E`\x02\x01T[\x91P\x91P_a9\xA0\x8F\x85` \x01Q\x85\x85`\x02\x92\x83\x0B_\x90\x81R`\x04\x90\x94\x01` R`@\x90\x93 `\x01\x81\x01\x80T\x90\x92\x03\x90\x91U\x90\x81\x01\x80T\x90\x92\x03\x90\x91UT`\x01`\x80\x1B\x90\x04`\x0F\x0B\x90V[\x90P\x87\x15a9\xABW_\x03[a9\xB9\x8A`\xA0\x01Q\x82a0\xB6V[`\x01`\x01`\x80\x1B\x03\x16`\xA0\x8B\x01RPPP[` \x81\x01Q`\xFF\x86\x16\x90\x03`\x02\x0B``\x88\x01Ra7\x0CV[\x80_\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x87`@\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x14a:\x19Wa:\x10\x87`@\x01Qa1?V[`\x02\x0B``\x88\x01R[a7\x0CV[a:V\x87`@\x01Qa:=\x89``\x01Q\x89a4*\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x90V[\x8CU`\xA0\x87\x01Q`\x01`\x01`\x80\x1B\x03\x85\x81\x16\x91\x16\x14a:\x96W`\xA0\x87\x01Q`\x03\x8D\x01\x80T`\x01`\x01`\x80\x1B\x03\x19\x16`\x01`\x01`\x80\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90U[\x84a:\xAAW`\x80\x87\x01Q`\x02\x8D\x01Ua:\xB5V[`\x80\x87\x01Q`\x01\x8D\x01U[\x81\x15\x15\x85\x15\x15\x14a:\xE9Wa:\xE2a:\xD0\x88` \x01Qa\x1B2V[a\x1D5\x89_\x01Q\x8E`@\x01Q\x03a\x1B2V[\x99Pa;\x0EV[a;\x0Ba:\xFE\x88_\x01Q\x8D`@\x01Q\x03a\x1B2V[a\x1D5\x89` \x01Qa\x1B2V[\x99P[PPPPPP[\x92\x95\x91\x94P\x92PV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 \x80T\x83\x92\x90a;P\x90\x84\x90aI\xE4V[\x90\x91UPP`@\x80Q3\x81R` \x81\x01\x83\x90R\x83\x91_\x91`\x01`\x01`\xA0\x1B\x03\x87\x16\x91_\x80Q` aN\xAB\x839\x81Q\x91R\x91\x01a\x17\x8DV[`@Q\x83\x81R\x82`\x02\x0B`\x04\x82\x01R\x81`\x02\x0B`$\x82\x01R`D\x81\xFD[_\x83`\x01`\x01`\xA0\x1B\x03\x16\x85`\x01`\x01`\xA0\x1B\x03\x16\x11\x15a;\xC3W\x92\x93\x92[`\x01`\x01`\xA0\x1B\x03\x85\x16a;\xDDWb\xBF\xC9!_R`\x04`\x1C\xFD[`\x01``\x1B`\x01`\xE0\x1B\x03``\x84\x90\x1B\x16`\x01`\x01`\xA0\x1B\x03\x86\x86\x03\x16\x83a<0W\x86`\x01`\x01`\xA0\x1B\x03\x16a<\x1D\x83\x83\x89`\x01`\x01`\xA0\x1B\x03\x16a*\nV[\x81a<*Wa<*aNWV[\x04a<\\V[a<\\a<G\x83\x83\x89`\x01`\x01`\xA0\x1B\x03\x16a?sV[\x88`\x01`\x01`\xA0\x1B\x03\x16\x80\x82\x04\x91\x06\x15\x15\x01\x90V[\x97\x96PPPPPPPV[\x80_\x81\x12\x15a\n\x02Wa\n\x02c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[_`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x90\x86\x16\x03`\xFF\x81\x90\x1D\x90\x81\x01\x18`\x01``\x1B`\x01`\x01`\x80\x1B\x03\x85\x16a<\xB3\x81\x84\x84a*\nV[\x93P\x84_\x83\x85\x84\t\x11\x16\x84\x01\x93PPPP\x94\x93PPPPV[b\xBF\xFF\xFF\x81\x16a\n\x02\x81a\x19\xEFV[`@Q\x83\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16`$\x82\x01R`D\x81\xFD[_\x80`\x02\x84\x81\x0B\x90\x86\x90\x0B\x81\x81\x07\x83\x13\x91\x90\x05\x03\x83\x15a=\x7FW`\x02\x81\x90\x0B`\x08\x1D`\x01\x81\x81\x0B_\x90\x81R` \x8A\x90R`@\x90 T_\x19`\xFF\x85\x16\x83\x81\x01\x93\x90\x93\x1B\x01\x90\x81\x16\x80\x15\x15\x95P\x85a=aW\x88\x83`\xFF\x16\x86\x03\x02a=tV[\x88a=k\x82a?\xA3V[\x84\x03`\xFF\x16\x86\x03\x02[\x96PPPPPa=\xE3V[`\x01\x90\x81\x01`\x02\x81\x90\x0B`\x08\x1D\x80\x83\x0B_\x90\x81R` \x8A\x90R`@\x90 T_\x19`\xFF\x84\x16\x94\x85\x1B\x01\x19\x90\x81\x16\x80\x15\x15\x95P\x92\x93\x91\x92\x85a=\xC9W\x88\x83`\xFF\x03`\xFF\x16\x86\x01\x02a=\xDCV[\x88\x83a=\xD4\x83a@3V[\x03`\xFF\x16\x86\x01\x02[\x96PPPPP[P\x94P\x94\x92PPPV[_\x80\x80\x80b\xFF\xFF\xFF\x85\x16`\x01`\x01`\xA0\x1B\x03\x80\x8A\x16\x90\x8B\x16\x10\x15\x82\x88\x12\x80\x15a>\xE6W_a>&\x8A_\x03\x85b\x0FB@\x03b\x0FB@a*\nV[\x90P\x82a>?Wa>:\x8D\x8D\x8D`\x01a<\x80V[a>LV[a>L\x8C\x8E\x8D`\x01a;\xA4V[\x96P\x86\x81\x10a>\x80W\x8B\x97Pb\x0FB@\x84\x14a>wWa>r\x87\x85\x86b\x0FB@\x03a?sV[a>yV[\x86[\x94Pa>\xBCV[a>\x8C\x8D\x8C\x83\x86a@\xCEV[\x97P\x82a>\xA5Wa>\xA0\x8D\x89\x8D`\x01a<\x80V[a>\xB2V[a>\xB2\x88\x8E\x8D`\x01a;\xA4V[\x96P\x86\x8A_\x03\x03\x94P[\x82a>\xD2Wa>\xCD\x8D\x89\x8D_a;\xA4V[a>\xDEV[a>\xDE\x88\x8E\x8D_a<\x80V[\x95PPa?dV[\x81a>\xFCWa>\xF7\x8C\x8C\x8C_a;\xA4V[a?\x08V[a?\x08\x8B\x8D\x8C_a<\x80V[\x94P\x84\x89\x10a?\x19W\x8A\x96Pa?+V[\x88\x94Pa?(\x8C\x8B\x87\x85aA\x1CV[\x96P[\x81a?BWa?=\x8C\x88\x8C`\x01a<\x80V[a?OV[a?O\x87\x8D\x8C`\x01a;\xA4V[\x95Pa?a\x86\x84\x85b\x0FB@\x03a?sV[\x93P[PPP\x95P\x95P\x95P\x95\x91PPV[_a?\x7F\x84\x84\x84a*\nV[\x90P\x81\x80a?\x8FWa?\x8FaNWV[\x83\x85\t\x15a\x07sW`\x01\x01\x80a\x07sW_\x80\xFD[_\x80\x82\x11a?\xAFW_\x80\xFD[P\x7F\x07\x06\x06\x05\x06\x02\x05\x04\x06\x02\x03\x02\x05\x04\x03\x01\x06\x05\x02\x05\x03\x03\x04\x01\x05\x05\x03\x04\0\0\0\0`\x1Fo\x84!\x08B\x10\x84!\x08\xCCc\x18\xC6\xDBmT\xBE\x83\x15`\x08\x1B`\x01`\x01`\x80\x1B\x03\x85\x11`\x07\x1B\x17\x84\x81\x1C`\x01`\x01`@\x1B\x03\x10`\x06\x1B\x17\x84\x81\x1Cc\xFF\xFF\xFF\xFF\x10`\x05\x1B\x17\x84\x81\x1Ca\xFF\xFF\x10`\x04\x1B\x17\x84\x81\x1C`\xFF\x10`\x03\x1B\x17\x93\x84\x1C\x1C\x16\x1A\x17\x90V[_\x80\x82\x11a@?W_\x80\xFD[P~\x1F\r\x1E\x10\x0C\x1D\x07\x0F\t\x0B\x19\x13\x1C\x17\x06\x01\x0E\x11\x08\n\x1A\x14\x18\x02\x12\x1B\x15\x03\x16\x04\x05\x81\x19`\x01\x01\x90\x91\x16a\x01\xE0\x7F\x80@@UC\0RfD2\0\0P a\x06t\x050&\x02\0\0\x10u\x06 \x01v\x11pw`\xFC\x7F\xB6\xDBm\xB6\xDD\xDD\xDD\xDD\xD3M4\xD3I$\x92I!\x08B\x10\x8Cc\x18\xC69\xCEs\x9C\xFF\xFF\xFF\xFF\x84\x02`\xF8\x1C\x16\x1B`\xF7\x1C\x16\x90\x81\x1Cc\xD7dS\xE0\x04`\x1F\x16\x91\x90\x91\x1A\x17\x90V[_`\x01`\x01`\x80\x1B\x03\x84\x16\x15`\x01`\x01`\xA0\x1B\x03\x86\x16\x15\x17\x15a@\xF8WcO$a\xB8_R`\x04`\x1C\xFD[\x81aA\x0FWaA\n\x85\x85\x85`\x01aA_V[a\x1E\xF2V[a\x1E\xF2\x85\x85\x85`\x01aBJV[_`\x01`\x01`\x80\x1B\x03\x84\x16\x15`\x01`\x01`\xA0\x1B\x03\x86\x16\x15\x17\x15aAFWcO$a\xB8_R`\x04`\x1C\xFD[\x81aAWWaA\n\x85\x85\x85_aBJV[a\x1E\xF2\x85\x85\x85_[_\x81\x15aA\xCFW_`\x01`\x01`\xA0\x1B\x03\x84\x11\x15aA\x93WaA\x8E\x84`\x01``\x1B\x87`\x01`\x01`\x80\x1B\x03\x16a*\nV[aA\xAAV[aA\xAA`\x01`\x01`\x80\x1B\x03\x86\x16``\x86\x90\x1BaNkV[\x90PaA\xC7aA\xC2\x82`\x01`\x01`\xA0\x1B\x03\x89\x16aI\xF7V[aC,V[\x91PPa\x15lV[_`\x01`\x01`\xA0\x1B\x03\x84\x11\x15aA\xFCWaA\xF7\x84`\x01``\x1B\x87`\x01`\x01`\x80\x1B\x03\x16a?sV[aB\x19V[aB\x19``\x85\x90\x1B`\x01`\x01`\x80\x1B\x03\x87\x16\x80\x82\x04\x91\x06\x15\x15\x01\x90V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x87\x16\x11aB8WcC#\xA5U_R`\x04`\x1C\xFD[`\x01`\x01`\xA0\x1B\x03\x86\x16\x03\x90Pa\x15lV[_\x82_\x03aBYWP\x83a\x15lV[`\x01``\x1B`\x01`\xE0\x1B\x03``\x85\x90\x1B\x16\x82\x15aB\xEBW`\x01`\x01`\xA0\x1B\x03\x86\x16\x84\x81\x02\x90\x85\x82\x81aB\x8DWaB\x8DaNWV[\x04\x03aB\xBDW\x81\x81\x01\x82\x81\x10aB\xBBWaB\xB1\x83\x89`\x01`\x01`\xA0\x1B\x03\x16\x83a?sV[\x93PPPPa\x15lV[P[PaA\xC7\x81\x85aB\xD6`\x01`\x01`\xA0\x1B\x03\x8A\x16\x83aNkV[aB\xE0\x91\x90aI\xF7V[\x80\x82\x04\x91\x06\x15\x15\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x86\x16\x84\x81\x02\x90\x85\x82\x04\x14\x81\x83\x11\x16aC\x12Wc\xF5\xC7\x87\xF1_R`\x04`\x1C\xFD[\x80\x82\x03aB\xB1aA\xC2\x84`\x01`\x01`\xA0\x1B\x03\x8B\x16\x84a?sV[\x80`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x02Wa\n\x02c\x93\xDA\xFD\xF1`\xE0\x1Ba\x15tV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x17\xFDW_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15aCrW_\x80\xFD[\x825aC}\x81aCMV[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15aC\x9BW_\x80\xFD[\x815`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x07sW_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15aC\xC4W_\x80\xFD[\x835aC\xCF\x81aCMV[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[_\x80_``\x84\x86\x03\x12\x15aC\xF6W_\x80\xFD[\x835aD\x01\x81aCMV[\x92P` \x84\x015aD\x11\x81aCMV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[_` \x82\x84\x03\x12\x15aD2W_\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x80\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aDoWaDoaD9V[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aD\x9DWaD\x9DaD9V[`@R\x91\x90PV[\x805b\xFF\xFF\xFF\x81\x16\x81\x14a\n\x02W_\x80\xFD[\x805`\x02\x81\x90\x0B\x81\x14a\n\x02W_\x80\xFD[_`\xA0\x82\x84\x03\x12\x15aD\xD8W_\x80\xFD[`@Q`\xA0\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aD\xFAWaD\xFAaD9V[`@R\x90P\x80\x825aE\x0B\x81aCMV[\x81R` \x83\x015aE\x1B\x81aCMV[` \x82\x01RaE,`@\x84\x01aD\xA5V[`@\x82\x01RaE=``\x84\x01aD\xB7V[``\x82\x01R`\x80\x83\x015aEP\x81aCMV[`\x80\x91\x90\x91\x01R\x92\x91PPV[_\x80\x83`\x1F\x84\x01\x12aEmW_\x80\xFD[P\x815`\x01`\x01`@\x1B\x03\x81\x11\x15aE\x83W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15aE\x9AW_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_a\x01\0\x86\x88\x03\x12\x15aE\xB6W_\x80\xFD[aE\xC0\x87\x87aD\xC8V[\x94P`\xA0\x86\x015\x93P`\xC0\x86\x015\x92P`\xE0\x86\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aE\xE8W_\x80\xFD[aE\xF4\x88\x82\x89\x01aE]V[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[_` \x82\x84\x03\x12\x15aF\x15W_\x80\xFD[\x815a\x07s\x81aCMV[_\x80`@\x83\x85\x03\x12\x15aF1W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15aFwW\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aFYV[P\x90\x95\x94PPPPPV[_\x80` \x83\x85\x03\x12\x15aF\x93W_\x80\xFD[\x825`\x01`\x01`@\x1B\x03\x81\x11\x15aF\xA8W_\x80\xFD[aF\xB4\x85\x82\x86\x01aE]V[\x90\x96\x90\x95P\x93PPPPV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[_\x80`\xC0\x83\x85\x03\x12\x15aG\x06W_\x80\xFD[aG\x10\x84\x84aD\xC8V[\x91PaG\x1E`\xA0\x84\x01aD\xA5V[\x90P\x92P\x92\x90PV[\x805\x80\x15\x15\x81\x14a\n\x02W_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15aGGW_\x80\xFD[\x825aGR\x81aCMV[\x91PaG\x1E` \x84\x01aG'V[_\x80_\x80\x84\x86\x03a\x01@\x81\x12\x15aGuW_\x80\xFD[aG\x7F\x87\x87aD\xC8V[\x94P`\x80`\x9F\x19\x82\x01\x12\x15aG\x92W_\x80\xFD[PaG\x9BaDMV[aG\xA7`\xA0\x87\x01aD\xB7V[\x81RaG\xB5`\xC0\x87\x01aD\xB7V[` \x82\x01R`\xE0\x86\x015`@\x82\x01Ra\x01\0\x86\x015``\x82\x01R\x92Pa\x01 \x85\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aG\xEAW_\x80\xFD[aG\xF6\x87\x82\x88\x01aE]V[\x95\x98\x94\x97P\x95PPPPV[_\x80_\x80`\xE0\x85\x87\x03\x12\x15aH\x15W_\x80\xFD[aH\x1F\x86\x86aD\xC8V[\x93P`\xA0\x85\x015aH/\x81aCMV[\x92P`\xC0\x85\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aG\xEAW_\x80\xFD[_\x80` \x83\x85\x03\x12\x15aHZW_\x80\xFD[\x825`\x01`\x01`@\x1B\x03\x81\x11\x15aHoW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13aH\x7FW_\x80\xFD[\x805`\x01`\x01`@\x1B\x03\x81\x11\x15aH\x94W_\x80\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15aH\xA8W_\x80\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x80`@\x83\x85\x03\x12\x15aH\xC9W_\x80\xFD[\x825aH\xD4\x81aCMV[\x91P` \x83\x015aH\xE4\x81aCMV[\x80\x91PP\x92P\x92\x90PV[_\x80_\x80\x84\x86\x03a\x01 \x81\x12\x15aI\x04W_\x80\xFD[aI\x0E\x87\x87aD\xC8V[\x94P```\x9F\x19\x82\x01\x12\x15aI!W_\x80\xFD[P`@Q``\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15aIDWaIDaD9V[`@RaIS`\xA0\x87\x01aG'V[\x81R`\xC0\x86\x015` \x82\x01R`\xE0\x86\x015aIm\x81aCMV[`@\x82\x01R\x92Pa\x01\0\x85\x015`\x01`\x01`@\x1B\x03\x81\x11\x15aG\xEAW_\x80\xFD[_\x80_\x80`\x80\x85\x87\x03\x12\x15aI\xA0W_\x80\xFD[\x845aI\xAB\x81aCMV[\x93P` \x85\x015aI\xBB\x81aCMV[\x93\x96\x93\x95PPPP`@\x82\x015\x91``\x015\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x06\xCDWa\x06\xCDaI\xD0V[\x80\x82\x01\x80\x82\x11\x15a\x06\xCDWa\x06\xCDaI\xD0V[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[` \x81R_a\x15l` \x83\x01\x84\x86aJ\nV[_` \x82\x84\x03\x12\x15aJUW_\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15aJjW_\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13aJzW_\x80\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15aJ\x93WaJ\x93aD9V[aJ\xA6`\x1F\x82\x01`\x1F\x19\x16` \x01aDuV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15aJ\xBAW_\x80\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[_\x81`\x0F\x0B`\x01`\x01`\x7F\x1B\x03\x19\x81\x03aJ\xF3WaJ\xF3aI\xD0V[_\x03\x92\x91PPV[\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x83R` \x80\x83\x01Q\x82\x16\x90\x84\x01R`@\x80\x83\x01Qb\xFF\xFF\xFF\x16\x90\x84\x01R``\x80\x83\x01Q`\x02\x0B\x90\x84\x01R`\x80\x91\x82\x01Q\x16\x91\x01RV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaKW` \x82\x01\x87aJ\xFBV[\x84`\xC0\x82\x01R\x83`\xE0\x82\x01Ra\x01 a\x01\0\x82\x01R_aK|a\x01 \x83\x01\x84\x86aJ\nV[\x98\x97PPPPPPPPV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81RaK\xA1` \x82\x01\x86aJ\xFBV[\x83Q`\x02\x90\x81\x0B`\xC0\x83\x01R` \x85\x01Q\x90\x0B`\xE0\x82\x01R`@\x84\x01Qa\x01\0\x82\x01R``\x84\x01Qa\x01 \x82\x01Ra\x01`a\x01@\x82\x01R_a<\\a\x01`\x83\x01\x84\x86aJ\nV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaL\x01` \x82\x01\x87aJ\xFBV[\x84Q`\x02\x90\x81\x0B`\xC0\x83\x01R` \x86\x01Q\x90\x0B`\xE0\x82\x01R`@\x85\x01Qa\x01\0\x82\x01R``\x85\x01Qa\x01 \x82\x01R\x83a\x01@\x82\x01Ra\x01\x80a\x01`\x82\x01R_aK|a\x01\x80\x83\x01\x84\x86aJ\nV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81RaLh` \x82\x01\x86aJ\xFBV[`\x01`\x01`\xA0\x1B\x03\x84\x16`\xC0\x82\x01Ra\x01\0`\xE0\x82\x01\x81\x90R_\x90a<\\\x90\x83\x01\x84\x86aJ\nV[`\xA0\x81\x01a\x06\xCD\x82\x84aJ\xFBV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaL\xB7` \x82\x01\x87aJ\xFBV[`\x01\x80`\xA0\x1B\x03\x85\x16`\xC0\x82\x01R\x83`\x02\x0B`\xE0\x82\x01Ra\x01 a\x01\0\x82\x01R_aK|a\x01 \x83\x01\x84\x86aJ\nV[_` \x82\x84\x03\x12\x15aL\xF7W_\x80\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81RaM\x17` \x82\x01\x86aJ\xFBV[\x83Q\x15\x15`\xC0\x82\x01R` \x84\x01Q`\xE0\x82\x01R`@\x84\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x82\x01Ra\x01@a\x01 \x82\x01R_a<\\a\x01@\x83\x01\x84\x86aJ\nV[\x80\x82\x01\x82\x81\x12_\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15aMvWaMvaI\xD0V[PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x87\x16\x81RaM\x97` \x82\x01\x87aJ\xFBV[\x84Q\x15\x15`\xC0\x82\x01R` \x85\x01Q`\xE0\x82\x01R`@\x85\x01Q`\x01`\x01`\xA0\x1B\x03\x16a\x01\0\x82\x01R\x83a\x01 \x82\x01Ra\x01`a\x01@\x82\x01R_aK|a\x01`\x83\x01\x84\x86aJ\nV[`\x0F\x81\x81\x0B\x90\x83\x90\x0B\x01`\x01`\x01`\x7F\x1B\x03\x81\x13`\x01`\x01`\x7F\x1B\x03\x19\x82\x12\x17\x15a\x06\xCDWa\x06\xCDaI\xD0V[`\x0F\x82\x81\x0B\x90\x82\x90\x0B\x03`\x01`\x01`\x7F\x1B\x03\x19\x81\x12`\x01`\x01`\x7F\x1B\x03\x82\x13\x17\x15a\x06\xCDWa\x06\xCDaI\xD0V[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a*\x03Wa*\x03aI\xD0V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82aN\x85WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V\xFE'\xE0\x98\xC5\x05\xD4N\xC3W@\x04\xBC\xA0R\xAA\xBFv\xBD5\0L\x18 \x99\xD8\xC5u\xFB#\x85\x93\xB9\x1B=~\xDB.\x9C\x0B\x0E|R[ \xAA\xAE\xF0\xF5\x94\r.\xD7\x16c\xC7\xD3\x92f\xEC\xAF\xACr\x88Y\xC0\x90\xFCF\x83bL\xFC8\x84\xE9\xD8\xDE^\xCA\x13/-\x0E\xC0b\xAF\xF7]C\xC0F]\\\xEE\xAB#}K1d\xC6\xE4[\x97\xE7\xD8{q%\xA4LX(\xD0\x05\xAF\x88\xF9\xD7Q\xCF\xD7\x87)\xC5\xD9\x9A\x0B\xA2dipfsX\"\x12 \xB0(\xC1\xE0\xE3,}\xAE\xCF\x98J71B\xFE\x8A\xABF\xAA\xE5j\x88\x19\xEC@N\r\x16\x14\x1DfkdsolcC\0\x08\x1A\x003",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct BalanceDelta(alloy::sol_types::private::I256);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<BalanceDelta> for alloy::sol_types::private::I256 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Int<256>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(self).0
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl BalanceDelta {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::I256) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::I256 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for BalanceDelta {
            type RustType = alloy::sol_types::private::I256;
            type Token<'a> =
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Int<
                256,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::type_check(
                    token,
                )
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::detokenize(
                    token,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for BalanceDelta {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Currency(alloy::sol_types::private::Address);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Currency> for alloy::sol_types::private::Address {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Address,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(self).0
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encode_packed_to(
                    self,
                    out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl Currency {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::Address) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::Address {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Currency {
            type RustType = alloy::sol_types::private::Address;
            type Token<'a> =
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Currency {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                    rust,
                )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    out,
                )
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PoolId(alloy::sol_types::private::FixedBytes<32>);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<PoolId> for alloy::sol_types::private::FixedBytes<32> {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::tokenize(
                    self,
                )
                .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl PoolId {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::FixedBytes<32>) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::FixedBytes<32> {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PoolId {
            type RustType = alloy::sol_types::private::FixedBytes<32>;
            type Token<'a> =
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::FixedBytes<
                32,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::FixedBytes<
                32,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::type_check(
                    token,
                )
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::detokenize(
                    token,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PoolId {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
    struct ModifyLiquidityParams { int24 tickLower; int24 tickUpper; int256 liquidityDelta; bytes32 salt; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ModifyLiquidityParams {
        pub tickLower: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub liquidityDelta: alloy::sol_types::private::I256,
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<256>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::I256,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModifyLiquidityParams> for UnderlyingRustTuple<'_> {
            fn from(value: ModifyLiquidityParams) -> Self {
                (
                    value.tickLower,
                    value.tickUpper,
                    value.liquidityDelta,
                    value.salt,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModifyLiquidityParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tickLower: tuple.0,
                    tickUpper: tuple.1,
                    liquidityDelta: tuple.2,
                    salt: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModifyLiquidityParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModifyLiquidityParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.liquidityDelta),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModifyLiquidityParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModifyLiquidityParams {
            const NAME: &'static str = "ModifyLiquidityParams";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModifyLiquidityParams(int24 tickLower,int24 tickUpper,int256 liquidityDelta,bytes32 salt)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickLower)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickUpper)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.liquidityDelta,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.salt)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModifyLiquidityParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickLower,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickUpper,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.liquidityDelta,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.salt)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickLower,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickUpper,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.liquidityDelta,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.salt,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct PoolKey { Currency currency0; Currency currency1; uint24 fee; int24 tickSpacing; address hooks; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PoolKey {
        pub currency0: <Currency as alloy::sol_types::SolType>::RustType,
        pub currency1: <Currency as alloy::sol_types::SolType>::RustType,
        pub fee: <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
        pub tickSpacing:
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub hooks: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Currency,
            Currency,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Currency as alloy::sol_types::SolType>::RustType,
            <Currency as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolKey> for UnderlyingRustTuple<'_> {
            fn from(value: PoolKey) -> Self {
                (
                    value.currency0,
                    value.currency1,
                    value.fee,
                    value.tickSpacing,
                    value.hooks,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolKey {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currency0: tuple.0,
                    currency1: tuple.1,
                    fee: tuple.2,
                    tickSpacing: tuple.3,
                    hooks: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PoolKey {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PoolKey {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency0),
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency1),
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.fee,
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickSpacing,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.hooks,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PoolKey {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PoolKey {
            const NAME: &'static str = "PoolKey";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PoolKey(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency0,
                        )
                        .0,
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency1,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickSpacing)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.hooks,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PoolKey {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency0,
                    )
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickSpacing,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.hooks,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency0,
                    out,
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickSpacing,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.hooks,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct SwapParams { bool zeroForOne; int256 amountSpecified; uint160 sqrtPriceLimitX96; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SwapParams {
        pub zeroForOne: bool,
        pub amountSpecified: alloy::sol_types::private::I256,
        pub sqrtPriceLimitX96:
            <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Int<256>,
            alloy::sol_types::sol_data::Uint<160>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            bool,
            alloy::sol_types::private::I256,
            <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapParams> for UnderlyingRustTuple<'_> {
            fn from(value: SwapParams) -> Self {
                (
                    value.zeroForOne,
                    value.amountSpecified,
                    value.sqrtPriceLimitX96,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    zeroForOne: tuple.0,
                    amountSpecified: tuple.1,
                    sqrtPriceLimitX96: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.zeroForOne,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountSpecified,
                    ),
                    <alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceLimitX96,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapParams {
            const NAME: &'static str = "SwapParams";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapParams(bool zeroForOne,int256 amountSpecified,uint160 sqrtPriceLimitX96)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.zeroForOne,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.amountSpecified,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        160,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.sqrtPriceLimitX96,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.zeroForOne,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amountSpecified,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        160,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.sqrtPriceLimitX96,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.zeroForOne,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amountSpecified,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.sqrtPriceLimitX96,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**Custom error with signature `AlreadyUnlocked()` and selector `0x5090d6c6`.
    ```solidity
    error AlreadyUnlocked();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AlreadyUnlocked {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyUnlocked> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyUnlocked) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyUnlocked {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyUnlocked {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyUnlocked()";
            const SELECTOR: [u8; 4] = [80u8, 144u8, 214u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CurrenciesOutOfOrderOrEqual(address,address)` and selector `0x6e6c9830`.
    ```solidity
    error CurrenciesOutOfOrderOrEqual(address currency0, address currency1);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct CurrenciesOutOfOrderOrEqual {
        pub currency0: alloy::sol_types::private::Address,
        pub currency1: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CurrenciesOutOfOrderOrEqual> for UnderlyingRustTuple<'_> {
            fn from(value: CurrenciesOutOfOrderOrEqual) -> Self {
                (value.currency0, value.currency1)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CurrenciesOutOfOrderOrEqual {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currency0: tuple.0,
                    currency1: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CurrenciesOutOfOrderOrEqual {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CurrenciesOutOfOrderOrEqual(address,address)";
            const SELECTOR: [u8; 4] = [110u8, 108u8, 152u8, 48u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.currency0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.currency1,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `CurrencyNotSettled()` and selector `0x5212cba1`.
    ```solidity
    error CurrencyNotSettled();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct CurrencyNotSettled {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CurrencyNotSettled> for UnderlyingRustTuple<'_> {
            fn from(value: CurrencyNotSettled) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CurrencyNotSettled {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CurrencyNotSettled {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CurrencyNotSettled()";
            const SELECTOR: [u8; 4] = [82u8, 18u8, 203u8, 161u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `DelegateCallNotAllowed()` and selector `0x0d89438e`.
    ```solidity
    error DelegateCallNotAllowed();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DelegateCallNotAllowed {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DelegateCallNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: DelegateCallNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DelegateCallNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for DelegateCallNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DelegateCallNotAllowed()";
            const SELECTOR: [u8; 4] = [13u8, 137u8, 67u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidCaller()` and selector `0x48f5c3ed`.
    ```solidity
    error InvalidCaller();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidCaller {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCaller> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCaller) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCaller {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCaller {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCaller()";
            const SELECTOR: [u8; 4] = [72u8, 245u8, 195u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ManagerLocked()` and selector `0x54e3ca0d`.
    ```solidity
    error ManagerLocked();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ManagerLocked {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ManagerLocked> for UnderlyingRustTuple<'_> {
            fn from(value: ManagerLocked) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ManagerLocked {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ManagerLocked {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ManagerLocked()";
            const SELECTOR: [u8; 4] = [84u8, 227u8, 202u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MustClearExactPositiveDelta()` and selector `0xbda73abf`.
    ```solidity
    error MustClearExactPositiveDelta();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MustClearExactPositiveDelta {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MustClearExactPositiveDelta> for UnderlyingRustTuple<'_> {
            fn from(value: MustClearExactPositiveDelta) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MustClearExactPositiveDelta {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MustClearExactPositiveDelta {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MustClearExactPositiveDelta()";
            const SELECTOR: [u8; 4] = [189u8, 167u8, 58u8, 191u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NonZeroNativeValue()` and selector `0x19d245cf`.
    ```solidity
    error NonZeroNativeValue();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NonZeroNativeValue {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NonZeroNativeValue> for UnderlyingRustTuple<'_> {
            fn from(value: NonZeroNativeValue) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NonZeroNativeValue {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NonZeroNativeValue {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NonZeroNativeValue()";
            const SELECTOR: [u8; 4] = [25u8, 210u8, 69u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `PoolNotInitialized()` and selector `0x486aa307`.
    ```solidity
    error PoolNotInitialized();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PoolNotInitialized {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolNotInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: PoolNotInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolNotInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PoolNotInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PoolNotInitialized()";
            const SELECTOR: [u8; 4] = [72u8, 106u8, 163u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ProtocolFeeCannotBeFetched()` and selector `0x1ee49702`.
    ```solidity
    error ProtocolFeeCannotBeFetched();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ProtocolFeeCannotBeFetched {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProtocolFeeCannotBeFetched> for UnderlyingRustTuple<'_> {
            fn from(value: ProtocolFeeCannotBeFetched) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProtocolFeeCannotBeFetched {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProtocolFeeCannotBeFetched {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProtocolFeeCannotBeFetched()";
            const SELECTOR: [u8; 4] = [30u8, 228u8, 151u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ProtocolFeeTooLarge(uint24)` and selector `0xa7abe2f7`.
    ```solidity
    error ProtocolFeeTooLarge(uint24 fee);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ProtocolFeeTooLarge {
        pub fee: <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> =
            (<alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProtocolFeeTooLarge> for UnderlyingRustTuple<'_> {
            fn from(value: ProtocolFeeTooLarge) -> Self {
                (value.fee,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProtocolFeeTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { fee: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProtocolFeeTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProtocolFeeTooLarge(uint24)";
            const SELECTOR: [u8; 4] = [167u8, 171u8, 226u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.fee,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `SwapAmountCannotBeZero()` and selector `0xbe8b8507`.
    ```solidity
    error SwapAmountCannotBeZero();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SwapAmountCannotBeZero {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapAmountCannotBeZero> for UnderlyingRustTuple<'_> {
            fn from(value: SwapAmountCannotBeZero) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapAmountCannotBeZero {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SwapAmountCannotBeZero {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SwapAmountCannotBeZero()";
            const SELECTOR: [u8; 4] = [190u8, 139u8, 133u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TickSpacingTooLarge(int24)` and selector `0xb70024f8`.
    ```solidity
    error TickSpacingTooLarge(int24 tickSpacing);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct TickSpacingTooLarge {
        pub tickSpacing:
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> =
            (<alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TickSpacingTooLarge> for UnderlyingRustTuple<'_> {
            fn from(value: TickSpacingTooLarge) -> Self {
                (value.tickSpacing,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TickSpacingTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tickSpacing: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TickSpacingTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TickSpacingTooLarge(int24)";
            const SELECTOR: [u8; 4] = [183u8, 0u8, 36u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickSpacing,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TickSpacingTooSmall(int24)` and selector `0xe9e90588`.
    ```solidity
    error TickSpacingTooSmall(int24 tickSpacing);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct TickSpacingTooSmall {
        pub tickSpacing:
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> =
            (<alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TickSpacingTooSmall> for UnderlyingRustTuple<'_> {
            fn from(value: TickSpacingTooSmall) -> Self {
                (value.tickSpacing,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TickSpacingTooSmall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tickSpacing: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TickSpacingTooSmall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TickSpacingTooSmall(int24)";
            const SELECTOR: [u8; 4] = [233u8, 233u8, 5u8, 136u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickSpacing,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `UnauthorizedDynamicLPFeeUpdate()` and selector `0x30d21641`.
    ```solidity
    error UnauthorizedDynamicLPFeeUpdate();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct UnauthorizedDynamicLPFeeUpdate {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorizedDynamicLPFeeUpdate> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorizedDynamicLPFeeUpdate) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorizedDynamicLPFeeUpdate {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorizedDynamicLPFeeUpdate {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorizedDynamicLPFeeUpdate()";
            const SELECTOR: [u8; 4] = [48u8, 210u8, 22u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `Approval(address,address,uint256,uint256)` and selector `0xb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a7`.
    ```solidity
    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::U256,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    179u8, 253u8, 80u8, 113u8, 131u8, 88u8, 135u8, 86u8, 122u8, 6u8, 113u8, 21u8,
                    17u8, 33u8, 137u8, 77u8, 220u8, 204u8, 40u8, 66u8, 241u8, 209u8, 11u8, 237u8,
                    173u8, 19u8, 224u8, 209u8, 124u8, 172u8, 233u8, 167u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    spender: topics.2,
                    id: topics.3,
                    amount: data.0,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.owner.clone(),
                    self.spender.clone(),
                    self.id.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.spender,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.id);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialize(bytes32,address,address,uint24,int24,address,uint160,int24)` and selector `0xdd466e674ea557f56295e2d0218a125ea4b4f0f6f3307b95f85e6110838d6438`.
    ```solidity
    event Initialize(PoolId indexed id, Currency indexed currency0, Currency indexed currency1, uint24 fee, int24 tickSpacing, address hooks, uint160 sqrtPriceX96, int24 tick);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Initialize {
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub currency0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub currency1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub fee: <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tickSpacing:
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub hooks: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sqrtPriceX96:
            <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialize {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<160>,
                alloy::sol_types::sol_data::Int<24>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str =
                "Initialize(bytes32,address,address,uint24,int24,address,uint160,int24)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    221u8, 70u8, 110u8, 103u8, 78u8, 165u8, 87u8, 245u8, 98u8, 149u8, 226u8, 208u8,
                    33u8, 138u8, 18u8, 94u8, 164u8, 180u8, 240u8, 246u8, 243u8, 48u8, 123u8, 149u8,
                    248u8, 94u8, 97u8, 16u8, 131u8, 141u8, 100u8, 56u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    id: topics.1,
                    currency0: topics.2,
                    currency1: topics.3,
                    fee: data.0,
                    tickSpacing: data.1,
                    hooks: data.2,
                    sqrtPriceX96: data.3,
                    tick: data.4,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.fee,
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickSpacing,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.hooks,
                    ),
                    <alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceX96,
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tick,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.id.clone(),
                    self.currency0.clone(),
                    self.currency1.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy_sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.id);
                out[2usize] = <alloy_sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.currency0);
                out[3usize] = <alloy_sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.currency1);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialize {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialize> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialize) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ModifyLiquidity(bytes32,address,int24,int24,int256)` and selector `0x541c041c2cce48e614b3de043c9280f06b6164c0a1741649e2de3c3d375f7974`.
    ```solidity
    event ModifyLiquidity(PoolId indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct ModifyLiquidity {
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tickUpper: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub liquidityDelta: alloy::sol_types::private::I256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ModifyLiquidity {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ModifyLiquidity(bytes32,address,int24,int24,int256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    84u8, 28u8, 4u8, 28u8, 44u8, 206u8, 72u8, 230u8, 20u8, 179u8, 222u8, 4u8, 60u8,
                    146u8, 128u8, 240u8, 107u8, 97u8, 100u8, 192u8, 161u8, 116u8, 22u8, 73u8,
                    226u8, 222u8, 60u8, 61u8, 55u8, 95u8, 121u8, 116u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    id: topics.1,
                    sender: topics.2,
                    tickLower: data.0,
                    tickUpper: data.1,
                    liquidityDelta: data.2,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickLower,
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickUpper,
                    ),
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.liquidityDelta,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.id.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy_sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.id);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ModifyLiquidity {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ModifyLiquidity> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ModifyLiquidity) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OperatorSet(address,address,bool)` and selector `0xceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267`.
    ```solidity
    event OperatorSet(address indexed owner, address indexed operator, bool approved);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct OperatorSet {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub approved: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OperatorSet {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OperatorSet(address,address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    206u8, 181u8, 118u8, 217u8, 241u8, 94u8, 78u8, 32u8, 15u8, 219u8, 80u8, 150u8,
                    214u8, 77u8, 93u8, 253u8, 102u8, 126u8, 22u8, 222u8, 242u8, 12u8, 30u8, 239u8,
                    209u8, 66u8, 86u8, 216u8, 227u8, 250u8, 162u8, 103u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    operator: topics.2,
                    approved: data.0,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.owner.clone(),
                    self.operator.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.operator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OperatorSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OperatorSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OperatorSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
    ```solidity
    event OwnershipTransferred(address indexed user, address indexed newOwner);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8, 31u8,
                    208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8, 218u8,
                    175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    user: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.user.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProtocolFeeControllerUpdated(address)` and selector `0xb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc`.
    ```solidity
    event ProtocolFeeControllerUpdated(address indexed protocolFeeController);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct ProtocolFeeControllerUpdated {
        #[allow(missing_docs)]
        pub protocolFeeController: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProtocolFeeControllerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ProtocolFeeControllerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    180u8, 189u8, 142u8, 245u8, 61u8, 246u8, 144u8, 185u8, 148u8, 61u8, 51u8, 24u8,
                    153u8, 96u8, 6u8, 219u8, 184u8, 42u8, 37u8, 245u8, 71u8, 25u8, 216u8, 200u8,
                    3u8, 91u8, 81u8, 106u8, 42u8, 91u8, 138u8, 204u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    protocolFeeController: topics.1,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.protocolFeeController.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.protocolFeeController,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProtocolFeeControllerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProtocolFeeControllerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProtocolFeeControllerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProtocolFeeUpdated(bytes32,uint24)` and selector `0xe9c42593e71f84403b84352cd168d693e2c9fcd1fdbcc3feb21d92b43e6696f9`.
    ```solidity
    event ProtocolFeeUpdated(PoolId indexed id, uint24 protocolFee);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct ProtocolFeeUpdated {
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub protocolFee:
            <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProtocolFeeUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ProtocolFeeUpdated(bytes32,uint24)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    233u8, 196u8, 37u8, 147u8, 231u8, 31u8, 132u8, 64u8, 59u8, 132u8, 53u8, 44u8,
                    209u8, 104u8, 214u8, 147u8, 226u8, 201u8, 252u8, 209u8, 253u8, 188u8, 195u8,
                    254u8, 178u8, 29u8, 146u8, 180u8, 62u8, 102u8, 150u8, 249u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    id: topics.1,
                    protocolFee: data.0,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.protocolFee,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.id.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy_sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.id);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProtocolFeeUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProtocolFeeUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProtocolFeeUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)` and selector `0x40e9cecb9f5f1f1c5b9c97dec2917b7ee92e57ba5563708daca94dd84ad7112f`.
    ```solidity
    event Swap(PoolId indexed id, address indexed sender, int128 amount0, int128 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick, uint24 fee);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Swap {
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount0: i128,
        #[allow(missing_docs)]
        pub amount1: i128,
        #[allow(missing_docs)]
        pub sqrtPriceX96:
            <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub liquidity: u128,
        #[allow(missing_docs)]
        pub tick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub fee: <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Swap {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Int<128>,
                alloy::sol_types::sol_data::Int<128>,
                alloy::sol_types::sol_data::Uint<160>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<24>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str =
                "Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    64u8, 233u8, 206u8, 203u8, 159u8, 95u8, 31u8, 28u8, 91u8, 156u8, 151u8, 222u8,
                    194u8, 145u8, 123u8, 126u8, 233u8, 46u8, 87u8, 186u8, 85u8, 99u8, 112u8, 141u8,
                    172u8, 169u8, 77u8, 216u8, 74u8, 215u8, 17u8, 47u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    id: topics.1,
                    sender: topics.2,
                    amount0: data.0,
                    amount1: data.1,
                    sqrtPriceX96: data.2,
                    liquidity: data.3,
                    tick: data.4,
                    fee: data.5,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Int<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <alloy::sol_types::sol_data::Int<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                    <alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceX96,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.liquidity,
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tick,
                    ),
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.fee,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.id.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy_sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.id);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Swap {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Swap> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Swap) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,address,uint256,uint256)` and selector `0x1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac728859`.
    ```solidity
    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub caller: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::U256,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    27u8, 61u8, 126u8, 219u8, 46u8, 156u8, 11u8, 14u8, 124u8, 82u8, 91u8, 32u8,
                    170u8, 174u8, 240u8, 245u8, 148u8, 13u8, 46u8, 215u8, 22u8, 99u8, 199u8, 211u8,
                    146u8, 102u8, 236u8, 175u8, 172u8, 114u8, 136u8, 89u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    caller: data.0,
                    from: topics.1,
                    to: topics.2,
                    id: topics.3,
                    amount: data.1,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.to.clone(),
                    self.id.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.id);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
    ```solidity
    constructor(uint256 controllerGasLimit);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub controllerGasLimit: alloy::sol_types::private::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.controllerGasLimit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        controllerGasLimit: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.controllerGasLimit,
                    ),
                )
            }
        }
    };
    /**Function with signature `allowance(address,address,uint256)` and selector `0x598af9e7`.
    ```solidity
    function allowance(address owner, address spender, uint256 id) external view returns (uint256 amount);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceCall {
        pub owner: alloy::sol_types::private::Address,
        pub spender: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`allowance(address,address,uint256)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        pub amount: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value.owner, value.spender, value.id)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                        id: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(address,address,uint256)";
            const SELECTOR: [u8; 4] = [89u8, 138u8, 249u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.id,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(address,uint256,uint256)` and selector `0x426a8493`.
    ```solidity
    function approve(address spender, uint256 id, uint256 amount) external returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveCall {
        pub spender: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::U256,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.id, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        id: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [66u8, 106u8, 132u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.id,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address,uint256)` and selector `0x00fdd58e`.
    ```solidity
    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        pub owner: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`balanceOf(address,uint256)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        pub balance: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.owner, value.id)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        id: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value.balance,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { balance: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address,uint256)";
            const SELECTOR: [u8; 4] = [0u8, 253u8, 213u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.id,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `burn(address,uint256,uint256)` and selector `0xf5298aca`.
    ```solidity
    function burn(address from, uint256 id, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct burnCall {
        pub from: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::U256,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`burn(address,uint256,uint256)`](burnCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct burnReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnCall> for UnderlyingRustTuple<'_> {
                fn from(value: burnCall) -> Self {
                    (value.from, value.id, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        id: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnReturn> for UnderlyingRustTuple<'_> {
                fn from(value: burnReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for burnCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = burnReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "burn(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [245u8, 41u8, 138u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.id,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `clear(address,uint256)` and selector `0x80f0b44c`.
    ```solidity
    function clear(Currency currency, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct clearCall {
        pub currency: <Currency as alloy::sol_types::SolType>::RustType,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`clear(address,uint256)`](clearCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct clearReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Currency, alloy::sol_types::sol_data::Uint<256>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Currency as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clearCall> for UnderlyingRustTuple<'_> {
                fn from(value: clearCall) -> Self {
                    (value.currency, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clearCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        currency: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clearReturn> for UnderlyingRustTuple<'_> {
                fn from(value: clearReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clearReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for clearCall {
            type Parameters<'a> = (Currency, alloy::sol_types::sol_data::Uint<256>);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = clearReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "clear(address,uint256)";
            const SELECTOR: [u8; 4] = [128u8, 240u8, 180u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `collectProtocolFees(address,address,uint256)` and selector `0x8161b874`.
    ```solidity
    function collectProtocolFees(address recipient, Currency currency, uint256 amount) external returns (uint256 amountCollected);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct collectProtocolFeesCall {
        pub recipient: alloy::sol_types::private::Address,
        pub currency: <Currency as alloy::sol_types::SolType>::RustType,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`collectProtocolFees(address,address,uint256)`](collectProtocolFeesCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct collectProtocolFeesReturn {
        pub amountCollected: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                Currency,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <Currency as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<collectProtocolFeesCall> for UnderlyingRustTuple<'_> {
                fn from(value: collectProtocolFeesCall) -> Self {
                    (value.recipient, value.currency, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for collectProtocolFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipient: tuple.0,
                        currency: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<collectProtocolFeesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: collectProtocolFeesReturn) -> Self {
                    (value.amountCollected,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for collectProtocolFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountCollected: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for collectProtocolFeesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                Currency,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = collectProtocolFeesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "collectProtocolFees(address,address,uint256)";
            const SELECTOR: [u8; 4] = [129u8, 97u8, 184u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `donate((address,address,uint24,int24,address),uint256,uint256,bytes)` and selector `0x234266d7`.
    ```solidity
    function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes memory hookData) external returns (BalanceDelta delta);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct donateCall {
        pub key: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub amount0: alloy::sol_types::private::U256,
        pub amount1: alloy::sol_types::private::U256,
        pub hookData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`donate((address,address,uint24,int24,address),uint256,uint256,bytes)`](donateCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct donateReturn {
        pub delta: <BalanceDelta as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                PoolKey,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolKey as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<donateCall> for UnderlyingRustTuple<'_> {
                fn from(value: donateCall) -> Self {
                    (value.key, value.amount0, value.amount1, value.hookData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for donateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        amount0: tuple.1,
                        amount1: tuple.2,
                        hookData: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (BalanceDelta,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (<BalanceDelta as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<donateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: donateReturn) -> Self {
                    (value.delta,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for donateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { delta: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for donateCall {
            type Parameters<'a> = (
                PoolKey,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = donateReturn;
            type ReturnTuple<'a> = (BalanceDelta,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "donate((address,address,uint24,int24,address),uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [35u8, 66u8, 102u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.key),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.hookData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `extsload(bytes32)` and selector `0x1e2eaeaf`.
    ```solidity
    function extsload(bytes32 slot) external view returns (bytes32);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct extsload_0Call {
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`extsload(bytes32)`](extsload_0Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct extsload_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<extsload_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: extsload_0Call) -> Self {
                    (value.slot,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for extsload_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { slot: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<extsload_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: extsload_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for extsload_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for extsload_0Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = extsload_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "extsload(bytes32)";
            const SELECTOR: [u8; 4] = [30u8, 46u8, 174u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `extsload(bytes32,uint256)` and selector `0x35fd631a`.
    ```solidity
    function extsload(bytes32 startSlot, uint256 nSlots) external view returns (bytes32[] memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct extsload_1Call {
        pub startSlot: alloy::sol_types::private::FixedBytes<32>,
        pub nSlots: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`extsload(bytes32,uint256)`](extsload_1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct extsload_1Return {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<extsload_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: extsload_1Call) -> Self {
                    (value.startSlot, value.nSlots)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for extsload_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        startSlot: tuple.0,
                        nSlots: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<extsload_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: extsload_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for extsload_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for extsload_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = extsload_1Return;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "extsload(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [53u8, 253u8, 99u8, 26u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.startSlot),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nSlots),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `extsload(bytes32[])` and selector `0xdbd035ff`.
    ```solidity
    function extsload(bytes32[] memory slots) external view returns (bytes32[] memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct extsload_2Call {
        pub slots: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
    }
    ///Container type for the return parameters of the [`extsload(bytes32[])`](extsload_2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct extsload_2Return {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<extsload_2Call> for UnderlyingRustTuple<'_> {
                fn from(value: extsload_2Call) -> Self {
                    (value.slots,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for extsload_2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { slots: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<extsload_2Return> for UnderlyingRustTuple<'_> {
                fn from(value: extsload_2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for extsload_2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for extsload_2Call {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = extsload_2Return;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "extsload(bytes32[])";
            const SELECTOR: [u8; 4] = [219u8, 208u8, 53u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.slots
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `exttload(bytes32[])` and selector `0x9bf6645f`.
    ```solidity
    function exttload(bytes32[] memory slots) external view returns (bytes32[] memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct exttload_0Call {
        pub slots: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
    }
    ///Container type for the return parameters of the [`exttload(bytes32[])`](exttload_0Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct exttload_0Return {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<exttload_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: exttload_0Call) -> Self {
                    (value.slots,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for exttload_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { slots: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<exttload_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: exttload_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for exttload_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for exttload_0Call {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = exttload_0Return;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::FixedBytes<32>>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "exttload(bytes32[])";
            const SELECTOR: [u8; 4] = [155u8, 246u8, 100u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.slots
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `exttload(bytes32)` and selector `0xf135baaa`.
    ```solidity
    function exttload(bytes32 slot) external view returns (bytes32);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct exttload_1Call {
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`exttload(bytes32)`](exttload_1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct exttload_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<exttload_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: exttload_1Call) -> Self {
                    (value.slot,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for exttload_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { slot: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<exttload_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: exttload_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for exttload_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for exttload_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = exttload_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "exttload(bytes32)";
            const SELECTOR: [u8; 4] = [241u8, 53u8, 186u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize((address,address,uint24,int24,address),uint160,bytes)` and selector `0x695c5bf5`.
    ```solidity
    function initialize(PoolKey memory key, uint160 sqrtPriceX96, bytes memory hookData) external returns (int24 tick);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializeCall {
        pub key: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub sqrtPriceX96:
            <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType,
        pub hookData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`initialize((address,address,uint24,int24,address),uint160,bytes)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializeReturn {
        pub tick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                PoolKey,
                alloy::sol_types::sol_data::Uint<160>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.key, value.sqrtPriceX96, value.hookData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        sqrtPriceX96: tuple.1,
                        hookData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (<alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    (value.tick,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tick: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                PoolKey,
                alloy::sol_types::sol_data::Uint<160>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "initialize((address,address,uint24,int24,address),uint160,bytes)";
            const SELECTOR: [u8; 4] = [105u8, 92u8, 91u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.key),
                    <alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceX96,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.hookData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isOperator(address,address)` and selector `0xb6363cf2`.
    ```solidity
    function isOperator(address owner, address operator) external view returns (bool isOperator);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct isOperatorCall {
        pub owner: alloy::sol_types::private::Address,
        pub operator: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isOperator(address,address)`](isOperatorCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct isOperatorReturn {
        pub isOperator: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isOperatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: isOperatorCall) -> Self {
                    (value.owner, value.operator)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isOperatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        operator: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isOperatorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isOperatorReturn) -> Self {
                    (value.isOperator,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isOperatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        isOperator: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isOperatorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = isOperatorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isOperator(address,address)";
            const SELECTOR: [u8; 4] = [182u8, 54u8, 60u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `mint(address,uint256,uint256)` and selector `0x156e29f6`.
    ```solidity
    function mint(address to, uint256 id, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mintCall {
        pub to: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::U256,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`mint(address,uint256,uint256)`](mintCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mintReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (value.to, value.id, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        id: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [21u8, 110u8, 41u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.id,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `modifyLiquidity((address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)` and selector `0x5a6bcfda`.
    ```solidity
    function modifyLiquidity(PoolKey memory key, ModifyLiquidityParams memory params, bytes memory hookData) external returns (BalanceDelta callerDelta, BalanceDelta feesAccrued);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct modifyLiquidityCall {
        pub key: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub params: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
        pub hookData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`modifyLiquidity((address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)`](modifyLiquidityCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct modifyLiquidityReturn {
        pub callerDelta: <BalanceDelta as alloy::sol_types::SolType>::RustType,
        pub feesAccrued: <BalanceDelta as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                PoolKey,
                ModifyLiquidityParams,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<modifyLiquidityCall> for UnderlyingRustTuple<'_> {
                fn from(value: modifyLiquidityCall) -> Self {
                    (value.key, value.params, value.hookData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for modifyLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        params: tuple.1,
                        hookData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (BalanceDelta, BalanceDelta);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <BalanceDelta as alloy::sol_types::SolType>::RustType,
                <BalanceDelta as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<modifyLiquidityReturn> for UnderlyingRustTuple<'_> {
                fn from(value: modifyLiquidityReturn) -> Self {
                    (value.callerDelta, value.feesAccrued)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for modifyLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        callerDelta: tuple.0,
                        feesAccrued: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for modifyLiquidityCall {
            type Parameters<'a> = (
                PoolKey,
                ModifyLiquidityParams,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = modifyLiquidityReturn;
            type ReturnTuple<'a> = (BalanceDelta, BalanceDelta);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "modifyLiquidity((address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)";
            const SELECTOR: [u8; 4] = [90u8, 107u8, 207u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.key),
                    <ModifyLiquidityParams as alloy_sol_types::SolType>::tokenize(&self.params),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.hookData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
    ```solidity
    function owner() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `protocolFeeController()` and selector `0xf02de3b2`.
    ```solidity
    function protocolFeeController() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct protocolFeeControllerCall {}
    ///Container type for the return parameters of the [`protocolFeeController()`](protocolFeeControllerCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct protocolFeeControllerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<protocolFeeControllerCall> for UnderlyingRustTuple<'_> {
                fn from(value: protocolFeeControllerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for protocolFeeControllerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<protocolFeeControllerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: protocolFeeControllerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for protocolFeeControllerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for protocolFeeControllerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = protocolFeeControllerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "protocolFeeController()";
            const SELECTOR: [u8; 4] = [240u8, 45u8, 227u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `protocolFeesAccrued(address)` and selector `0x97e8cd4e`.
    ```solidity
    function protocolFeesAccrued(Currency currency) external view returns (uint256 amount);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct protocolFeesAccruedCall {
        pub currency: <Currency as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`protocolFeesAccrued(address)`](protocolFeesAccruedCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct protocolFeesAccruedReturn {
        pub amount: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Currency,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (<Currency as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<protocolFeesAccruedCall> for UnderlyingRustTuple<'_> {
                fn from(value: protocolFeesAccruedCall) -> Self {
                    (value.currency,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for protocolFeesAccruedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { currency: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<protocolFeesAccruedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: protocolFeesAccruedReturn) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for protocolFeesAccruedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for protocolFeesAccruedCall {
            type Parameters<'a> = (Currency,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = protocolFeesAccruedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "protocolFeesAccrued(address)";
            const SELECTOR: [u8; 4] = [151u8, 232u8, 205u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<Currency as alloy_sol_types::SolType>::tokenize(
                    &self.currency,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setOperator(address,bool)` and selector `0x558a7297`.
    ```solidity
    function setOperator(address operator, bool approved) external returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setOperatorCall {
        pub operator: alloy::sol_types::private::Address,
        pub approved: bool,
    }
    ///Container type for the return parameters of the [`setOperator(address,bool)`](setOperatorCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setOperatorReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOperatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: setOperatorCall) -> Self {
                    (value.operator, value.approved)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setOperatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        operator: tuple.0,
                        approved: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOperatorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setOperatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setOperatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setOperatorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setOperatorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setOperator(address,bool)";
            const SELECTOR: [u8; 4] = [85u8, 138u8, 114u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setProtocolFee((address,address,uint24,int24,address),uint24)` and selector `0x7e87ce7d`.
    ```solidity
    function setProtocolFee(PoolKey memory key, uint24 newProtocolFee) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setProtocolFeeCall {
        pub key: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub newProtocolFee:
            <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`setProtocolFee((address,address,uint24,int24,address),uint24)`](setProtocolFeeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setProtocolFeeReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PoolKey, alloy::sol_types::sol_data::Uint<24>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeCall> for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeCall) -> Self {
                    (value.key, value.newProtocolFee)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setProtocolFeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        newProtocolFee: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setProtocolFeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setProtocolFeeCall {
            type Parameters<'a> = (PoolKey, alloy::sol_types::sol_data::Uint<24>);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setProtocolFeeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "setProtocolFee((address,address,uint24,int24,address),uint24)";
            const SELECTOR: [u8; 4] = [126u8, 135u8, 206u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.key),
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.newProtocolFee,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setProtocolFeeController(address)` and selector `0x2d771389`.
    ```solidity
    function setProtocolFeeController(address controller) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setProtocolFeeControllerCall {
        pub controller: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setProtocolFeeController(address)`](setProtocolFeeControllerCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setProtocolFeeControllerReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeControllerCall> for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeControllerCall) -> Self {
                    (value.controller,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setProtocolFeeControllerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        controller: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeControllerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeControllerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setProtocolFeeControllerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setProtocolFeeControllerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setProtocolFeeControllerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setProtocolFeeController(address)";
            const SELECTOR: [u8; 4] = [45u8, 119u8, 19u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.controller,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `settle()` and selector `0x11da60b4`.
    ```solidity
    function settle() external payable returns (uint256 paid);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct settleCall {}
    ///Container type for the return parameters of the [`settle()`](settleCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct settleReturn {
        pub paid: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settleCall> for UnderlyingRustTuple<'_> {
                fn from(value: settleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for settleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: settleReturn) -> Self {
                    (value.paid,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for settleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { paid: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for settleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = settleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "settle()";
            const SELECTOR: [u8; 4] = [17u8, 218u8, 96u8, 180u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `settleFor(address)` and selector `0x3dd45adb`.
    ```solidity
    function settleFor(address recipient) external payable returns (uint256 paid);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct settleForCall {
        pub recipient: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`settleFor(address)`](settleForCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct settleForReturn {
        pub paid: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settleForCall> for UnderlyingRustTuple<'_> {
                fn from(value: settleForCall) -> Self {
                    (value.recipient,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for settleForCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { recipient: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settleForReturn> for UnderlyingRustTuple<'_> {
                fn from(value: settleForReturn) -> Self {
                    (value.paid,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for settleForReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { paid: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for settleForCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = settleForReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "settleFor(address)";
            const SELECTOR: [u8; 4] = [61u8, 212u8, 90u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
    ```solidity
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall> for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        interfaceId: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes)` and selector `0xf3cd914c`.
    ```solidity
    function swap(PoolKey memory key, SwapParams memory params, bytes memory hookData) external returns (BalanceDelta swapDelta);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapCall {
        pub key: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
        pub hookData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes)`](swapCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapReturn {
        pub swapDelta: <BalanceDelta as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PoolKey, SwapParams, alloy::sol_types::sol_data::Bytes);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <SwapParams as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapCall) -> Self {
                    (value.key, value.params, value.hookData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        params: tuple.1,
                        hookData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (BalanceDelta,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (<BalanceDelta as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapReturn) -> Self {
                    (value.swapDelta,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapDelta: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapCall {
            type Parameters<'a> = (PoolKey, SwapParams, alloy::sol_types::sol_data::Bytes);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapReturn;
            type ReturnTuple<'a> = (BalanceDelta,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes)";
            const SELECTOR: [u8; 4] = [243u8, 205u8, 145u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.key),
                    <SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.hookData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `sync(address)` and selector `0xa5841194`.
    ```solidity
    function sync(Currency currency) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct syncCall {
        pub currency: <Currency as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`sync(address)`](syncCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct syncReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Currency,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (<Currency as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syncCall> for UnderlyingRustTuple<'_> {
                fn from(value: syncCall) -> Self {
                    (value.currency,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syncCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { currency: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syncReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syncReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syncReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syncCall {
            type Parameters<'a> = (Currency,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = syncReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sync(address)";
            const SELECTOR: [u8; 4] = [165u8, 132u8, 17u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<Currency as alloy_sol_types::SolType>::tokenize(
                    &self.currency,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `take(address,address,uint256)` and selector `0x0b0d9c09`.
    ```solidity
    function take(Currency currency, address to, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct takeCall {
        pub currency: <Currency as alloy::sol_types::SolType>::RustType,
        pub to: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`take(address,address,uint256)`](takeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct takeReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                Currency,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Currency as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<takeCall> for UnderlyingRustTuple<'_> {
                fn from(value: takeCall) -> Self {
                    (value.currency, value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for takeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        currency: tuple.0,
                        to: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<takeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: takeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for takeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for takeCall {
            type Parameters<'a> = (
                Currency,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = takeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "take(address,address,uint256)";
            const SELECTOR: [u8; 4] = [11u8, 13u8, 156u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `transfer(address,uint256,uint256)` and selector `0x095bcdb6`.
    ```solidity
    function transfer(address receiver, uint256 id, uint256 amount) external returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferCall {
        pub receiver: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::U256,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`transfer(address,uint256,uint256)`](transferCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCall) -> Self {
                    (value.receiver, value.id, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        receiver: tuple.0,
                        id: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfer(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 91u8, 205u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.id,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256,uint256)` and selector `0xfe99049a`.
    ```solidity
    function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromCall {
        pub sender: alloy::sol_types::private::Address,
        pub receiver: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::U256,
        pub amount: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.sender, value.receiver, value.id, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sender: tuple.0,
                        receiver: tuple.1,
                        id: tuple.2,
                        amount: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [254u8, 153u8, 4u8, 154u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.id,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
    ```solidity
    function transferOwnership(address newOwner) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `unlock(bytes)` and selector `0x48c89491`.
    ```solidity
    function unlock(bytes memory data) external returns (bytes memory result);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct unlockCall {
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`unlock(bytes)`](unlockCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct unlockReturn {
        pub result: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockCall> for UnderlyingRustTuple<'_> {
                fn from(value: unlockCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unlockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unlockReturn) -> Self {
                    (value.result,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unlockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { result: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unlockCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = unlockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unlock(bytes)";
            const SELECTOR: [u8; 4] = [72u8, 200u8, 148u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDynamicLPFee((address,address,uint24,int24,address),uint24)` and selector `0x52759651`.
    ```solidity
    function updateDynamicLPFee(PoolKey memory key, uint24 newDynamicLPFee) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct updateDynamicLPFeeCall {
        pub key: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub newDynamicLPFee:
            <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`updateDynamicLPFee((address,address,uint24,int24,address),uint24)`](updateDynamicLPFeeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct updateDynamicLPFeeReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PoolKey, alloy::sol_types::sol_data::Uint<24>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDynamicLPFeeCall> for UnderlyingRustTuple<'_> {
                fn from(value: updateDynamicLPFeeCall) -> Self {
                    (value.key, value.newDynamicLPFee)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for updateDynamicLPFeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        newDynamicLPFee: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDynamicLPFeeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: updateDynamicLPFeeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for updateDynamicLPFeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDynamicLPFeeCall {
            type Parameters<'a> = (PoolKey, alloy::sol_types::sol_data::Uint<24>);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDynamicLPFeeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "updateDynamicLPFee((address,address,uint24,int24,address),uint24)";
            const SELECTOR: [u8; 4] = [82u8, 117u8, 150u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.key),
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.newDynamicLPFee,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`PoolManager`](self) function calls.
    pub enum PoolManagerCalls {
        allowance(allowanceCall),
        approve(approveCall),
        balanceOf(balanceOfCall),
        burn(burnCall),
        clear(clearCall),
        collectProtocolFees(collectProtocolFeesCall),
        donate(donateCall),
        extsload_0(extsload_0Call),
        extsload_1(extsload_1Call),
        extsload_2(extsload_2Call),
        exttload_0(exttload_0Call),
        exttload_1(exttload_1Call),
        initialize(initializeCall),
        isOperator(isOperatorCall),
        mint(mintCall),
        modifyLiquidity(modifyLiquidityCall),
        owner(ownerCall),
        protocolFeeController(protocolFeeControllerCall),
        protocolFeesAccrued(protocolFeesAccruedCall),
        setOperator(setOperatorCall),
        setProtocolFee(setProtocolFeeCall),
        setProtocolFeeController(setProtocolFeeControllerCall),
        settle(settleCall),
        settleFor(settleForCall),
        supportsInterface(supportsInterfaceCall),
        swap(swapCall),
        sync(syncCall),
        take(takeCall),
        transfer(transferCall),
        transferFrom(transferFromCall),
        transferOwnership(transferOwnershipCall),
        unlock(unlockCall),
        updateDynamicLPFee(updateDynamicLPFeeCall),
    }
    #[automatically_derived]
    impl PoolManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 253u8, 213u8, 142u8],
            [1u8, 255u8, 201u8, 167u8],
            [9u8, 91u8, 205u8, 182u8],
            [11u8, 13u8, 156u8, 9u8],
            [17u8, 218u8, 96u8, 180u8],
            [21u8, 110u8, 41u8, 246u8],
            [30u8, 46u8, 174u8, 175u8],
            [35u8, 66u8, 102u8, 215u8],
            [45u8, 119u8, 19u8, 137u8],
            [53u8, 253u8, 99u8, 26u8],
            [61u8, 212u8, 90u8, 219u8],
            [66u8, 106u8, 132u8, 147u8],
            [72u8, 200u8, 148u8, 145u8],
            [82u8, 117u8, 150u8, 81u8],
            [85u8, 138u8, 114u8, 151u8],
            [89u8, 138u8, 249u8, 231u8],
            [90u8, 107u8, 207u8, 218u8],
            [105u8, 92u8, 91u8, 245u8],
            [126u8, 135u8, 206u8, 125u8],
            [128u8, 240u8, 180u8, 76u8],
            [129u8, 97u8, 184u8, 116u8],
            [141u8, 165u8, 203u8, 91u8],
            [151u8, 232u8, 205u8, 78u8],
            [155u8, 246u8, 100u8, 95u8],
            [165u8, 132u8, 17u8, 148u8],
            [182u8, 54u8, 60u8, 242u8],
            [219u8, 208u8, 53u8, 255u8],
            [240u8, 45u8, 227u8, 178u8],
            [241u8, 53u8, 186u8, 170u8],
            [242u8, 253u8, 227u8, 139u8],
            [243u8, 205u8, 145u8, 76u8],
            [245u8, 41u8, 138u8, 202u8],
            [254u8, 153u8, 4u8, 154u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PoolManagerCalls {
        const NAME: &'static str = "PoolManagerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 33usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::allowance(_) => <allowanceCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::burn(_) => <burnCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::clear(_) => <clearCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::collectProtocolFees(_) => {
                    <collectProtocolFeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::donate(_) => <donateCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::extsload_0(_) => <extsload_0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::extsload_1(_) => <extsload_1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::extsload_2(_) => <extsload_2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::exttload_0(_) => <exttload_0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::exttload_1(_) => <exttload_1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::initialize(_) => <initializeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isOperator(_) => <isOperatorCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::modifyLiquidity(_) => {
                    <modifyLiquidityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::protocolFeeController(_) => {
                    <protocolFeeControllerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::protocolFeesAccrued(_) => {
                    <protocolFeesAccruedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setOperator(_) => <setOperatorCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setProtocolFee(_) => {
                    <setProtocolFeeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setProtocolFeeController(_) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::settle(_) => <settleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::settleFor(_) => <settleForCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swap(_) => <swapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::sync(_) => <syncCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::take(_) => <takeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transfer(_) => <transferCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => <transferFromCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unlock(_) => <unlockCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::updateDynamicLPFee(_) => {
                    <updateDynamicLPFeeCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<PoolManagerCalls>] =
                &[
                    {
                        fn balanceOf(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::balanceOf)
                        }
                        balanceOf
                    },
                    {
                        fn supportsInterface(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::supportsInterface)
                        }
                        supportsInterface
                    },
                    {
                        fn transfer(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <transferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::transfer)
                        }
                        transfer
                    },
                    {
                        fn take(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <takeCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::take)
                        }
                        take
                    },
                    {
                        fn settle(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <settleCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::settle)
                        }
                        settle
                    },
                    {
                        fn mint(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::mint)
                        }
                        mint
                    },
                    {
                        fn extsload_0(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <extsload_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::extsload_0)
                        }
                        extsload_0
                    },
                    {
                        fn donate(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <donateCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::donate)
                        }
                        donate
                    },
                    {
                        fn setProtocolFeeController(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PoolManagerCalls::setProtocolFeeController)
                        }
                        setProtocolFeeController
                    },
                    {
                        fn extsload_1(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <extsload_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::extsload_1)
                        }
                        extsload_1
                    },
                    {
                        fn settleFor(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <settleForCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::settleFor)
                        }
                        settleFor
                    },
                    {
                        fn approve(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::approve)
                        }
                        approve
                    },
                    {
                        fn unlock(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <unlockCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::unlock)
                        }
                        unlock
                    },
                    {
                        fn updateDynamicLPFee(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <updateDynamicLPFeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::updateDynamicLPFee)
                        }
                        updateDynamicLPFee
                    },
                    {
                        fn setOperator(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <setOperatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::setOperator)
                        }
                        setOperator
                    },
                    {
                        fn allowance(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::allowance)
                        }
                        allowance
                    },
                    {
                        fn modifyLiquidity(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <modifyLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::modifyLiquidity)
                        }
                        modifyLiquidity
                    },
                    {
                        fn initialize(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::initialize)
                        }
                        initialize
                    },
                    {
                        fn setProtocolFee(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <setProtocolFeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::setProtocolFee)
                        }
                        setProtocolFee
                    },
                    {
                        fn clear(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <clearCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::clear)
                        }
                        clear
                    },
                    {
                        fn collectProtocolFees(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <collectProtocolFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::collectProtocolFees)
                        }
                        collectProtocolFees
                    },
                    {
                        fn owner(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::owner)
                        }
                        owner
                    },
                    {
                        fn protocolFeesAccrued(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <protocolFeesAccruedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::protocolFeesAccrued)
                        }
                        protocolFeesAccrued
                    },
                    {
                        fn exttload_0(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <exttload_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::exttload_0)
                        }
                        exttload_0
                    },
                    {
                        fn sync(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <syncCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::sync)
                        }
                        sync
                    },
                    {
                        fn isOperator(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <isOperatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::isOperator)
                        }
                        isOperator
                    },
                    {
                        fn extsload_2(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <extsload_2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::extsload_2)
                        }
                        extsload_2
                    },
                    {
                        fn protocolFeeController(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <protocolFeeControllerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::protocolFeeController)
                        }
                        protocolFeeController
                    },
                    {
                        fn exttload_1(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <exttload_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::exttload_1)
                        }
                        exttload_1
                    },
                    {
                        fn transferOwnership(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::transferOwnership)
                        }
                        transferOwnership
                    },
                    {
                        fn swap(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <swapCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::swap)
                        }
                        swap
                    },
                    {
                        fn burn(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <burnCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(PoolManagerCalls::burn)
                        }
                        burn
                    },
                    {
                        fn transferFrom(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<PoolManagerCalls> {
                            <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(PoolManagerCalls::transferFrom)
                        }
                        transferFrom
                    },
                ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::burn(inner) => {
                    <burnCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::clear(inner) => {
                    <clearCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::collectProtocolFees(inner) => {
                    <collectProtocolFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::donate(inner) => {
                    <donateCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::extsload_0(inner) => {
                    <extsload_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::extsload_1(inner) => {
                    <extsload_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::extsload_2(inner) => {
                    <extsload_2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::exttload_0(inner) => {
                    <exttload_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::exttload_1(inner) => {
                    <exttload_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isOperator(inner) => {
                    <isOperatorCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::modifyLiquidity(inner) => {
                    <modifyLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::protocolFeeController(inner) => {
                    <protocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::protocolFeesAccrued(inner) => {
                    <protocolFeesAccruedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setOperator(inner) => {
                    <setOperatorCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setProtocolFee(inner) => {
                    <setProtocolFeeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setProtocolFeeController(inner) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::settle(inner) => {
                    <settleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::settleFor(inner) => {
                    <settleForCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::sync(inner) => {
                    <syncCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::take(inner) => {
                    <takeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::unlock(inner) => {
                    <unlockCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::updateDynamicLPFee(inner) => {
                    <updateDynamicLPFeeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::burn(inner) => {
                    <burnCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::clear(inner) => {
                    <clearCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::collectProtocolFees(inner) => {
                    <collectProtocolFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::donate(inner) => {
                    <donateCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::extsload_0(inner) => {
                    <extsload_0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::extsload_1(inner) => {
                    <extsload_1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::extsload_2(inner) => {
                    <extsload_2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::exttload_0(inner) => {
                    <exttload_0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::exttload_1(inner) => {
                    <exttload_1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isOperator(inner) => {
                    <isOperatorCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::modifyLiquidity(inner) => {
                    <modifyLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::protocolFeeController(inner) => {
                    <protocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::protocolFeesAccrued(inner) => {
                    <protocolFeesAccruedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::setOperator(inner) => {
                    <setOperatorCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setProtocolFee(inner) => {
                    <setProtocolFeeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setProtocolFeeController(inner) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::settle(inner) => {
                    <settleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::settleFor(inner) => {
                    <settleForCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::sync(inner) => {
                    <syncCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::take(inner) => {
                    <takeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::unlock(inner) => {
                    <unlockCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::updateDynamicLPFee(inner) => {
                    <updateDynamicLPFeeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`PoolManager`](self) custom errors.
    pub enum PoolManagerErrors {
        AlreadyUnlocked(AlreadyUnlocked),
        CurrenciesOutOfOrderOrEqual(CurrenciesOutOfOrderOrEqual),
        CurrencyNotSettled(CurrencyNotSettled),
        DelegateCallNotAllowed(DelegateCallNotAllowed),
        InvalidCaller(InvalidCaller),
        ManagerLocked(ManagerLocked),
        MustClearExactPositiveDelta(MustClearExactPositiveDelta),
        NonZeroNativeValue(NonZeroNativeValue),
        PoolNotInitialized(PoolNotInitialized),
        ProtocolFeeCannotBeFetched(ProtocolFeeCannotBeFetched),
        ProtocolFeeTooLarge(ProtocolFeeTooLarge),
        SwapAmountCannotBeZero(SwapAmountCannotBeZero),
        TickSpacingTooLarge(TickSpacingTooLarge),
        TickSpacingTooSmall(TickSpacingTooSmall),
        UnauthorizedDynamicLPFeeUpdate(UnauthorizedDynamicLPFeeUpdate),
    }
    #[automatically_derived]
    impl PoolManagerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 137u8, 67u8, 142u8],
            [25u8, 210u8, 69u8, 207u8],
            [30u8, 228u8, 151u8, 2u8],
            [48u8, 210u8, 22u8, 65u8],
            [72u8, 106u8, 163u8, 7u8],
            [72u8, 245u8, 195u8, 237u8],
            [80u8, 144u8, 214u8, 198u8],
            [82u8, 18u8, 203u8, 161u8],
            [84u8, 227u8, 202u8, 13u8],
            [110u8, 108u8, 152u8, 48u8],
            [167u8, 171u8, 226u8, 247u8],
            [183u8, 0u8, 36u8, 248u8],
            [189u8, 167u8, 58u8, 191u8],
            [190u8, 139u8, 133u8, 7u8],
            [233u8, 233u8, 5u8, 136u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PoolManagerErrors {
        const NAME: &'static str = "PoolManagerErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 15usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyUnlocked(_) => {
                    <AlreadyUnlocked as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CurrenciesOutOfOrderOrEqual(_) => {
                    <CurrenciesOutOfOrderOrEqual as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CurrencyNotSettled(_) => {
                    <CurrencyNotSettled as alloy_sol_types::SolError>::SELECTOR
                }
                Self::DelegateCallNotAllowed(_) => {
                    <DelegateCallNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCaller(_) => <InvalidCaller as alloy_sol_types::SolError>::SELECTOR,
                Self::ManagerLocked(_) => <ManagerLocked as alloy_sol_types::SolError>::SELECTOR,
                Self::MustClearExactPositiveDelta(_) => {
                    <MustClearExactPositiveDelta as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NonZeroNativeValue(_) => {
                    <NonZeroNativeValue as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PoolNotInitialized(_) => {
                    <PoolNotInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProtocolFeeCannotBeFetched(_) => {
                    <ProtocolFeeCannotBeFetched as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProtocolFeeTooLarge(_) => {
                    <ProtocolFeeTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SwapAmountCannotBeZero(_) => {
                    <SwapAmountCannotBeZero as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TickSpacingTooLarge(_) => {
                    <TickSpacingTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TickSpacingTooSmall(_) => {
                    <TickSpacingTooSmall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorizedDynamicLPFeeUpdate(_) => {
                    <UnauthorizedDynamicLPFeeUpdate as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<PoolManagerErrors>] = &[
                {
                    fn DelegateCallNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <DelegateCallNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::DelegateCallNotAllowed)
                    }
                    DelegateCallNotAllowed
                },
                {
                    fn NonZeroNativeValue(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <NonZeroNativeValue as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::NonZeroNativeValue)
                    }
                    NonZeroNativeValue
                },
                {
                    fn ProtocolFeeCannotBeFetched(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <ProtocolFeeCannotBeFetched as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::ProtocolFeeCannotBeFetched)
                    }
                    ProtocolFeeCannotBeFetched
                },
                {
                    fn UnauthorizedDynamicLPFeeUpdate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <UnauthorizedDynamicLPFeeUpdate as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PoolManagerErrors::UnauthorizedDynamicLPFeeUpdate)
                    }
                    UnauthorizedDynamicLPFeeUpdate
                },
                {
                    fn PoolNotInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <PoolNotInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::PoolNotInitialized)
                    }
                    PoolNotInitialized
                },
                {
                    fn InvalidCaller(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <InvalidCaller as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(PoolManagerErrors::InvalidCaller)
                    }
                    InvalidCaller
                },
                {
                    fn AlreadyUnlocked(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <AlreadyUnlocked as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::AlreadyUnlocked)
                    }
                    AlreadyUnlocked
                },
                {
                    fn CurrencyNotSettled(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <CurrencyNotSettled as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::CurrencyNotSettled)
                    }
                    CurrencyNotSettled
                },
                {
                    fn ManagerLocked(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <ManagerLocked as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(PoolManagerErrors::ManagerLocked)
                    }
                    ManagerLocked
                },
                {
                    fn CurrenciesOutOfOrderOrEqual(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <CurrenciesOutOfOrderOrEqual as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::CurrenciesOutOfOrderOrEqual)
                    }
                    CurrenciesOutOfOrderOrEqual
                },
                {
                    fn ProtocolFeeTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <ProtocolFeeTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::ProtocolFeeTooLarge)
                    }
                    ProtocolFeeTooLarge
                },
                {
                    fn TickSpacingTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <TickSpacingTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::TickSpacingTooLarge)
                    }
                    TickSpacingTooLarge
                },
                {
                    fn MustClearExactPositiveDelta(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <MustClearExactPositiveDelta as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::MustClearExactPositiveDelta)
                    }
                    MustClearExactPositiveDelta
                },
                {
                    fn SwapAmountCannotBeZero(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <SwapAmountCannotBeZero as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::SwapAmountCannotBeZero)
                    }
                    SwapAmountCannotBeZero
                },
                {
                    fn TickSpacingTooSmall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PoolManagerErrors> {
                        <TickSpacingTooSmall as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate,
                        )
                        .map(PoolManagerErrors::TickSpacingTooSmall)
                    }
                    TickSpacingTooSmall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyUnlocked(inner) => {
                    <AlreadyUnlocked as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::CurrenciesOutOfOrderOrEqual(inner) => {
                    <CurrenciesOutOfOrderOrEqual as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CurrencyNotSettled(inner) => {
                    <CurrencyNotSettled as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::DelegateCallNotAllowed(inner) => {
                    <DelegateCallNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidCaller(inner) => {
                    <InvalidCaller as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ManagerLocked(inner) => {
                    <ManagerLocked as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::MustClearExactPositiveDelta(inner) => {
                    <MustClearExactPositiveDelta as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NonZeroNativeValue(inner) => {
                    <NonZeroNativeValue as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::PoolNotInitialized(inner) => {
                    <PoolNotInitialized as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ProtocolFeeCannotBeFetched(inner) => {
                    <ProtocolFeeCannotBeFetched as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProtocolFeeTooLarge(inner) => {
                    <ProtocolFeeTooLarge as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::SwapAmountCannotBeZero(inner) => {
                    <SwapAmountCannotBeZero as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::TickSpacingTooLarge(inner) => {
                    <TickSpacingTooLarge as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::TickSpacingTooSmall(inner) => {
                    <TickSpacingTooSmall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::UnauthorizedDynamicLPFeeUpdate(inner) => {
                    <UnauthorizedDynamicLPFeeUpdate as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyUnlocked(inner) => {
                    <AlreadyUnlocked as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::CurrenciesOutOfOrderOrEqual(inner) => {
                    <CurrenciesOutOfOrderOrEqual as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::CurrencyNotSettled(inner) => {
                    <CurrencyNotSettled as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::DelegateCallNotAllowed(inner) => {
                    <DelegateCallNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::InvalidCaller(inner) => {
                    <InvalidCaller as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ManagerLocked(inner) => {
                    <ManagerLocked as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::MustClearExactPositiveDelta(inner) => {
                    <MustClearExactPositiveDelta as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::NonZeroNativeValue(inner) => {
                    <NonZeroNativeValue as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::PoolNotInitialized(inner) => {
                    <PoolNotInitialized as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ProtocolFeeCannotBeFetched(inner) => {
                    <ProtocolFeeCannotBeFetched as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::ProtocolFeeTooLarge(inner) => {
                    <ProtocolFeeTooLarge as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::SwapAmountCannotBeZero(inner) => {
                    <SwapAmountCannotBeZero as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::TickSpacingTooLarge(inner) => {
                    <TickSpacingTooLarge as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::TickSpacingTooSmall(inner) => {
                    <TickSpacingTooSmall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::UnauthorizedDynamicLPFeeUpdate(inner) => {
                    <UnauthorizedDynamicLPFeeUpdate as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out,
                    )
                }
            }
        }
    }
    ///Container for all the [`PoolManager`](self) events.
    pub enum PoolManagerEvents {
        Approval(Approval),
        Initialize(Initialize),
        ModifyLiquidity(ModifyLiquidity),
        OperatorSet(OperatorSet),
        OwnershipTransferred(OwnershipTransferred),
        ProtocolFeeControllerUpdated(ProtocolFeeControllerUpdated),
        ProtocolFeeUpdated(ProtocolFeeUpdated),
        Swap(Swap),
        Transfer(Transfer),
    }
    #[automatically_derived]
    impl PoolManagerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                27u8, 61u8, 126u8, 219u8, 46u8, 156u8, 11u8, 14u8, 124u8, 82u8, 91u8, 32u8, 170u8,
                174u8, 240u8, 245u8, 148u8, 13u8, 46u8, 215u8, 22u8, 99u8, 199u8, 211u8, 146u8,
                102u8, 236u8, 175u8, 172u8, 114u8, 136u8, 89u8,
            ],
            [
                64u8, 233u8, 206u8, 203u8, 159u8, 95u8, 31u8, 28u8, 91u8, 156u8, 151u8, 222u8,
                194u8, 145u8, 123u8, 126u8, 233u8, 46u8, 87u8, 186u8, 85u8, 99u8, 112u8, 141u8,
                172u8, 169u8, 77u8, 216u8, 74u8, 215u8, 17u8, 47u8,
            ],
            [
                84u8, 28u8, 4u8, 28u8, 44u8, 206u8, 72u8, 230u8, 20u8, 179u8, 222u8, 4u8, 60u8,
                146u8, 128u8, 240u8, 107u8, 97u8, 100u8, 192u8, 161u8, 116u8, 22u8, 73u8, 226u8,
                222u8, 60u8, 61u8, 55u8, 95u8, 121u8, 116u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8, 31u8, 208u8,
                164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8, 218u8, 175u8, 227u8,
                180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                179u8, 253u8, 80u8, 113u8, 131u8, 88u8, 135u8, 86u8, 122u8, 6u8, 113u8, 21u8, 17u8,
                33u8, 137u8, 77u8, 220u8, 204u8, 40u8, 66u8, 241u8, 209u8, 11u8, 237u8, 173u8,
                19u8, 224u8, 209u8, 124u8, 172u8, 233u8, 167u8,
            ],
            [
                180u8, 189u8, 142u8, 245u8, 61u8, 246u8, 144u8, 185u8, 148u8, 61u8, 51u8, 24u8,
                153u8, 96u8, 6u8, 219u8, 184u8, 42u8, 37u8, 245u8, 71u8, 25u8, 216u8, 200u8, 3u8,
                91u8, 81u8, 106u8, 42u8, 91u8, 138u8, 204u8,
            ],
            [
                206u8, 181u8, 118u8, 217u8, 241u8, 94u8, 78u8, 32u8, 15u8, 219u8, 80u8, 150u8,
                214u8, 77u8, 93u8, 253u8, 102u8, 126u8, 22u8, 222u8, 242u8, 12u8, 30u8, 239u8,
                209u8, 66u8, 86u8, 216u8, 227u8, 250u8, 162u8, 103u8,
            ],
            [
                221u8, 70u8, 110u8, 103u8, 78u8, 165u8, 87u8, 245u8, 98u8, 149u8, 226u8, 208u8,
                33u8, 138u8, 18u8, 94u8, 164u8, 180u8, 240u8, 246u8, 243u8, 48u8, 123u8, 149u8,
                248u8, 94u8, 97u8, 16u8, 131u8, 141u8, 100u8, 56u8,
            ],
            [
                233u8, 196u8, 37u8, 147u8, 231u8, 31u8, 132u8, 64u8, 59u8, 132u8, 53u8, 44u8,
                209u8, 104u8, 214u8, 147u8, 226u8, 201u8, 252u8, 209u8, 253u8, 188u8, 195u8, 254u8,
                178u8, 29u8, 146u8, 180u8, 62u8, 102u8, 150u8, 249u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for PoolManagerEvents {
        const NAME: &'static str = "PoolManagerEvents";
        const COUNT: usize = 9usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::Approval)
                }
                Some(<Initialize as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialize as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::Initialize)
                }
                Some(<ModifyLiquidity as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ModifyLiquidity as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::ModifyLiquidity)
                }
                Some(<OperatorSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <OperatorSet as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::OperatorSet)
                }
                Some(<OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::OwnershipTransferred)
                }
                Some(
                    <ProtocolFeeControllerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => <ProtocolFeeControllerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                    topics, data, validate,
                )
                .map(Self::ProtocolFeeControllerUpdated),
                Some(<ProtocolFeeUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProtocolFeeUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::ProtocolFeeUpdated)
                }
                Some(<Swap as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Swap as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::Swap)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate)
                        .map(Self::Transfer)
                }
                _ => alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                    name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                    log: alloy_sol_types::private::Box::new(
                        alloy_sol_types::private::LogData::new_unchecked(
                            topics.to_vec(),
                            data.to_vec().into(),
                        ),
                    ),
                }),
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for PoolManagerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::Initialize(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ModifyLiquidity(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OperatorSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProtocolFeeControllerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProtocolFeeUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Swap(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::Transfer(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialize(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ModifyLiquidity(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OperatorSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProtocolFeeControllerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProtocolFeeUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Swap(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`PoolManager`](self) contract instance.

    See the [wrapper's documentation](`PoolManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> PoolManagerInstance<T, P, N> {
        PoolManagerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        controllerGasLimit: alloy::sol_types::private::U256,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<PoolManagerInstance<T, P, N>>>
    {
        PoolManagerInstance::<T, P, N>::deploy(provider, controllerGasLimit)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        controllerGasLimit: alloy::sol_types::private::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        PoolManagerInstance::<T, P, N>::deploy_builder(provider, controllerGasLimit)
    }
    /**A [`PoolManager`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`PoolManager`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct PoolManagerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for PoolManagerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("PoolManagerInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > PoolManagerInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`PoolManager`](self) contract instance.

        See the [wrapper's documentation](`PoolManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            controllerGasLimit: alloy::sol_types::private::U256,
        ) -> alloy_contract::Result<PoolManagerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, controllerGasLimit);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            controllerGasLimit: alloy::sol_types::private::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(&constructorCall {
                        controllerGasLimit,
                    })[..],
                ]
                .concat()
                .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> PoolManagerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> PoolManagerInstance<T, P, N> {
            PoolManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > PoolManagerInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowanceCall, N> {
            self.call_builder(&allowanceCall { owner, spender, id })
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::U256,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall {
                spender,
                id,
                amount,
            })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            owner: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { owner, id })
        }
        ///Creates a new call builder for the [`burn`] function.
        pub fn burn(
            &self,
            from: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::U256,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, burnCall, N> {
            self.call_builder(&burnCall { from, id, amount })
        }
        ///Creates a new call builder for the [`clear`] function.
        pub fn clear(
            &self,
            currency: <Currency as alloy::sol_types::SolType>::RustType,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, clearCall, N> {
            self.call_builder(&clearCall { currency, amount })
        }
        ///Creates a new call builder for the [`collectProtocolFees`] function.
        pub fn collectProtocolFees(
            &self,
            recipient: alloy::sol_types::private::Address,
            currency: <Currency as alloy::sol_types::SolType>::RustType,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, collectProtocolFeesCall, N> {
            self.call_builder(&collectProtocolFeesCall {
                recipient,
                currency,
                amount,
            })
        }
        ///Creates a new call builder for the [`donate`] function.
        pub fn donate(
            &self,
            key: <PoolKey as alloy::sol_types::SolType>::RustType,
            amount0: alloy::sol_types::private::U256,
            amount1: alloy::sol_types::private::U256,
            hookData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, donateCall, N> {
            self.call_builder(&donateCall {
                key,
                amount0,
                amount1,
                hookData,
            })
        }
        ///Creates a new call builder for the [`extsload_0`] function.
        pub fn extsload_0(
            &self,
            slot: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, extsload_0Call, N> {
            self.call_builder(&extsload_0Call { slot })
        }
        ///Creates a new call builder for the [`extsload_1`] function.
        pub fn extsload_1(
            &self,
            startSlot: alloy::sol_types::private::FixedBytes<32>,
            nSlots: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, extsload_1Call, N> {
            self.call_builder(&extsload_1Call { startSlot, nSlots })
        }
        ///Creates a new call builder for the [`extsload_2`] function.
        pub fn extsload_2(
            &self,
            slots: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
        ) -> alloy_contract::SolCallBuilder<T, &P, extsload_2Call, N> {
            self.call_builder(&extsload_2Call { slots })
        }
        ///Creates a new call builder for the [`exttload_0`] function.
        pub fn exttload_0(
            &self,
            slots: alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
        ) -> alloy_contract::SolCallBuilder<T, &P, exttload_0Call, N> {
            self.call_builder(&exttload_0Call { slots })
        }
        ///Creates a new call builder for the [`exttload_1`] function.
        pub fn exttload_1(
            &self,
            slot: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, exttload_1Call, N> {
            self.call_builder(&exttload_1Call { slot })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            key: <PoolKey as alloy::sol_types::SolType>::RustType,
            sqrtPriceX96: <alloy::sol_types::sol_data::Uint<
                160,
            > as alloy::sol_types::SolType>::RustType,
            hookData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(&initializeCall {
                key,
                sqrtPriceX96,
                hookData,
            })
        }
        ///Creates a new call builder for the [`isOperator`] function.
        pub fn isOperator(
            &self,
            owner: alloy::sol_types::private::Address,
            operator: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isOperatorCall, N> {
            self.call_builder(&isOperatorCall { owner, operator })
        }
        ///Creates a new call builder for the [`mint`] function.
        pub fn mint(
            &self,
            to: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::U256,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mintCall, N> {
            self.call_builder(&mintCall { to, id, amount })
        }
        ///Creates a new call builder for the [`modifyLiquidity`] function.
        pub fn modifyLiquidity(
            &self,
            key: <PoolKey as alloy::sol_types::SolType>::RustType,
            params: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
            hookData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, modifyLiquidityCall, N> {
            self.call_builder(&modifyLiquidityCall {
                key,
                params,
                hookData,
            })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`protocolFeeController`] function.
        pub fn protocolFeeController(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, protocolFeeControllerCall, N> {
            self.call_builder(&protocolFeeControllerCall {})
        }
        ///Creates a new call builder for the [`protocolFeesAccrued`] function.
        pub fn protocolFeesAccrued(
            &self,
            currency: <Currency as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, protocolFeesAccruedCall, N> {
            self.call_builder(&protocolFeesAccruedCall { currency })
        }
        ///Creates a new call builder for the [`setOperator`] function.
        pub fn setOperator(
            &self,
            operator: alloy::sol_types::private::Address,
            approved: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setOperatorCall, N> {
            self.call_builder(&setOperatorCall { operator, approved })
        }
        ///Creates a new call builder for the [`setProtocolFee`] function.
        pub fn setProtocolFee(
            &self,
            key: <PoolKey as alloy::sol_types::SolType>::RustType,
            newProtocolFee: <alloy::sol_types::sol_data::Uint<
                24,
            > as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, setProtocolFeeCall, N> {
            self.call_builder(&setProtocolFeeCall {
                key,
                newProtocolFee,
            })
        }
        ///Creates a new call builder for the [`setProtocolFeeController`] function.
        pub fn setProtocolFeeController(
            &self,
            controller: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setProtocolFeeControllerCall, N> {
            self.call_builder(&setProtocolFeeControllerCall { controller })
        }
        ///Creates a new call builder for the [`settle`] function.
        pub fn settle(&self) -> alloy_contract::SolCallBuilder<T, &P, settleCall, N> {
            self.call_builder(&settleCall {})
        }
        ///Creates a new call builder for the [`settleFor`] function.
        pub fn settleFor(
            &self,
            recipient: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, settleForCall, N> {
            self.call_builder(&settleForCall { recipient })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(&supportsInterfaceCall { interfaceId })
        }
        ///Creates a new call builder for the [`swap`] function.
        pub fn swap(
            &self,
            key: <PoolKey as alloy::sol_types::SolType>::RustType,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
            hookData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapCall, N> {
            self.call_builder(&swapCall {
                key,
                params,
                hookData,
            })
        }
        ///Creates a new call builder for the [`sync`] function.
        pub fn sync(
            &self,
            currency: <Currency as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, syncCall, N> {
            self.call_builder(&syncCall { currency })
        }
        ///Creates a new call builder for the [`take`] function.
        pub fn take(
            &self,
            currency: <Currency as alloy::sol_types::SolType>::RustType,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, takeCall, N> {
            self.call_builder(&takeCall {
                currency,
                to,
                amount,
            })
        }
        ///Creates a new call builder for the [`transfer`] function.
        pub fn transfer(
            &self,
            receiver: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::U256,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCall, N> {
            self.call_builder(&transferCall {
                receiver,
                id,
                amount,
            })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            sender: alloy::sol_types::private::Address,
            receiver: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::U256,
            amount: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(&transferFromCall {
                sender,
                receiver,
                id,
                amount,
            })
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`unlock`] function.
        pub fn unlock(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, unlockCall, N> {
            self.call_builder(&unlockCall { data })
        }
        ///Creates a new call builder for the [`updateDynamicLPFee`] function.
        pub fn updateDynamicLPFee(
            &self,
            key: <PoolKey as alloy::sol_types::SolType>::RustType,
            newDynamicLPFee: <alloy::sol_types::sol_data::Uint<
                24,
            > as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateDynamicLPFeeCall, N> {
            self.call_builder(&updateDynamicLPFeeCall {
                key,
                newDynamicLPFee,
            })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > PoolManagerInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`Initialize`] event.
        pub fn Initialize_filter(&self) -> alloy_contract::Event<T, &P, Initialize, N> {
            self.event_filter::<Initialize>()
        }
        ///Creates a new event filter for the [`ModifyLiquidity`] event.
        pub fn ModifyLiquidity_filter(&self) -> alloy_contract::Event<T, &P, ModifyLiquidity, N> {
            self.event_filter::<ModifyLiquidity>()
        }
        ///Creates a new event filter for the [`OperatorSet`] event.
        pub fn OperatorSet_filter(&self) -> alloy_contract::Event<T, &P, OperatorSet, N> {
            self.event_filter::<OperatorSet>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`ProtocolFeeControllerUpdated`] event.
        pub fn ProtocolFeeControllerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProtocolFeeControllerUpdated, N> {
            self.event_filter::<ProtocolFeeControllerUpdated>()
        }
        ///Creates a new event filter for the [`ProtocolFeeUpdated`] event.
        pub fn ProtocolFeeUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProtocolFeeUpdated, N> {
            self.event_filter::<ProtocolFeeUpdated>()
        }
        ///Creates a new event filter for the [`Swap`] event.
        pub fn Swap_filter(&self) -> alloy_contract::Event<T, &P, Swap, N> {
            self.event_filter::<Swap>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
    }
}
